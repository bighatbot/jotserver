/**
 * 주문서 관련 스크립트 정보
 */
nmp.createModule("nmp.front.order.order_sheet",{
	_htLayer : {},
	_htInstance : {},
	_htValidationFocusing : {
		"InvalidData.CellPhone" : "select[name=receiptInfo.cellPhoneFirst]",
		"InvalidData.SocialNumber" : "input[name=receiptInfo.socialNumberFirst]",
		"InvalidData.ReceiptBizNo" : "input[name=receiptInfo.receiptBizNoFirst]",
		"InvalidData.Card" : "input[name=receiptInfo.receiptCardFirst]",
		"field.required.tempOrder.nonBankBookPayBankCode" : "select[name=nonBankBookSettleInfo.nonBankBookPayBankCode]",
		"field.required.tempOrder.cardCompanyCode" : "select[name=cardSettleInfo.cardCompanyTypeCode]",
		"" : ""
	},
	_htElementSelector : {
		"root" : "body",
		"orderForm" : "#orderForm",
		"deliveryInfos" : "._deliveryInfos",
		"productCouponDiscountAmt" : "._productCouponDiscountAmt",
		"deliveryCouponDiscountAmt" : "._deliveryCouponDiscountAmt",
		"totalDiscountPrice" : "._totalDiscountPrice",
		"lastTotalAccountPrice" : "._lastTotalAccountPrice",
		"totalPayAmount" : "._totalPayAmount",
		"orderAdditionalInfo" : "._orderAdditionalInfo",
		"discountLayerTemplate" : "._tpl_layer_discount",
		"discountLayer" : "._layer_discount",
		"deliveryFeeLayerTemplate" : "._tpl_layer_deliveryFee",
		"deliveryFeeLayer" : "._layer_deliveryFee",
		"deliveryFeeLayerFixedWidth" : "._layer_deliveryFee_fixedWidth",
		"hopeDeliveryFeeLayerTemplate" : "._tpl_layer_hopeDeliveryFee",
		"hopeDeliveryFeeLayer" : "._layer_hopeDeliveryFee",
		"mileageLayerTemplate" : "._tpl_layer_mileage",
		"mileageLayer" : "._layer_mileage",
		"easyPayMileageLayerTemplate" : "._tpl_layer_easypay_mileage",
		"easyPayMileageLayer" : "._layer_easypay_mileage",
		"reviewMileageLayerTemplate" : "._tpl_layer_review_mileage",
		"reviewMileageLayer" : "._layer_review_mileage",
		"nstampLayerTemplate" : "._tpl_layer_nstamp",
		"nstampLayer" : "._layer_nstamp",
		"prestigeLayer" : "._layer_prestige",
		"prestigeTemplate" : "._tpl_prestige",
		"mallProvisionLayerTemplate" : "._tpl_layer_mall_provision",
		"mallProvisionLayer" : "._layer_mall_provision",
		"commonLayer" : "._layer_common",
		"commonCashLayer" : "._layer_common_cash",
		"commonOverseaLayer" : "._layer_common_oversea",
		"commonLineLayer" : "._layer_common_line",
		"commonEdgedLayer" : "._layer_common_edged",
		"commonEdgedLineLayer" : "._layer_common_edged_line",
		"naverMileageServiceIntroLayer" : "._naverMileageServiceIntro",
		"inflowBenefitIntroLayer" : "._inflowBenefitIntro",
		"ecShoppingServiceIntroLayer" : "._ecShoppingServiceIntro",
		"overSeaIntroLayer" : "._overSeaIntroLayer",
		"reliefPhoneNumberInfoLayer" : "._reliefPhoneNumberInfo",
		"naverMileageContractLayer" : "._naverMileageContract",
		"memberTelNumber" : "._memberTelNumber",
		"memberEmailAddress" : "._memberEmailAddress",
		"refundInfos" : "._refundInfo",						// 환불 정보 테이블
		"calculationDiscountTarget" : "._calculationDiscountTarget",		// 할인금액 계산 대상
		"mileageUseAmountInput" : "._mileageUseAmount",
		"deliveryMemo" : "input[name=deliveryMemo]",
		"latestDeliveryMemoTemplate" : "._tpl_latest_delivery_memo",
		"latestDeliveryMemoes" : "._latestDeliveryMemoes",
		"switchPaymentArea" : "._switchPaymentArea",
		"dimmedLayer" : "._dimmedLayer",
		"payButton":".btn_payment",
		"agreeButtons" : "input._agreeBtn",
		"allAgreeButton" : "input._allAgreeBtn",
		"accountInfo" : "tbody.accountInfo",
		"purchaserAgreements" : "._purchaserAgreements",
		"individualCustomUniqueCode" : "input[name=individualCustomUniqueCode]",
		"deliveryInfoType" : "._deliveryInfoType",
		"deliveryPlaces" : "._deliveryPlaces",
		"usePurchaserTelNumber" : "input[name=usePurchaserTelNumber]",
		"baseAddressArea" : "._baseAddressArea",
		"allAddressArea" : "._allAddressArea",
		"deliveryMemoOuter" : "._deliveryMemoOuter",
		"deliveryMemoInner" : "._deliveryMemoInner",
		"deliveryMemoHeader" : "._deliveryMemoHeader",
		"payMethodTabOpenArea" : "._payMethodTabOpenArea",
		"naverPaymentsCard" : "._naverPaymentsCard",
		"naverPaymentsBank" : "._naverPaymentsBank",
		"generalPayments" : "._generalPayments",
		"generalPaymentsList" : "._generalPaymentsList",
		"orderAdditionalInfoSelectBoxes" : "._orderAdditionalInfoSelectBoxes",
		"paymentInfoArea" : "._paymentInfoArea",
		"individualCustomUniqueCodeInput" : "._individualCustomUniqueCodeInput",
		"individualCustomUniqueCodeSaved" : "._individualCustomUniqueCodeSaved",
		"cashReceiptInfoSaved" : "._cashReceiptInfoSaved",
		"refuneMethodLayer" : "._layer_refund_method",
		"fdsUuid" : "._fdsUuid",
		"naverToken" : "._naverToken",
		"authentificationToken" : "._authentificationToken",
		"individualCustomUniqueCodeInputLayer" : "._layer_icuc_input",
		"individualCustomUniqueCodeSavedLayer" : "._layer_icuc_saved",
		"thirdPeopleAgreeLayer" : "._layer_third_people",
		"pointChargeDescLayer" : "._layer_point_charge_desc",
		"naverCashLayer" : "._layer_naver_cash",
		"chargedPointLayer" : "._layer_charged_point",
		"payLaterLayer" : "._payLaterLayer",
		"naverPayCardPointLayer" : "._layer_naverpay_cardpoint",
		"naverPayEventLayer" : "._layer_naverpay_event",
		"easyPayMethodButton" : "._easyPayMethod",
		"payEventLayer" : "._layer_payEvent",
		"payEventLayerTemplate" : "._tpl_layer_payEvent",
		"paymentsArea" : "._paymentsArea",
		"simplePaymentsArea" : "._simplePaymentsArea",
		"cashReceiptHeader" : "._cashReceiptHeader",
		"cashReceiptNotice" : "._cashReceiptNotice",
		"cashReceiptMerchantNotice" : "._cashReceiptMerchantNotice",
		"naverPayAuthPopup" : "._naverPayAuthPopup",
		"bcCardLayer" : "._layer_bc_card",
		"benefitAreaDisplayStatus" : "._benefitAreaDisplayStatus",
		"creditCardInstallmentArea" : "._creditCardInstallmentArea",
		"defaultEasyPayCard" : "input[name=defaultEasyCardCode]",
		"changeEasyPayInfoNotice" : "._changeEasyPayInfoNotice",
		"purchaserInfo" : "._purchaserInfo",
		"telNoNoti" : "._telNoNoti",
		"telNoDuplicated" : "._telNoDuplicated",
		"telNoInfo" : "._telNoInfo",
		"telNoHighlight" : "._telNoHighlight",
		"companyCardNotice" : "._companycard_notice",
		"deliveryAddressAgreeLayer" : "._layer_delivery_address",
		"cardEventText" : "._cardEvent",
		"chargeEventText" : "._chargeEvent",
		"recentDeliveryAddressArea" : "._recentDeliveryAddressArea",
		"naverCafeC3AgreeLayer": "._layer_naver_cafe_c3",
		"commonOrderAgreeLayer": "._layer_common_order_agree",
		"mallOrderAgreeLayer": "._layer_mall_order_agree",
		"customOrderAgreeLayer" : "._layer_custom_order_agree",
		"preOrderAgreeLayer" : "._layer_pre_order_agree",
		"totalCardPointAmount" : "._totalCardPointAmount",
		"cardPointInputArea" : "._cardPointInputArea",
		"convertCardPointBtn" : "._convertCardPointBtn",
		"cardPointCheck" : "._cardPointCheck",
		"cardPointFailed" : "._cardPointFailed",
		"cardPointLoading" : "._cardPointLoading",
		"pointBalance" : "._pointBalance",
		"paymentMethodStatement": "._paymentMethodStatement",
		"deliveryPlaceNameListArea":"._delivery_place_name_list_area",
		"eventBannerAreaCvsCharge" : "._eventBannerAreaCvsCharge",
		"blackconsumerLayerTemplate" : "._tpl_layer_blackconsumer",
		"naverPointArea" : "._naverPointArea",
		"pointChargeArea" : "._pointChargeArea",
		"usePointAllMarker":" ._usePointAllMarker",
		"usePointAllCheckboxInput" : "input[name='usePointAllCheckbox']",
		"pointChargeLayerTemplate" : "._tpl_layer_point_charge",
		"cashReceiptInfoLayer": ".layer_cash_receipt_info",
		"easyPayBankPanelTemplate": "._tpl_easy_pay_bank_panel",
		"easyPayCardInfoTemplate" : "._tpl_easy_pay_card_info",
		"easyPayCardFlickArea": "._easyPayCardFlickArea",
		"easyPayBankFlickArea": "._easyPayBankFlickArea",
		"cardBenefitLayerTemplate" : "._tpl_layer_card_benefit",
		"cardBenefitLayer" : "._layer_card_benefit",
		"cardBenefitInfo" : "._cardBenefitInfo",
		"cardBenefitArea" : "._cardBenefit",
		"cardBenefitItem" : "._cardBenefitItem",
		"cardBenefitTemplate" : "._tpl_card_benefit",
		"cardBenefitTag" : "._card_benefit_tag",
		"limitChargePointAmountGuide" : "._limitChargePointAmountGuide",
        "discountOptimizationFailHelpLayer" : "._discountOptimizationFailHelpLayer",
		"pointAllUseButton" : "._pointAllUseButton",
		"payLaterAllUseButton" : "._payLaterAllUseButton",
		"purchaseBenefitArea" : "._purchaseBenefit",
		"reviewBenefitArea" : "._reviewBenefit",
		"purchaseBenefitTemplate" : "._tpl_purchase_benefit",
		"reviewBenefitTemplate" : "._tpl_review_benefit",
		"registerAccountBenefitTemplate" : "._tpl_register_account_benefit",
		"registerAccountBenefitC1GuideTemplate" : "._tpl_review_benefit_guide_c1",
		"registerAccountBenefitC2GuideTemplate" : "._tpl_review_benefit_guide_c2",
		"adultAuthenticationLayer" : "._layer_adult_authentication",
		"socialNumberSecond" : "._socialNumberSecond",
		"payNextGuideLayer" : "._layer_pay_next_guide",
		"payNextGuideLayerTemplate" : "._tpl_layer_payNextGuide",
		"skip_form" : "._skipTemplate",
		"skipPayMethodInfo" : "._skipPayMethodInfo",
		"skip_bank_info" : "._skipBankInfo",
		"skip_mobile_info" : "._skipMobileInfo",
		"skip_credit_card_info" : "._skipCreditCardInfo",
		"openbankingAgreeLayer" : "._layer_openbanking_agree",
		"skipLayerGeneralPay" : "._skipGeneralPayLayer",
		"skipLayerVirtualAccount" : "._skipVirtualAccountLayer",
		"skipLayers" : "._skipLayer",
		"refundAccountList" : "._refundAccountList",
		"refundAddBankAccount" : "._refundAddBankAccount",
		"refundViewMore" : "._refundViewMore",
		"refundAccountGuideLayer" : "._layer_refund_account_guide",
		"representRefundAccount" : "._rep_refund_account",
		"noDefaultRefundAccount" : "._noDefaultRefundAccount",
		"chargedPointBankList" : "._chargedPointBankList",
		"chargedPointAddBankAccount" : "._chargedPointAddBankAccount",
		"chargePointBankListToggleButton" : "._chargePointBankListToggleButton",
		"chargeBenefitPoint" : "._chargeBenefitPoint",
		"chargeBenefitPointText" : "._chargeBenefitPointText",
		"pickupLocationContent" : "._pickupLocationContent",
		"entryMethodArea" : "._entryMethodArea",
		"entryMethodContent" : "._entryMethodContent",
		"easyCardShinhanTextBanner" : "._naverPaymentsCard .banner_text",
		"generalPaymentShinhanTextBanner" : "._generalPaymentsTab .banner_text",
		"mileageUsedPaymentAmountArea" : "._mileageUsedPaymentAmountArea",
		"iiomaAgreeLayer" : "._layer_iioma",
		"iiomaAgreeLayerTemplate" : "._layer_iioma_template",
		"usePayLaterAmountArea" : "._usePayLaterAmountArea",
		"membershipItemHelp" : "._tpl_membership_help",
		"chargePointUseCardBanner" : "._chargePointUseCardBanner",
		"chargePointUseCreditCard":"._chargePointUseCreditCard",
		"chargePointUseCheckCard":"._chargePointUseCheckCard",
		"membershipPlccPointBenefitBanner":"._membershipPlccPointBenefitBanner",
		"membershipPlccPointBenefitBannerDetail":"._membershipPlccPointBenefitBannerDetail",
		"membershipPlccExpectedAmount":"._membershipPlccExpectedAmount",
		"mobileMethodArea" : "._mobileMethodArea",
		"" : ""
	},
	initialize : function(options) {
		this._initializeEventAttach();
		this._initializeUrl();
		this._initializeJindoComponents();
		this._htInstance["chargePoint"] = this.chargePoint();
		this._htInstance["payLater"] = this.payLaterInit();
		this._initializeMessage();
		this._initializeOrderSnapshot();
		this._initializeDiscountSummary(this._htInstance["orderSnapshot"]);
		this._initializeMileageMap();
		this._initializeMileageUseAmountInput();
		this.checkPossibleInstallment();
		this._getChargePoint().init();
		this._getPayLater().init();

		if (!this._getOption("usePointAllYn") || this._getOption("usePointAllYn") == false
			|| (this._getTotalPayAmount() <= 0)
			|| this._getOption("remainTotalNaverPoint") <= 0
			|| (this._getPayLater().hasUseAmount() && this._getGeneralPayAmountExceptUsePointAfterCharge() > 0)
		) {
			this.visibleControlSettlement(true);

			if(!this._getChargePoint().isChecked()){
				var elPurchaserDefaultPayment = this.initializeDefaultPaymentInfo();

				if (elPurchaserDefaultPayment == undefined || (elPurchaserDefaultPayment.getAttribute != undefined && this._isEasyPay(elPurchaserDefaultPayment.getAttribute("data-code")))) {
					if (elPurchaserDefaultPayment == undefined || this._isEasyPayCreditCard(elPurchaserDefaultPayment.getAttribute("data-code"))) {
						this._htInstance["easyPayCardFlicking"] = this._initPreviewFlick("Card");
					} else if (this._isEasyPayBank(elPurchaserDefaultPayment.getAttribute("data-code"))) {
						this._htInstance["easyPayBankFlicking"] = this._initPreviewFlick("Bank");
					}
				}

				this.changePayment(null, elPurchaserDefaultPayment);
				this._htInstance["previousPayMethod"] = this._getDefaultPaymentInfo();
			}

			this.calculateTotalPrice();
		} else {
			// 보조결제수단 전액 사용
			this._htInstance["previousPayMethod"] = !this._getChargePoint().isCheckedWithNoPayable() ? this._getDefaultPaymentInfo() : undefined;
			this.useAllSubSettle();
		}

		this._checkDeliveryFeeViolation();
		this._defaultMobilePinPayStatus();
		this._getPointStatusAndAmount();
		this._htInstance["completeInitialize"] = true;
		this.recalculateAccumulationNMileage();
		this._initializeRefundAccount();

	},
	_initializeMessage : function () {
		// 포인트 리로드
		nmp.message.receive("reloadParentWindow", $Fn(this.receivePostMessage, this).bind());
		// 주문자 정보 - 휴대폰 수정
		nmp.message.receive("nmp.front.order.order_sheet.callbackChangeMemberCellphone", this.callbackChangeMemberCellphone);
		// 주문자 정보 - 이메일 수정
		nmp.message.receive("nmp.front.order.order_sheet.callbackChangeMemberEmail", this.callbackChangeMemberEmail);
	},
	receivePostMessage : function(event) {
		var htUrls = this._getOption("urls");
		var payHost = htUrls["user.front.host"];
		if (event.origin.indexOf(payHost) < 0) {
			return ;
		}
		if (event && event.data && event.data.type && event.data.type.indexOf("reloadParentWindow") >= 0) {
			window.location.reload();
		}
	},
	callbackRegisterEasyBankSuccess : function (resultCode, resultMessage, accountKey, bankCode, maskedAccountNo, nickName, payPartnershipItemCode, payPartnershipItemName, isPayable) {
		// 계좌 미등록 고객 포인트 사용금액 제한 문구 제거
		if (this._getElement("limitChargePointAmountGuide") != undefined) {
			this._getElement("limitChargePointAmountGuide").hide();
		}

        if (resultCode != null) {
			var oRegisteredEasyPayBank = {
				'accountKey' : accountKey,
				'bankCode' : bankCode,
				'maskedAccountNo' : maskedAccountNo,
				'nickName' : nickName,
				'payPartnershipItemCode' : payPartnershipItemCode,
				'payPartnershipItemName' : payPartnershipItemName,
				'isPayable' : isPayable,
			};

			this._addEasyPayBankPanel(oRegisteredEasyPayBank);
		}
	},
	callbackRegisterEasyBankFail : function (resultCode, resultMessage, acctKey, bnkCd, maskAcctNo, nickNm, payBnkbCd, payBnkbNm, isPayable) {
	},
	openEasyPayPopupByPayMethod : function (sPayMethod) {
		if (this._isEasyPayCreditCard(sPayMethod)) {
			this.openEasyPayCardPopup();
		} else if (this._isEasyPayBank(sPayMethod)) {
			this.openEasyPayBankPopup();
		}
	},
	openEasyPayBankPopup : function () {
		var htUrls = this._getOption("urls");
		var sRegisterUrl = htUrls["pc.easy.bank.register.url"];

		var sReturnUrl = htUrls["order.ordersheet.registration.bank.return.url"];
		var sCancelUrl = htUrls["order.ordersheet.registration.bank.cancel.url"];
		var htData = {"returnUrl": sReturnUrl, "cancelUrl": sCancelUrl, "oType": "S"};

		var sUrl = sRegisterUrl + "?" + $H(htData).toQueryString();
		nmp.openPopup(sUrl, ["width=500", "height=660", "scrollbars=yes"], "openEasyPayBankPopup", null, true);
	},
	_createEasyPayBankPanelHtml : function (oRegisteredEasyPayBank) {
		return $Template(this._getElement("easyPayBankPanelTemplate").html()).process({
			"oRegisteredEasyPayBank": oRegisteredEasyPayBank
		});
	},
	_addEasyPayBankPanel : function (oRegisteredEasyPayBank) {
		var sNewEasyPayBankPanel = this._createEasyPayBankPanelHtml(oRegisteredEasyPayBank);
		var welNewEasyPayBankPanel = $(sNewEasyPayBankPanel);

		var aRegisteredRecentPayMethodList = this._getOption("registeredRecentPayMethodList");
		var welFirstEasyPayBankPanel = $Element(this._getElement("easyPayBankFlickArea").query("._flickPanel"));

		(aRegisteredRecentPayMethodList != undefined && aRegisteredRecentPayMethodList.has("BANK")) ? welFirstEasyPayBankPanel.after(welNewEasyPayBankPanel) : welFirstEasyPayBankPanel.before(welNewEasyPayBankPanel);

		//간편계좌 플리킹 영역 재생성 && 등록된 패널로 이동
		if (this._htInstance["easyPayBankFlicking"] != undefined) {
			this._htInstance["easyPayBankFlicking"].destroy();
			this._htInstance["easyPayBankFlicking"] = this._initPreviewFlick("Bank");
			if (this._getOption("isIE9") != undefined && this._getOption("isIE9")) {
				setTimeout($Fn(function () {
					this._htInstance["easyPayBankFlicking"].refresh(1);
					this._htInstance["easyPayBankFlicking"].moveTo(0);
				}, this).bind(), 0);
				this._htInstance["easyPayBankFlicking"].moveTo((aRegisteredRecentPayMethodList != undefined && aRegisteredRecentPayMethodList.has("BANK")) ? 1 : 0, 10);
			} else {
				this._htInstance["easyPayBankFlicking"].refresh((aRegisteredRecentPayMethodList != undefined && aRegisteredRecentPayMethodList.has("BANK")) ? 1 : 0);
			}
		}
	},
	openEasyPayCardPopup : function () {
		var htUrls = this._getOption("urls");
		var sRegisterUrl = htUrls["pc.easy.card.register.url"];

		var sReturnUrl = htUrls["order.ordersheet.registration.creditCard.return.url"];
		var sCancelUrl = htUrls["order.ordersheet.registration.creditCard.cancel.url"];
		var htData = {"successUrl": sReturnUrl, "failUrl": sCancelUrl};
		var sAvailableCardCodes = "";

		if (this._getOption("partnershipCardCodeList") != undefined && this._getOption("partnershipCardCodeList").length() >= 1) {
			sAvailableCardCodes = "&availableCardCodes=" + this._getOption("partnershipCardCodeList").$value().join(",");
		}

		var sUrl = sRegisterUrl + "?" + $H(htData).toQueryString() + sAvailableCardCodes;
		nmp.openPopup(sUrl, ["width=500", "height=700"], "openEasyPayCardPopup", null, true);
	},
	_initPreviewFlick : function(sPayMethod) {
		var elBaseFlickerArea = $$.getSingle("._easyPay" + sPayMethod + "FlickArea");

		if (elBaseFlickerArea == null) {
			return;
		}

		var welBaseFlickerArea = $Element(elBaseFlickerArea);
		var oEasyPayBaseFlick = new jindo.m.PreviewFlicking("easyPay" + sPayMethod + "Flick", {
			"nMinWidth" : "234px",
			"bActivateOnload": false
		});

		//간편계좌결제 전체 숫자
		var welEasyPayMethodTotalNum = $Element(welBaseFlickerArea.query("._easyPayMethodTotalNum"));
		welEasyPayMethodTotalNum.text(oEasyPayBaseFlick.getTotalPanels() - 1);

		oEasyPayBaseFlick.attach({
			"beforeTouchStart": function(e) {
				e.stop();
			},
			"beforeFlicking": function(e) {
			},
			"flicking": $Fn(function(e) {
				var welEasyPayMethodPrev = $Element(welBaseFlickerArea.query("._easyPayMethodPrev"));
				var welEasyPayBankNext = $Element(welBaseFlickerArea.query("._easyPayMethodNext"));
				var welEasyPayBankCurrentNum = $Element(welBaseFlickerArea.query("._easyPayMethodCurrentNum"));

				var nTotalPanelCount = oEasyPayBaseFlick.getTotalPanels();
				var nEasyPayBankPanelCount = nTotalPanelCount - 1;
				var bIsFirstPanel = e.nContentsIndex === 0;
				var bIsLastPanel = e.nContentsIndex === nEasyPayBankPanelCount;
				var bIsMoreThanTwoBankPanel = nEasyPayBankPanelCount >= 2;

				//Prev버튼 Toggle
				bIsFirstPanel ? welEasyPayMethodPrev.hide() : welEasyPayMethodPrev.show();

				//페이징, Next버튼 Toggle
				if (bIsLastPanel) {
					welEasyPayBankNext.hide();
					welBaseFlickerArea.removeClass('paging');
					$ElementList(welBaseFlickerArea.queryAll("._easyPayMethodPageArea")).hide();
				} else {
					welEasyPayBankNext.show();

					if (bIsMoreThanTwoBankPanel) {
						welEasyPayBankCurrentNum.text(e.nContentsIndex + 1);
						welBaseFlickerArea.addClass('paging');
						$ElementList(welBaseFlickerArea.queryAll("._easyPayMethodPageArea")).show();
					}
				}

				$ElementList(welBaseFlickerArea.queryAll("._easyPayMethodSelect")).removeClass('select');
				$ElementList(welBaseFlickerArea.queryAll("._payMeansClass")).removeClass('selected');
				$ElementList(welBaseFlickerArea.queryAll(".npay_selectbox")).addClass("disabled");

				var elEasyPayMethodSelect = oEasyPayBaseFlick.getElement().query("._easyPayMethodSelect");
				var elEasyPayMethodClass = oEasyPayBaseFlick.getElement().query("._payMeansClass");
				var welEasyPayMethod = $Element(elEasyPayMethodClass);
				welEasyPayMethod.addClass("selected");

				if (elEasyPayMethodSelect != null) {
					var welEasyPayMethodSelect = $Element(elEasyPayMethodSelect);

					if (!welEasyPayMethod.hasClass('disabled')) {
						welEasyPayMethodSelect.addClass('select');
					}
				}

				if(sPayMethod == "Card") {
					this._setEasyPayCardInfoArea(bIsLastPanel, bIsMoreThanTwoBankPanel);
					this._setEasyPayCardBanner(bIsLastPanel);
				}


				this.changePayment(null, elEasyPayMethodClass);

				if(sPayMethod == "Bank" && this.isEasyPayRegistrationMethod(this.getPayMethod(), "BANK")) {
					this._getChargePoint().hideChargePointUseBanner();
				}
			}, this).bind(),
		});

		if (this.getFlickComponent(sPayMethod) == undefined) {
			jindo.$Fn(function (evt) {
				evt.stop();
				nmp.front.order.order_sheet.getFlickComponent(sPayMethod).movePrev();
				this._lazyNclick(evt._event);
			}, this).attach(welBaseFlickerArea.query('._easyPayMethodPrev'), 'click');

			jindo.$Fn(function (evt) {
				evt.stop();
				nmp.front.order.order_sheet.getFlickComponent(sPayMethod).moveNext();
				this._lazyNclick(evt._event);
			}, this).attach(welBaseFlickerArea.query('._easyPayMethodNext'), 'click');
		}

		if (welBaseFlickerArea.visible()) {
			oEasyPayBaseFlick.activate();
		}

		return oEasyPayBaseFlick;
	},
	_initializeRefundAccount : function() {
		if (this._getElement("representRefundAccount") != undefined) {
			//환불계좌 선택해달라는 부분 삭제
			this.deleteNoRepRefundAccount(undefined);
		}

		if (this.selectedRefundAccount()) {
			var welSelectedAccount;
			if (this._getElement("refundAccountList").query(".account_selected") != undefined) {
				welSelectedAccount = $Element(this._getElement("refundAccountList").query(".account_selected").parentElement);
			} else {
				welSelectedAccount = $Element(this._getElement("refundAccountList").query("li"));
			}

			if (welSelectedAccount != undefined && welSelectedAccount.queryAll("span.text_naverbank").length != 0) {
				welSelectedAccount.queryAll("span.txt_naverbank")[0].style.display = "none";
				welSelectedAccount.queryAll("span.txt_naverbank")[1].style.display = "";
			}

		}
	},
	/* 지연 nclick 코드 실행 */
	_lazyNclick: function(event, ms) {
		setTimeout(function (){ this.generateCC(event); }.bind(nclk),ms || 500);
	},
	_setEasyPayCardInfoArea : function (bIsLastPanel, bIsMoreThanTwoBankPanel) {
		var elBaseFlickerArea = $$.getSingle("._easyPayCardFlickArea");
		if (elBaseFlickerArea == null) {
			return;
		}

		var welBaseFlickerArea = $Element(elBaseFlickerArea);
		var welEasyPayCardAddInfoArea = $Element(welBaseFlickerArea.query("._easyPayCardAddInfoArea"));
		var welEasyPayCardInfoArea = $Element(welBaseFlickerArea.query("._easyPayCardInfoArea"));
		var welEasyPayPageArea = $Element(welBaseFlickerArea.query("._easyPayMethodPageArea"));

		welEasyPayPageArea.show();
		if (bIsMoreThanTwoBankPanel && !bIsLastPanel) {
			welEasyPayPageArea.css("visibility", "visible");
		} else {
			welEasyPayPageArea.css("visibility", "hidden");
		}

		if (welEasyPayCardInfoArea) {
			if (bIsLastPanel) {
				welEasyPayCardAddInfoArea.show();
				welEasyPayCardInfoArea.hide();
			} else {
				var elEasyPayElement = this._getSelectedEasyPayCardElement();
				var sCardInfoHtml = $Template(this._getElement("easyPayCardInfoTemplate").html()).process({
					"sCardName" : elEasyPayElement.getAttribute("data-card-name"),
					"sCardNo" : elEasyPayElement.getAttribute("data-card-no"),
					"sCardType" : elEasyPayElement.getAttribute("data-card-type")
				});
				$Element(welEasyPayCardInfoArea.query(".card_desc")).html(sCardInfoHtml);

				welEasyPayCardAddInfoArea.hide();
				welEasyPayCardInfoArea.show();
			}
		}
	},
	/**
	 * 간편 카드결제 > 충전결제 유도 배너 영역 세팅
	 * */
	_setEasyPayCardBanner : function(bIsLastPanel) {
		// 배너 컴포넌트 미존재시 예외처리
		var welChargePointUseCardBanner = this._getElement("chargePointUseCardBanner");
		if(!welChargePointUseCardBanner) {
			return;
		}

		var elEasyPayElement = this._getSelectedEasyPayCardElement();
		// 신용카드 <-> 체크카드 배너 정보 스위칭
		if(elEasyPayElement && elEasyPayElement.getAttribute("data-card-class-type") == "CREDIT" && !bIsLastPanel) {
			this._getElement("chargePointUseCreditCard").show("block");
			this._getElement("chargePointUseCheckCard").hide();
		} else {
			this._getElement("chargePointUseCreditCard").hide();
			this._getElement("chargePointUseCheckCard").show("block");
		}
	},
	_setCardBenefitInfo : function() {
		if (this._isCardBenefitIncluded()) {
			this._getElement("cardBenefitTag").show();
		}

		if (this.getGeneralPayAmount() != null && this._getSelectedEasyPayCardBenefitYn() == "true" && this._getSelectedEasyPayCardRewardRate() != "0") {
			var benefitAmount = this.getGeneralPayAmount() * parseFloat(this._getSelectedEasyPayCardRewardRate());
			if (benefitAmount > this._getSelectedEasyPayCardBenefitResidualAmount()) {
				benefitAmount = this._getSelectedEasyPayCardBenefitResidualAmount();
			}

			htCardBenefits = {}
			htCardBenefits["commaCardBenefitPoint"] = Math.floor(benefitAmount);
			var htCardBenefits = $H(htCardBenefits);

			if (benefitAmount > 0) {
				this._htInstance["commaCardBenefitPoint"] = Math.floor(benefitAmount);
				var elCardBenefitLayerHtml = $Template(this._getElement("cardBenefitTemplate").html()).process(htCardBenefits.$value());
				this._getElement("cardBenefitArea").html(elCardBenefitLayerHtml);
				this._getElement("cardBenefitItem").show();
			} else {
				this._htInstance["commaCardBenefitPoint"] = 0;

				if (this._getElement("cardBenefitItem") != undefined) {
					this._getElement("cardBenefitItem").hide();
				}
			}
		} else {
			this._htInstance["commaCardBenefitPoint"] = 0;

			if (this._getElement("cardBenefitItem") != undefined) {
				this._getElement("cardBenefitItem").hide();
			}
		}
	},
	_defaultMobilePinPayStatus : function () {
		if ($$.getSingle("#mobilePay") != null) {
			if (this._getOption("isPinPayMember")) {
				this._htInstance["isPinPay"] = true;
			} else {
				this._htInstance["isPinPay"] = false;
			}
		}
	},
	_getDefaultPaymentInfo : function () {
		var defaultPayMeansClass = this._getOption("defaultPaymentInfo")["payMeansClassType"];
		if (defaultPayMeansClass == "CREDIT_CARD" && this._getOption("defaultPaymentInfo")["easyPayYn"]) {
			defaultPayMeansClass = this._getOption("defaultPaymentInfo")["cardCompanyTypeCode"];
		} else if (defaultPayMeansClass == "BANK" && this._getOption("defaultPaymentInfo")["easyPayYn"]) {
			defaultPayMeansClass = this._getOption("defaultPaymentInfo")["bankCompanyTypeCode"];
		} else if (defaultPayMeansClass == "VIRTUAL_ACCOUNT") {
			this.selectSkipPayMethod(defaultPayMeansClass);
			defaultPayMeansClass = "SKIP";
		}
		return defaultPayMeansClass;
	},
	getDefaultSubPayMeansClass : function () {
		return this._getOption("defaultSubPaymentInfo")["payMeansClassType"];
	},
	initializeDefaultPaymentInfo : function() {
		var elDefaultPayment = null;
		if(this._getOption("defaultPaymentInfo")
			&& this._getOption("defaultPaymentInfo")["payMeansClassType"]
			&& this._getOption("defaultPaymentInfo")["payMeansClassType"] != "POINT"){
			var defaultPayMeansClass = this._getDefaultPaymentInfo();

			this._htInstance["defaultEasyPayCreditCard"] = this._getOption("defaultPaymentInfo")["cardCompanyTypeCode"];

			if (this._getOption("defaultPaymentInfo")["easyPayYn"]) {
				$A($$("._payMeansClass")).forEach(function (el) {
					if (el.getAttribute("data-code") == defaultPayMeansClass) {
						elDefaultPayment = el;
					}
				});
			} else {
				$A(this._htInstance["aPayMeansClass"]).forEach(function(oGeneralPayMeansClassRadio){
					if(oGeneralPayMeansClassRadio.getInput().value == defaultPayMeansClass){
						elDefaultPayment = oGeneralPayMeansClassRadio.getInput();
					}
				});
			}
		}
		return elDefaultPayment;
	},
	_checkDeliveryFeeViolation : function() {
		// 무료 배송정책임에도 배송비가 있으면 예외처리
		var deliveryGroupMap = this.getOrderSnapshot().deliveryGroupMap;
		var deliveryFeeGroup = this.getOrderSnapshot().deliveryFeeGroupMap;
		$A($H(deliveryGroupMap).keys()).forEach(function(key){
			var deliveryGroup= deliveryGroupMap[key];
			var deliveryGroupFee = deliveryFeeGroup[key];

			if (deliveryGroup.deliveryFeePayType == "FREE" && deliveryGroupFee > 0) {
				$Element($$.getSingle("._doPayButton")).hide();
				alert("무료 배송 상품임에도 배송비가 부과된 상품이 있습니다. 확인 후 다시 주문해주세요.");
				history.back();
			}
		});
	},
	_initializeOrderSnapshot : function() {
		this._htInstance["orderSnapshot"] = this._getOption("orderSnapshot");
		this.getOrderSnapshot().orderPayAmount = this._htInstance["orderSnapshot"].orderPayAmount + (this._getOption("totalDepositAmount") || 0);
	},
	_initializeDiscountSummary : function(orderSnapshot) {
		var calculator = new nmp.component.OrderProductCalculator();
		$A(orderSnapshot.orderProducts).forEach(function(orderProduct) {
			calculator.addOrderProduct(orderProduct);
		});
		calculator.addOrderDiscount(orderSnapshot.discount);
		$H(orderSnapshot.storeDiscounts).forEach(function(value, key) {
			calculator.addStoreDiscount(key, value);
		});
		calculator.addIdPerIssuedImmediateDiscount(nmp.front.order.cloningObject(this._htInstance["idPerIssuedImmediateCoupon"]));

		this._htInstance["summary"] = calculator.calculate();
	},
	_initializeMileageMap : function() {
		this._generateMileageLayerDataFromMap(this._getOption("mileageMap"));
	},
	_initializeMileageUseAmountInput : function() {
		if (this._getOption("remainNaverMileage") > 0 && this._getElement("mileageUseAmountInput") != undefined) {
			this._getElement("mileageUseAmountInput").attr("disabled", null);
		}
	},
	getOrderSnapshot : function() {
		return this._htInstance["orderSnapshot"];
	},
    isDiscountOptimization : function() {
        return this._getOption("isDiscountOptimization");
    },
	getIdPerIssuedImmediateCoupon : function() {
		return this._htInstance["idPerIssuedImmediateCoupon"];
	},
	_getOrderProduct : function(orderProductId) {
		return this.getOrderSnapshot().orderProducts[orderProductId];
	},
	getCreditCardInfos : function() {
		return this._getOption("creditCardInfos");
	},
	getAvailableCreditCardCorp : function() {
		return this._getOption("availableCreditCardCorp");
	},
	/**
	 * @param hiddenTagName
	 * @param value
	 */
	addHiddenTagElement : function (hiddenTagName, value, className){
		if(value == undefined){
			return;
		}
		var orderForm = this._getElement("orderForm");

		var weHiddenElement = $Element("<input type='hidden' name='" + hiddenTagName + "' " + ((className != undefined) ? " class='" + className + "'" : "") + ">");
		weHiddenElement.appendTo(orderForm.$value());
		var hiddenTag = weHiddenElement.$value();
		hiddenTag.value = value;
	},
	applyDiscounts : function(htOrderSnapshot, htSummary, bCloning, bRecalculateMileage) {
		this._htInstance["orderSnapshot"] = (bCloning ? nmp.front.order.cloningObject(htOrderSnapshot) : htOrderSnapshot);
		this._htInstance["summary"] = nmp.front.order.cloningObject(htSummary);

		var totalDiscountPrice = htSummary["summary"].discountAmount + (htSummary["summary"]["discountAmountByType"]["deliveryDiscount"] || 0);
		this._getElement("totalDiscountPrice").html(nmp.front.order.ui.setThousandComma(totalDiscountPrice));

		if ($Element($$.getSingle("._totalDiscountPriceSign")) != undefined) {
			if (totalDiscountPrice > 0) {
				$Element($$.getSingle("._totalDiscountPriceSign")).html("-");
			} else {
				$Element($$.getSingle("._totalDiscountPriceSign")).html("");
			}
		}

		this._getElement("productCouponDiscountAmt").attr("value", nmp.front.order.ui.setThousandComma(htSummary["summary"].discountAmount));
		if (htSummary["summary"]["discountAmountByType"]["deliveryDiscount"] != undefined) {
			this._getElement("deliveryCouponDiscountAmt").attr("value", nmp.front.order.ui.setThousandComma(htSummary["summary"]["discountAmountByType"]["deliveryDiscount"]));
		}

		var totalDepositAmount = this._getOption("totalDepositAmount") || 0;
		var orderPayAmount = htSummary["summary"].payAmount + totalDepositAmount;
		this.getOrderSnapshot().orderPayAmount = orderPayAmount;

		// 주문아이템별 할인금액 텍스트 반영
		$A($H(this._htInstance["summary"]["orderProductDiscounts"]).keys()).forEach($Fn(function(orderProductId) {
			var htOrderProductDiscount = this._htInstance["summary"]["orderProductDiscounts"][orderProductId];
			var nDiscountAmount = htOrderProductDiscount["sellerImmediateDiscount"] + htOrderProductDiscount["nmpImmediateDiscount"] + htOrderProductDiscount["multiPurchaseDiscount"];
			var elDiscountAmountText = $$.getSingle("._discountAmountText" + orderProductId);
			if(elDiscountAmountText  == undefined){
				$A.Continue();
			}

			var elDiscountAmount = $$.getSingle("._discountAmount" + orderProductId);
			if (nDiscountAmount == 0) {
				elDiscountAmountText.innerHTML = "-";
				$A($$("._discountAmountLayer" + orderProductId)).forEach(function(v) {
					$Element(v).hide();
				});

				$Element(elDiscountAmount).hide();
			} else {
				elDiscountAmountText.innerHTML = nmp.front.order.ui.setThousandComma(nDiscountAmount) + "원";
				$A($$("._discountAmountLayer" + orderProductId)).forEach(function(v) {
					$Element(v).show("inline-block");
				});

				$Element(elDiscountAmount).show();
			}

			var elProductPayAmount = $$.getSingle("._productOrderPayAmt" + orderProductId);
			if (elProductPayAmount != undefined) {
				var targetOrderProduct = this._getOrderProductByOrderId(this._htInstance["orderSnapshot"]["orderProducts"], orderProductId);
				elProductPayAmount.innerHTML = nmp.front.order.ui.setThousandComma(targetOrderProduct.orderAmount - nDiscountAmount);

				var elProductTotalAmount = $$.getSingle("._productOrderTotalAmt" + orderProductId);
				if (nDiscountAmount == 0) {
					$Element(elProductTotalAmount).hide();
				} else {
					$Element(elProductTotalAmount).show("block");
				}
			}
		}, this).bind());

		this.calculateTotalPrice(undefined, undefined, "payAmounts.NAVER_CASH");

		if (bRecalculateMileage) {
			this.recalculateAccumulationNMileage();
		}

		if(nmp.front.order.order_sheet.storage){
			nmp.front.order.order_sheet.storage.saveOrderInfo();
		}
	},
	_initializeUrl : function(){
		this._htInstance["pop_click"] = {
			"url" :  "/static/html/pop_orderinfo.html",
			"option" : ["width=560px","height=418px"]
		};
		this._htInstance["pop_pay"] = {
			"url" :  "/static/html/pop_orderinfo2.html",
			"option" : ["width=560px","height=610px"]
		};
		this._htInstance["pop_public_cert"] = {
			"url" :  "/static/html/pop_orderinfo3.html",
			"option" : ["width=577px","height=607","scrollbars=yes"]
		};
		this._htInstance["pop_associate_card"] = {
			"url" :  "http://event.shopping.naver.com/event/nEvent/cardhub.nhn",
			"option" : [""]
		};
		this._htInstance["pop_naver_benefit_info"] = {
			"url" :  "http://shopping.naver.com/plan/template.nhn?id=10612",
			"option" : [""]
		};
		this._htInstance["pop_card_req_samsung"] = {
			"url" :  "https://www.samsungcard.com/showroom/shw.do?echo_key=10550826&method=getDetail&prodCode=P1257&category=C&SITE=naverout",
			"option" : [""]
		};
		this._htInstance["pop_card_req_shinhan"] = {
			"url" :  "https://www.shinhancard.com/conts/person/mobile_service/mobile_card/app_card/AppCardApply.jsp",
			"option" : [""]
		};
		this._htInstance["pop_bank"] = {
			"url" :  "/static/html/pop_orderinfo4.html",
			"option" : ["width=560px","height=640px"]
		};
		this._htInstance["pop_bank_time"] = {
			"url" :  "/static/html/pop_orderinfo5.html",
			"option" : ["width=560px","height=610px"]
		};
		this._htInstance["pop_receipt_INTEGRATION_CART"] = {
			"url" :  "/static/html/pop_orderinfo6.html",
			"option" : ["width=577px","height=607","scrollbars=yes"]
		};
		this._htInstance["pop_non_account"] = {
			"url" :  "/static/html/pop_orderinfo7.html",
			"option" : ["width=560px","height=565px"]
		};
		this._htInstance["pop_cellphone"] = {
			"url" :  "/static/html/pop_orderinfo8.html",
			"option" : ["width=577px","height=607","scrollbars=yes"]
		};
		this._htInstance["pop_escrow_info"] = {
			"url" :  "/orderSheetPopup/escrowInfo/" + this._getOption("pgId"),
			"option" : ["width=635px","height=600px","scrollbars=yes"]
		};
		this._htInstance["pop_receipt_CHECKOUT"] = {
			"url" :  "/static/html/pop_orderinfo10.html",
			"option" : ["width=577px","height=607","scrollbars=yes"]
		};
		this._htInstance["pop_pg_paymentc2"] = {
			"url" :  "/static/html/pop_orderinfo11.html",
			"option" : ["width=420px","height=638","scrollbars=yes"]
		};
		this._htInstance["pop_pg_paymentc1"] = {
			"url" :  "/static/html/pop_orderinfo12.html",
			"option" : ["width=600px","height=689","scrollbars=yes"]
		};
		this._htInstance["pop_easy_pay"] = {
			"url" :  "/static/html/pop_orderinfo14.html",
			"option" : ["width=580px","height=452","scrollbars=yes"]
		};
		this._htInstance["pop_escrow_service"] = {
			"url" :  "/static/html/pop_orderinfo15.html",
			"option" : ["width=560px","height=295","scrollbars=yes"]
		};
		this._htInstance["pop_escrow_pay"] = {
			"url" :  "/static/html/pop_orderinfo16.html",
			"option" : ["width=560px","height=250","scrollbars=yes"]
		};
	},
	_initializeJindoComponents : function() {
		// 결제수단 탭 Radio 버튼 jindo-component화 제거
		var aAjaxRadio = jindo.$$('.ajax_radio');
		var aAjaxRadioWithoutPayMethodRadio = $A(aAjaxRadio).filter(function(elAjaxRadio){
			return $Element(elAjaxRadio).hasClass("_payMethodRadio") == false;
		});
		jindo.CheckBox.factory(aAjaxRadioWithoutPayMethodRadio.$value());

		this._htInstance["aPayMeansClass"] = jindo.CheckBox.factory(jindo.$$('._payMeansClassRadio'));
		this._htInstance["aReliefPhoneNumberCheckBox"] = jindo.CheckBox.factory(jindo.$$('._reliefPhoneNumberCheckBox'));
		if (jindo.$$('._cardTypeRadio') != undefined) {
			this._htInstance["aCardType"] = jindo.CheckBox.factory(jindo.$$('._cardTypeRadio'));
		}
		if (jindo.$$('._refundMethodTypeRadio') != undefined) {
			this._htInstance["aRefundMethodType"] = jindo.CheckBox.factory(jindo.$$('._refundMethodTypeRadio'));
		}
		if (jindo.$('newAddressRadio') != undefined) {
			this._htInstance["rdNewAddress"] = new jindo.CheckBox(jindo.$('newAddressRadio'));
		}
		if (jindo.$('ecouponAutoCheckbox') != undefined) {
			new jindo.CheckBox(jindo.$('ecouponAutoCheckbox'));
		}
		if (jindo.$('mpointChk') != undefined) {
			this._htInstance["hyundaiCardPointBox"] = new jindo.CheckBox(jindo.$('mpointChk'));
		}
		if (jindo.$$('._pickupLocationTypeRadio') != undefined) {
			this._htInstance["aPickupLocationType"] = jindo.CheckBox.factory(jindo.$$('._pickupLocationTypeRadio'));
		}
		if (jindo.$$('._entryMethodTypeRadio') != undefined) {
			this._htInstance["aEntryMethodType"] = jindo.CheckBox.factory(jindo.$$('._entryMethodTypeRadio'));
		}

		if (jindo.$('cellPhone') != undefined) {
			this._htInstance["_group_tel1_1"] = new jindo.SelectBox(jindo.$("cellPhone"), {nHeight : 350});
		}
		if (jindo.$('cellPhone2') != undefined) {
			this._htInstance["_group_tel2_1"] = new jindo.SelectBox(jindo.$("cellPhone2"), {nHeight : 350});
		}
		if (jindo.$('cellPhone3') != undefined) {
			this._htInstance["_group_tel3_1"] = new jindo.SelectBox(jindo.$("cellPhone3"), {nHeight : 350});
		}
		this._htInstance["sbCardCodeList"] = new jindo.SelectBox(jindo.$("cardCodeList"));
		if (jindo.$("bankCodeList") != undefined) {
			new  jindo.SelectBox(jindo.$("bankCodeList"));
		}
		if (jindo.$("cashReceiptCellPhone") != undefined) {
			new  jindo.SelectBox(jindo.$("cashReceiptCellPhone"));
		}
		if (jindo.$("skipPaymentMethodSelectBox") != undefined) {
			this._htInstance["skipPaymentMethodSelectBox"] = new jindo.SelectBox(jindo.$("skipPaymentMethodSelectBox"));
		}
		this._htInstance["sbPrivateCashReceiptIssueType"] = new jindo.SelectBox(jindo.$("privateCashReceiptIssueType"));
		if (jindo.$("installmentCodeList") != undefined) {
			this._htInstance["sbInstallmentCode"] = new jindo.SelectBox(jindo.$("installmentCodeList"));
		}
		if (jindo.$("deliveryMemoParticularInput") != undefined) {
			new  jindo.CheckBox(jindo.$("deliveryMemoParticularInput"));
		}
		this._htInstance["rdAllAgree"] = new jindo.CheckBox(jindo.$("allAgree"));
		new  jindo.CheckBox(jindo.$('updateReceiptInfoCheckbox'));
		if (jindo.$$('._virtualAccountGuideCheckbox') != undefined) {
			jindo.CheckBox.factory(jindo.$$('._virtualAccountGuideCheckbox'));
		}
		if (jindo.$('usePointAllCheckbox') != undefined) {
			this._htInstance["usePointAllCheckbox"] = new jindo.CheckBox(jindo.$('usePointAllCheckbox'));
		}
		if (jindo.$('payLaterCheckBoxWrapper') != undefined) {
			this._htInstance["payLaterCheckBoxWrapper"] = new jindo.CheckBox(jindo.$('payLaterCheckBoxWrapper'));
		}
		if (jindo.$('alwaysUsePayLater') != undefined) {
			this._htInstance["alwaysUsePayLater"] = new jindo.CheckBox(jindo.$('alwaysUsePayLater'));
		}
		var waAgreeCheckBox = $A();
		if (jindo.$("thirdPeopleAgree") != undefined) {
			waAgreeCheckBox.push(new jindo.CheckBox(jindo.$("thirdPeopleAgree")));
		}
        if (jindo.$("deliveryAddressAgree") != undefined) {
            waAgreeCheckBox.push(new jindo.CheckBox(jindo.$("deliveryAddressAgree")));
        }
        if (jindo.$("customOrderAgree") != undefined) {
            waAgreeCheckBox.push(new jindo.CheckBox(jindo.$("customOrderAgree")));
        }
		if (jindo.$("preOrderAgree") != undefined) {
			waAgreeCheckBox.push(new jindo.CheckBox(jindo.$("preOrderAgree")));
		}
		if (jindo.$("iiomaAgree") != undefined){
			waAgreeCheckBox.push(new jindo.CheckBox(jindo.$("iiomaAgree")))
		}
		this._htInstance["waAgreeCheckBox"] = waAgreeCheckBox;

		if (jindo.$("addDeliveryList") != undefined) {
			this._htInstance["addDeliveryList"] = new jindo.CheckBox(jindo.$("addDeliveryList"));
		}
		if (jindo.$("selectDefaultDeliveryPlace") != undefined) {
			this._htInstance["selectDefaultDeliveryPlace"] = new jindo.CheckBox(jindo.$("selectDefaultDeliveryPlace"));
		}

		if (jindo.$("purchaserSocialSecurityAgreeFirstCheckbox") != undefined && jindo.$("purchaserSocialSecurityAgreeSecondCheckbox") != undefined) {
			this._htInstance["chkIndividualCustomCode"] = new jindo.CheckBox(jindo.$("purchaserSocialSecurityAgreeFirstCheckbox"));
			new jindo.CheckBox(jindo.$("purchaserSocialSecurityAgreeSecondCheckbox"));
		}

		if (jindo.$("alwaysUsePickupLocationCheckbox") != undefined) {
			this._htInstance["alwaysUsePickupLocationCheckbox"] = new jindo.CheckBox(jindo.$("alwaysUsePickupLocationCheckbox"));
		}

		$A(this._getElementList("orderAdditionalInfoSelectBoxes", true)).forEach(function(v) {
			new jindo.SelectBox(v);
		});

		// jindo selectbox 설정하게되면 value="" 사용이 불가능해서 임의로 재지정
		$A(this._getElement("root").queryAll("._selectBoxDefault")).forEach(function(v) {
			v.value = "";
		});

		$A(this._getElement("root").queryAll(".selectbox-source")).forEach(function(v) {
			$Element(v).hide();
		});
	},
	_initializeEventAttach : function() {
		var orderForm = this._getElement("orderForm");
		nmp.event_delegator.attach(orderForm, "mouseover", this);
		nmp.event_delegator.attach(orderForm, "mouseout", this);

		var calculationTargetList = this._getElementList("calculationDiscountTarget",true);
		for(var i = 0 ; i < calculationTargetList.length ; i++){
			$Fn(this.checkSubPaymentList,this).attach(calculationTargetList[i],"blur");
			$Fn(this.changeNumber,this).attach(calculationTargetList[i],"focus");
		}

		nmp.front.order.ui.initializeEventDeligator(this._getElement("root", true), this);
	},
	changeNumber : function(we){;
		if(we.element.value != "" && isNaN(we.element.value.replace(/[,]/g,""))==false){
			var currentValue = parseInt(we.element.value.replace(/[,]/g,""),10);
			if(currentValue == 0){
				we.element.value  = "";
			}else{
				we.element.value = currentValue;
				try {
					we.element.setSelectionRange(currentValue.toString().length, currentValue.toString().length);
				} catch (e) {}
			}
		}else{
			we.element.value = "";
		}
	},
	/**
	 * 상품/주문 쿠폰팝업을 띄운다.
	 *
	 * @param we
	 * @param orderId
	 */
	showProductOrderCouponPopup : function(htEvent) {
		var sUrl = "/orderSheetPopup/requestProductCouponInfos";
		var params = "?ORDER_SNAPSHOT_ID=" + this._htInstance["orderSnapshot"]["orderSnapshotKey"] + "&CREDIT_CARD_USE=" + this.getCreditCardUsable();
		nmp.openPopup(sUrl+params,["width=750", "height=600"], "couponPopup", null, true);
	},
	/**
	 * 배송비 쿠폰팝업을 띄운다.
	 *
	 * @param we
	 * @param orderId
	 */
	showDeliveryCouponPopup : function(htEvent) {
		var sUrl = "/orderSheetPopup/requestDeliveryCouponInfos";
		var params = {"ORDER_SNAPSHOT_ID" : this._htInstance["orderSnapshot"]["orderSnapshotKey"]  ,"CREDIT_CARD_USE" : this.getCreditCardUsable() ,"zipCode" : this._getZipCode(), "baseAddress" : this._getBaseAddress()};

		var queryString = $H(params).toQueryString();
		sUrl += "?"+queryString;

		// ie11 관리자모드 실행시 form submit 시 target 지정해도 새창으로 열리는 현상있어 get방식으로 호출
		// ie11 관리자모드 실행시 post 방식으로 팝업창 띄우는경우 문제 발생
		nmp.openPopup(sUrl,["width=750", "height=740"], "couponPopup", null, true);
//		nmp.openPopup(sUrl,["width=750", "height=740"], "couponPopup", params, true);
	},
	/**
	 * 배송지 정보 변경
	 *
	 * @param we
	 *            배송지 전체 정보가 "||" 구분자로 구성되어 있는 파라미터
	 */
	changeDeliveryPlace : function(we, deliveryPlaceSequence, isAddAreaFee) {
		var deliveryPlaceInfo = "";
		if(deliveryPlaceSequence != undefined && this._getElement("deliveryInfoType").query("._deliveryPlace" + deliveryPlaceSequence) != undefined){
			deliveryPlaceInfo = this._getElement("deliveryInfoType").query("._deliveryPlace" + deliveryPlaceSequence).value;
		}
		deliveryPlaceInfo = deliveryPlaceInfo.split("||");
		this.insertDeliveryPlaceInfo(deliveryPlaceInfo);
		this.checkFirstNumber();
		this.toggleLotNumberAddress();
		if(isAddAreaFee == "true"){
			this.findBaseAddress();
		}
	},
	/**
	 * 배송지 정보 배열을 각각 input element에 채운다.
	 *
	 * @param deliveryPlaceInfoArr
	 *            배송지 정보 배열 deliveryPlaceInfoArr[0] : 수신자
	 *            deliveryPlaceInfoArr[1] : 배송지명 deliveryPlaceInfoArr[2] : 연락처1
	 *            deliveryPlaceInfoArr[3] : 연락처2 deliveryPlaceInfoArr[4] : 우편번호
	 *            deliveryPlaceInfoArr[5] : 주소 시도 정보 deliveryPlaceInfoArr[6] :
	 *            주소 상세 정보
	 */
	insertDeliveryPlaceInfo : function(deliveryPlaceInfoArr) {
		if (deliveryPlaceInfoArr.length >= 10) {
			this.insertSplitDeliveryInfo("_group_tel1_",deliveryPlaceInfoArr[2], 3);
			this.insertSplitDeliveryInfo("_group_tel2_",deliveryPlaceInfoArr[3], 3);
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.zipCode']").value = deliveryPlaceInfoArr[4];
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.receiverName']").value = deliveryPlaceInfoArr[0];
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.deliveryPlaceName']").value = deliveryPlaceInfoArr[1];
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.baseAddress']").value = deliveryPlaceInfoArr[5];
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.detailAddress']").value = deliveryPlaceInfoArr[6];
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.roadNameAddress']").value = deliveryPlaceInfoArr[7];
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.lotNumberAddress']").value = deliveryPlaceInfoArr[8];
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.roadNameAddressYn']").value = deliveryPlaceInfoArr[9];
			if(deliveryPlaceInfoArr.length > 10){
				this._getElement("deliveryInfos").query("input[name='deliveryAddress.purchaseMemberDeliveryPlaceSeq']").value = deliveryPlaceInfoArr[10];
			}else{
				this._getElement("deliveryInfos").query("input[name='deliveryAddress.purchaseMemberDeliveryPlaceSeq']").value = "";
			}
		} else {
			this.insertSplitDeliveryInfo("_group_tel1_", "", 3, "010");
			this.insertSplitDeliveryInfo("_group_tel2_", "", 3);
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.zipCode']").value = "";
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.receiverName']").value = "";
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.deliveryPlaceName']").value = "";
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.baseAddress']").value = "";
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.detailAddress']").value = "";
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.purchaseMemberDeliveryPlaceSeq']").value = "";
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.roadNameAddress']").value = "";
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.lotNumberAddress']").value = "";
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.roadNameAddressYn']").value = "false";
		}

		$Element(this._getElement("root").query("p.lotNumberAddress")).html("");
	},
	/**
	 * 배송비 목록에서 선택된 주소 정보를 주문서에 반영한다.
	 *
	 * @param deliveryPlaceInfo
	 */
	applyDeliveryPlaceInfo : function(deliveryPlaceInfo){
		nmp.front.order.order_sheet.editDeliveryInfo();

		if(deliveryPlaceInfo.id != undefined){
			$$.getSingle("input[name=deliveryAddress.purchaseMemberDeliveryPlaceSeq]").value = deliveryPlaceInfo.id;
		}
		$$.getSingle("input[name=deliveryAddress.receiverName]").value = deliveryPlaceInfo.name;
		$$.getSingle("input[name=deliveryAddress.deliveryPlaceName]").value = deliveryPlaceInfo.dlvpName;
		nmp.front.order.order_sheet.insertSplitDeliveryInfo("_group_tel1_",deliveryPlaceInfo.tel1, 3);
		nmp.front.order.order_sheet.insertSplitDeliveryInfo("_group_tel2_",deliveryPlaceInfo.tel2, 3);

		$$.getSingle("input[name=deliveryAddress.zipCode]").value = deliveryPlaceInfo.zipcode;
		$$.getSingle("input[name=deliveryAddress.baseAddress]").value = deliveryPlaceInfo.baseAddr;
		$$.getSingle("input[name=deliveryAddress.detailAddress]").value = deliveryPlaceInfo.detailAddr;
		$$.getSingle("input[name=deliveryAddress.roadNameAddress]").value = deliveryPlaceInfo.roadNameAddress || "";
		$$.getSingle("input[name=deliveryAddress.lotNumberAddress]").value = deliveryPlaceInfo.lotNumberAddress || "";
		$$.getSingle("input[name=deliveryAddress.roadNameAddressYn]").value = deliveryPlaceInfo.roadNameAddressYn || "false";
		nmp.front.order.order_sheet.toggleLotNumberAddress();
		nmp.front.order.order_sheet.findBaseAddress();
	},
	/**
	 * 정보가 구분자로 나뉘어 지는 정보를 "prefixElementName+${sequenceNumber:start(1)}" input
	 * element에 채움
	 *
	 * @param prefixElementName
	 * @param elementValue
	 * @param maxLength
	 * @param seperator
	 */
	insertSplitDeliveryInfo : function(prefixElementClassName, elementValue, maxLength, sDefaultPhoneAreaCode) {
		var firstValue = "", secondValue = "", thirdValue = "";

		if (sDefaultPhoneAreaCode != undefined) {
			firstValue = sDefaultPhoneAreaCode;
		}

		if (elementValue.length > 0 ) {
			var bCompleted = (elementValue.charAt(elementValue.length - 1) != "-");
			elementValue = elementValue.replace(/-/g,"");
			var firstValueSize=0;
			var secondValueSize=0;
			if(elementValue.length < 9 && bCompleted){
				firstValueSize = 0;
			}else{
				firstValueSize = 3;
				if(elementValue.indexOf("02") == 0){
					firstValueSize = 2;
				}else if (elementValue.indexOf("013") == 0 || elementValue.indexOf("030") == 0 || elementValue.indexOf("050") == 0){
					firstValueSize = 4;
				}
			}
			if(elementValue.length < 4){
				secondValueSize = elementValue.length;
			}else if(elementValue.length - firstValueSize < 8 && bCompleted){
				secondValueSize = 3;
			}else{
				secondValueSize = 4;
			}
			firstValue = elementValue.substring(0,firstValueSize);
			secondValue = elementValue.substring(firstValueSize,firstValueSize+secondValueSize);
			thirdValue = elementValue.substring(firstValueSize+secondValueSize);
		}
		this._htInstance[prefixElementClassName +1].setValue(firstValue);
		this._getElement("deliveryInfos").query("."+prefixElementClassName + 2).value = secondValue;
		this._getElement("deliveryInfos").query("."+prefixElementClassName + 3).value = thirdValue;
	},
	/**
	 * 데이터 분리하여 input tag에 값 셋팅
	 *
	 * @param prefixElementName
	 * @param elementValue
	 * @param maxLength
	 * @param repeatIndex
	 */
	insertSubStringDeliveryInfo : function(prefixElementClassName, elementValue, maxLength, repeatIndex){
		if (elementValue != null ) {
			elementValue = elementValue.replace(/-/g,"");
		}
		if (elementValue != "" && elementValue.length == maxLength * repeatIndex) {
			for ( var i = 0; i < maxLength; i++) {
				this._getElement("deliveryInfos").query("."+prefixElementClassName + (i + 1)).value = elementValue.substr(i*repeatIndex,repeatIndex);
			}
		} else {
			for ( var i = 0; i < maxLength; i++) {
				this._getElement("deliveryInfos").query("."+prefixElementClassName + (i + 1)).value = "";
			}
		}
	},
	/**
	 * 배송 메모 정보 토글(일괄/개별)
	 *
	 * @param we
	 */
	changeDeliveryMemo : function(we, element) {
		if(we != undefined){
			checkboxMemo = this._getElement("root").query("input[name=deliveryMemoParticularInputYn]");
		}else{
			checkboxMemo = element;
		}
		if(checkboxMemo.checked == true){
			$A($$(".deliveryProductMemo")).forEach(function(v,i,a){
				$Element(a[i]).show();
			});
			$A($$(".deliverySingleMemo")).forEach(function(v,i,a){
				$Element(a[i]).hide();
			});
		}else{
			$A($$(".deliveryProductMemo")).forEach(function(v,i,a){
				$Element(a[i]).hide();
			});
			$A($$(".deliverySingleMemo")).forEach(function(v,i,a){
				$Element(a[i]).show();
			});
		}
	},
	changeAdditionalInfo : function(we) {
		var isParticularInput = (we.element.tagName == "SPAN") ? $Element(we.element.parentElement).query("input").value : we.element.value;
		if(isParticularInput == "false"){
			$A($$(".additionalInfo")).forEach(function(v,i,a){
				$Element(a[i]).show();
			});
			$A($$(".productAdditionalInfo")).forEach(function(v,i,a){
				$Element(a[i]).hide();
			});
		}else{
			$A($$(".additionalInfo")).forEach(function(v,i,a){
				$Element(a[i]).hide();
			});
			$A($$(".productAdditionalInfo")).forEach(function(v,i,a){
				$Element(a[i]).show();
			});
		}
	},
	findBaseAddress : function(we, message) {
		var zipCode = this._getZipCode();
		var baseAddress = this._getBaseAddress();

		if(zipCode == ""){
			return;
		}
		var orderSnapshotKey = this._htInstance["orderSnapshot"]["orderSnapshotKey"];
		nmp.requestAjax("/orderSheetAjax/searchDeliveryArea",{
			"zipCode" : zipCode,
			"baseAddress" : baseAddress,
			"isAvableCreditCartUse": this.getCreditCardUsable(),
			"orderSnapshotKey":orderSnapshotKey
		}, {
			method : "post",
			onload : $Fn(nmp.front.order.order_sheet.recalculateDeliveryFee, this).bind(),
			onerror : function(res) {
				alert("권역 정보를 가져오지 못했습니다..");
			}
		});
		// AJAX로 우편번호 권역 정보 구해오기. 전달 파라미터 : 우편번호, 결과형태 :
		// {"2":"Azone","3":"Bzone"}
	},
	_getZipCode : function(){
		if(this._getElement("deliveryInfos").query("input[name='deliveryAddress.zipCode']") == null || this._getElement("deliveryInfos").query("input[name='deliveryAddress.zipCode']") == undefined){
			return "";
		}
		return this._getElement("deliveryInfos").query("input[name='deliveryAddress.zipCode']").value;
	},
	_getBaseAddress : function() {
		if (this._getElement("deliveryInfos").query("input[name='deliveryAddress.baseAddress']") == undefined) {
			return "";
		}
		return this._getElement("deliveryInfos").query("input[name='deliveryAddress.baseAddress']").value;
	},
	_toNumber : function(val) {
		return Number((val+"").replace(/[^0-9]/gi, ''))
	},
	recalculateDeliveryFee : function(res) {
		var result = res;
		// 성공시 처리
		if (result == null ||  (result != null && result.bSuccess == true)) {
			// 각 상품별 권역정책 번호를 가져와서 zone 번호에 따라 배송비 내역을 변경한다.
			var totalDeliveryCouponCount = 0;
			var isRecalculatePaymentInfo=false;
			var deliveryCouponCountTag = $$.getSingle("._deliveryCouponCount");
			var bIsSetUseAllPoint = this.isUseAllPointChecked();
			if(deliveryCouponCountTag != undefined){
				totalDeliveryCouponCount = parseInt(deliveryCouponCountTag.innerHTML);
			}
			if(result != null && result.bSuccess == true){
				deliveryAreaZone = $H(result.htReturnValue.deliveryAreaTypeCode);
				totalDeliveryCouponCount = result.htReturnValue.usableDeliveryCouponCount;
			}
			var isUsableCoupon = false;
			var deliveryGroupMap = result.htReturnValue.deliveryGroup;
			var deliveryFeeGroup = result.htReturnValue.deliveryFeeGroup;
			$A($H(deliveryGroupMap).keys()).forEach(function(key){
				var deliveryGroup= deliveryGroupMap[key];
				var deliveryGroupFee = deliveryFeeGroup[key];
				if(deliveryGroup.deliveryMethod == "QUICK_SVC" || deliveryGroup.deliveryMethod == "VISIT_RECEIPT"|| deliveryGroup.deliveryMethod == "NOTHING"){
					$A.Continue();
				}

				var priceTextHtml = '';
				var priceHtml = '';
				if(deliveryGroup.deliveryFeePayType == "AFTER_PAY" ) {
					priceTextHtml = '착불';
					priceHtml = '';
					if ((deliveryGroup.fee + deliveryGroup.appliedExtraAreaFee) > 0 ){
						priceHtml = nmp.front.order.ui.setThousandComma(deliveryGroup.fee + deliveryGroup.appliedExtraAreaFee)+'원';
					}
				} else {
					if(deliveryGroupFee > 0){
						priceTextHtml = '';
						priceHtml = nmp.front.order.ui.setThousandComma(deliveryGroupFee)+'원';
					} else {
						priceTextHtml = '무료';
						priceHtml = '';
					}
				}

				var elPriceText = $$.getSingle("._deliveryPriceText"+key);
				var elPrice = $$.getSingle("._deliveryPrice"+key);

				elPriceText.innerHTML=priceTextHtml;
				elPrice.innerHTML=priceHtml;

				if( deliveryGroupFee != 0){
					isUsableCoupon = true;
				}

				var orderProduct = this._getOrderProductByOrderId(this._htInstance["orderSnapshot"].orderProducts, deliveryGroup.appliedProductId);
				var deliveryFee = orderProduct.deliveryFee;
				var isSpecialDeliveryFeeType = ( deliveryFee.type != "FREE" && deliveryFee.type != "CHARGE" );

				var isShowExtraAreaFee = false;
				if ( deliveryGroup.deliveryAreaFee != undefined ) {
					isShowExtraAreaFee =
						( deliveryGroup.deliveryAreaFee.apiSupport && deliveryGroup.appliedExtraAreaFee > 0) ||
						( !deliveryGroup.deliveryAreaFee.apiSupport && deliveryGroup.deliveryAreaFee.areaType != undefined );
				}

				if( isSpecialDeliveryFeeType || isShowExtraAreaFee ){
					var welAdditionalInfoButton = $Element('<a href="#" class="sp_order ico_que _deliveryFeeLayerBtn'+deliveryGroup.id+' _click(nmp.front.order.order_sheet.showLayerDeliveryFee('+deliveryGroup.appliedProductId+')) _stopDefault" ></a>');

					if ( priceHtml == '' ) {
						welAdditionalInfoButton.appendTo(elPriceText);
					} else {
						welAdditionalInfoButton.appendTo(elPrice);
					}
				}
			}, this);

			var  totalDeliveryFee = result.htReturnValue.deliverysPayAmount;
			var orderSnapshot = this.getOrderSnapshot();
			orderSnapshot.deliveryGroupMap = deliveryGroupMap;
			orderSnapshot.deliveryFeeGroupMap = deliveryFeeGroup;

			var calculator = new nmp.component.OrderProductCalculator();
			$A(orderSnapshot.orderProducts).forEach(function(orderProduct) {
				var deliveryGroupDiscount = undefined;
				if(orderProduct.deliveryGroup.discount != undefined){
					deliveryGroupDiscount = orderProduct.deliveryGroup.discount;
				}
				orderProduct.deliveryGroup = deliveryGroupMap[orderProduct.deliveryGroup.id];
				if(deliveryGroupDiscount != undefined){
					orderProduct.deliveryGroup.discount = deliveryGroupDiscount;
				}
				calculator.addOrderProduct(orderProduct);
			});
			calculator.addOrderDiscount(orderSnapshot.discount);
			$H(orderSnapshot.storeDiscounts).forEach(function(value, key) {
				calculator.addStoreDiscount(key, value);
			});
			var htCalculateResult = calculator.calculate();

			var summary = htCalculateResult.summary;

			if(result != null && result.bSuccess == true && deliveryCouponCountTag != undefined){
				deliveryCouponCountTag.innerHTML=totalDeliveryCouponCount;
			}
			// TODO: 정리 필요
			var dlvCouponBtnIndicator = $$.getSingle("._deliveryCouponButton");
			var elDlvCouponBtn = $Element(dlvCouponBtnIndicator);
			if (dlvCouponBtnIndicator != undefined) {
				if (isUsableCoupon == true && totalDeliveryCouponCount > 0) {
					dlvCouponBtnIndicator.style.cursor = "auto";
					elDlvCouponBtn.removeClass("cpn_off");
					elDlvCouponBtn.addClass("cpn");
					elDlvCouponBtn.removeClass("disable");
					elDlvCouponBtn.attr("disabled",false);
					if(result != null && result.bSuccess == true){
						this._getElement('usableDeliveryCouponCount').html(result.htReturnValue.usableDeliveryCouponCount);
					}
					this._getElement('totalDeliveryCouponCount').html(this._getOption("totalDeliveryCouponCount"));
				} else {
					dlvCouponBtnIndicator.style.cursor = "default";
					elDlvCouponBtn.removeClass("cpn");
					elDlvCouponBtn.addClass("cpn_off");
					elDlvCouponBtn.addClass("disable");
					elDlvCouponBtn.attr("disabled",true);
					this._getElement('usableDeliveryCouponCount').html(0);
					this._getElement('totalDeliveryCouponCount').html(this._getOption("totalDeliveryCouponCount"));
				}
			}
			// 배송비
			var changedDeliveryFee = false;
			$A($$("._totalDeliveryFee")).forEach(function(v,i,a){
				if(a[i].innerHTML != nmp.front.order.ui.setThousandComma(totalDeliveryFee)){
					isRecalculatePaymentInfo = true;
					if (bIsSetUseAllPoint) {
						alert("지역별 추가 배송비 금액이 변경되어 입력하신 배송비 할인 쿠폰과 [항상 포인트 사용] 설정에 따라 포인트 사용액이 모두 초기화 됩니다.");
					} else {
						alert("지역별 추가 배송비 금액이 변경되어 입력하신 배송비 할인쿠폰 및 포인트 사용액이 모두 초기화 됩니다.");
					}
					changedDeliveryFee = true;
				}
				a[i].innerHTML = nmp.front.order.ui.setThousandComma(totalDeliveryFee);
			});
			//PL을 이용한 경우 초기화
			if (changedDeliveryFee && this._getPayLater().isAvailable()) {
				this._getPayLater().unUsePayLater(true);
			}

			if ($Element($$.getSingle("._totalDeliveryFee")) != undefined) {
				if (this._toNumber($Element($$.getSingle("._totalDeliveryFee")).html()) > 0) {
					$Element($$.getSingle("._totalDeliveryFeeSign")).html("+");
				} else {
					$Element($$.getSingle("._totalDeliveryFeeSign")).html("");
				}
			}

			// 최종결제 금액
			var totalDiscountsAmount = this._getMileageAmount() + this._getUsePointAfterCharge() + this._getPayLaterAmount();
			var totalDepositAmount = this._getOption("totalDepositAmount") || 0;
			var orderPayAmount = summary.payAmount + totalDepositAmount;
			this._changePriceInfoView(orderPayAmount - totalDiscountsAmount);

			this.getOrderSnapshot().orderPayAmount = orderPayAmount;
			this.getOrderSnapshot().deliverysPayAmount = summary.deliveryFeeAmount;

			if(isRecalculatePaymentInfo){
				nmp.front.order.order_sheet.getOrderSnapshot()["deliverysPayAmount"]=totalDeliveryFee;
				$$.getSingle("._deliveryCouponDiscountAmt").value=0;
				if($$.getSingle("input[name='payAmounts.NAVER_CASH']") != undefined){
					$$.getSingle("input[name='payAmounts.NAVER_CASH']").value=0;
				}
				nmp.front.order.order_sheet.removeCoupons(false, true);
				nmp.front.order.order_sheet.calculateTotalPrice(undefined, undefined, "deliveryPlacePrice");

				if (bIsSetUseAllPoint) {
					this.useAllSubSettleOnCheckEvent();
				}
			}
			return;
		}
		// 오류시 처리
		if (result != null && result.bSuccess == false) {
			// 오류 메세지가 있을경우 alert
			if (result.htReturnValue.sMessage != null) {
				alert(result.htReturnValue.sMessage);
			}
		} else {
			alert("권역 정보 조회에 실패했습니다.");
		}
	},
	/**
	 * 보유포인트(적립+충전 포인트) 전액 사용
	 *
	 * @param we
	 * @param useAmount
	 * @param changeElementName
	 */
	useAllSubSettle : function(we){
		if (this.isDisabledUseAllPointBtn()) {
			return;
		}
		var allusableAmount = this._getOption("remainNaverMileage") + this._getOption("remainChargedPoint");
		var changeElementName = "payAmounts.NAVER_CASH";

		if(allusableAmount <= 0){
			return;
		}

		// 사용할 보유포인트 input value 세팅
		$$.getSingle("input[name='"+changeElementName+"']").value = nmp.front.order.ui.setThousandComma(allusableAmount);
		this.calculateTotalPrice(null, allusableAmount, changeElementName);
		// this.checkSubPaymentList(undefined, $$.getSingle("input[name='"+changeElementName+"']"));

		if(nmp.front.order.order_sheet.storage){
			nmp.front.order.order_sheet.storage.saveOrderInfo();
		}

		this.showClearPointButton();
	},
	/**
	 * 보유포인트 사용금액 세팅
	 * useAllSubSettle 함수와의 차이: calculateTotalPrice 가 없음
	 * 목적: calculateTotalPrice 함수 호출을 최소화하여 성능 개선을 원할때 사용
	 * */
	useAllNaverCash: function(){
		if (this.isDisabledUseAllPointBtn()) {
			return;
		}

		// 보유포인트(적립+충전) 전액
		var nAllNaverCashAmount = this._getOption("remainNaverMileage") + this._getOption("remainChargedPoint");
		if(nAllNaverCashAmount <= 0){
			return;
		}

		$$.getSingle("input[name='payAmounts.NAVER_CASH']").value = nmp.front.order.ui.setThousandComma(nAllNaverCashAmount);


		if(nmp.front.order.order_sheet.storage){
			nmp.front.order.order_sheet.storage.saveOrderInfo();
		}

		this.showClearPointButton();
	},
	isDisabledUseAllPointBtn: function () {
		var useAllPointBtn = this._getElement("pointAllUseButton");
		if (useAllPointBtn == undefined) {
			return false;
		}
		return useAllPointBtn.hasClass("disable");
	},
	checkSubPaymentList :  function(we, discountElement){
		if(we != undefined){
			discountElement = we.element;
		}
		if (discountElement.value == "") {
			discountElement.value = 0;
		}

		if(discountElement.value != ""){
			var amount = parseInt(discountElement.value.replace(/[,]/g,""),10);
			if (isNaN(amount)) {
				discountElement.value = 0;
			} else {
				discountElement.value = nmp.front.order.ui.setThousandComma(amount);
			}
		}

		if(discountElement.name !== "payAmounts.NAVER_CASH" && discountElement.name !== "PAY_LATER"){
			this.calculateTotalPrice(undefined, undefined, discountElement.name);
		}

		this.showClearPointButton();
	},
	calculateMembershipPlccExpectedAmount : function(totalPrice) {
		if (this._getElement("membershipPlccExpectedAmount") != undefined) {
			var paymentMeansCode = this.getPayMethod();
			var membershipPlccExpectedPercentage = Number(this._getOption("membershipPlccExpectedPercentage"));
			var membershipPlccExpectedMaximumAmount = Number(this._getOption("membershipPlccExpectedMaximumAmount").replace(",",""));
			var membershipPlccExpectedAmount = nmp.front.order.ui.setThousandComma(Math.min(Math.floor(totalPrice * membershipPlccExpectedPercentage), membershipPlccExpectedMaximumAmount));
			if (membershipPlccExpectedAmount != 0) {
				this.changeMembershipPlccPointBenefitBanner(paymentMeansCode === "CREDIT_CARD" || this._getOption("easyCardCode").has(paymentMeansCode));
				this._getElement("membershipPlccExpectedAmount").html("+" + membershipPlccExpectedAmount + "원");
			} else {
				this.changeMembershipPlccPointBenefitBanner(false);
			}
		}
	},
	/* 네이버포인트(적립+충전) input 영역 blur 이벤트 핸들러 */
	calculateTotalPriceOnBlurForNaverCash : function(we) {
		// 충전결제 선택
		if(this._getOrderPayAmountMinusMileageAmount() > 0 && !this._getPayLater().isChecked() && this._htInstance["isPreviousChargePointUsed"]){
			this._getChargePoint().markRadio();
			this._getChargePoint().showOpenArea();
		}

		this.calculateTotalPrice(we, this._getOption("remainTotalNaverPoint"), "payAmounts.NAVER_CASH");
	},
	/* 총 결제금액 반환 */
	getTotalAccountPrice : function(){
		if (this._htInstance["summary"] != undefined) {
			var totalDepositAmount = this._getOption("totalDepositAmount") || 0;
			return totalAccountPrice = this._htInstance["summary"]["summary"]["orderAmount"] + this._htInstance["summary"]["summary"]["deliveryFeeAmount"] + (this._htInstance["summary"]["summary"]["discountAmountByType"]["deliveryDiscount"] || 0) + totalDepositAmount;
		}
		return this.getOrderSnapshot().orderPayAmount + this.getOrderSnapshot().totalDiscountAmount;
	},
	/* 할인금액(각종 할인+배송비할인) 반환 */
	getDiscountAmount: function() {
		if (this._htInstance["summary"] != undefined) {
			return discountAmount = this._htInstance["summary"]["summary"]["discountAmount"] + (this._htInstance["summary"]["summary"]["discountAmountByType"]["deliveryDiscount"] || 0);
		}
		return this.getOrderSnapshot().totalDiscountAmount;
	},
	/**
	 * 할인/최종 결제금액 재계산
	 *
	 * @param we
	 */
	calculateTotalPrice : function(we, allusableAmount, changeElementName, isSkip) {
		if(we != undefined){
			we.stop();
		}

		if(we != null && we.element.readOnly){
			we.element.value ="0";
		}

		if(we != null && we.element.value==""){
			we.element.value = 0;
		}

		// 특수문자가 입력되는 경우에는 현재 입력된 문자를 삭제 처리하고 return 처리한다.
		if (we != null && !(new RegExp("^[0-9]+$")).test(we.element.value.replace(/[,]/g,"")) ) {
			return;
		}

		// 결제금액, 할인금액
		var totalAccountPrice = this.getTotalAccountPrice();
		var discountAmount = this.getDiscountAmount();

		// 추가 할인금액 계산 - 쿠폰할인, 배송비할인, 네이버포인트(적립+충전), 후불결제
		var totalDiscountPrice = 0;
		var totalNaverMileagePrice = 0;
		var payLaterAmount = 0;
		var calculationTargetList = this._getElementList("calculationDiscountTarget",true);
		for(var i = 0 ; i < calculationTargetList.length ; i++){
			var discountElement = calculationTargetList[i];
			if(discountElement.value != "" && isNaN(discountElement.value.replace(/[,]/g,"")) == false){
				// 포인트, 후불결제 한도 금액 이상 사용시 alert
				if(allusableAmount != undefined && allusableAmount >= 0){
					if(discountElement.name == changeElementName && parseInt(discountElement.value.replace(/[,]/g,""), 10) > allusableAmount){
						discountElement.value = nmp.front.order.ui.setThousandComma(allusableAmount);
						if (discountElement.name.indexOf("PAY_LATER") > -1) {
							alert("한도 금액 이상 사용은 불가능 합니다.");
						} else {
							alert("보유 금액 이상 사용은 불가능 합니다.");
						}
					}
				}

				// 할인금액에 상품할인, 배송비할인, 네이버포인트(적립+충전), 후불결제 추가
				if (this._getPayLater().isChecked() && discountElement.name.indexOf("PAY_LATER") > -1) {
					//후불결제
					var inputPayLaterAmount = this._getPayLaterAmount();
					if (inputPayLaterAmount > 0) {
						var calcAmount = this._getPayLater().calculate(totalAccountPrice, inputPayLaterAmount, totalDiscountPrice, allusableAmount);
						payLaterAmount += calcAmount;
						totalDiscountPrice += calcAmount;

						// if(calcAmount > 0) {}
						this._getChargePoint().disableByPayLater();
					}
				} else {
					// 상품할인, 배송비할인, 네이버포인트(적립+충전)
					totalDiscountPrice += parseInt(discountElement.value.replace(/[,]/g,""), 10);
				}
			}
			if (discountElement.name.indexOf("NAVER_CASH") > -1) {
				totalNaverMileagePrice = this._getMileageAmount();
			}
		}

		// 후불결제 disable 결정(후불결제, 네이버포인트 모두 미사용 case)
		if(payLaterAmount <= 0 && totalNaverMileagePrice <= 0
			&& (totalAccountPrice - totalDiscountPrice <= this.getRemainNaverPoint())
			&& this._getPayLater().isAvailable()) {
			this._getPayLater().disable();
		}

		// 충전포인트 계산
		var usePointAfterCharge = 0;
		var discountedPrice = totalAccountPrice - totalDiscountPrice;
		if (discountedPrice <= 0) {
			// 충전결제 비활성화
			if (this._getChargePoint().isChecked()) {
				this._getChargePoint().disable();
			}

			// 후불결제 비활성화
			if(payLaterAmount <= 0 && this._getPayLater().isAvailable()){
				this._getPayLater().disable();
			}
		} else {
			// 결제금액 남은 경우
			// 충전포인트 계산
			if (this._getChargePoint().isChecked() && !this._getChargePoint().isDisabled() && !this._getChargePoint().isAllBankUnderMaintenance()) {
				// 충전결제 사용
				var isAutoSettingChargePoint = changeElementName == "CHARGE_USE_POINT" ? false : true;
				usePointAfterCharge = this._getChargePoint().calculateAndUpdatePointView(totalAccountPrice, totalDiscountPrice, isAutoSettingChargePoint, true);
				totalNaverMileagePrice += usePointAfterCharge;
				totalDiscountPrice += usePointAfterCharge;
				this._htInstance["isPreviousChargePointUsed"] = true;
			} else {
				// 충전결제 미사용
				this._getChargePoint().updatePointView(0, 0);
				this._htInstance["isPreviousChargePointUsed"] = false;
			}

			// 후불결제 미사용이면 충전결제 활성화
			if (!this._getPayLater().isChecked() && this._getChargePoint().isDisabled()) {
				this._getChargePoint().releaseDisable();
			}

			// 보유(적립+충전) 포인트 < 남은 결제 금액 case, 후불결제 활성화
			if( (this.getRemainNaverPoint() < discountedPrice) && this._getPayLater().isAvailable() && this._getPayLater().isDisabled()) {
				this._getPayLater().releaseDisable();
			}
		}

		// 결제금액 < (할인쿠폰+네이버포인트+후불결제) case
		// 변경이 필요한 결제수단 추출 및 네이버포인트, 후불결제 초기화
		var checkChangeValueName="";
		if(totalAccountPrice < totalDiscountPrice) {
			if (we != null) { // calculateTotalPriceOnBlur(네이버포인트), calculatePayLaterTotalPriceOnBlur(후불결제) 이벤트 발생 case
				// 입력한 사용할 금액 (네이버포인트 or 후불결제)
				var weUseAmount = we.element.value.replace(/[,]/g,"");
				// 입력한 사용할 금액 - (( 쿠폰할인 + 포인트(적립+충전) + 후불결제 금액 ) - 결제금액 ))
				var differenceUseAmount = weUseAmount - (totalDiscountPrice - totalAccountPrice);
				if(differenceUseAmount > 0){
					we.element.value = nmp.front.order.ui.setThousandComma(differenceUseAmount);
					totalDiscountPrice = totalAccountPrice;
				}else{
					alert("결제금액이 0원 미만이어서 포인트 금액이 초기화됩니다.");
					we.element.value = 0;
					this.showClearPointButton();
					totalDiscountPrice = discountAmount;
					if(this._getPayLater().isAvailable() && !this._getPayLater().isDisabled()){
						this._getPayLater().clear()
					}
				}
				checkChangeValueName = we.element.name;
			} else if (changeElementName != undefined && allusableAmount != undefined) {
				if(isNaN(allusableAmount)){
					allusableAmount = allusableAmount.replace(/[,]/g,"");
				}

				var differenceUsableAmount = allusableAmount - (totalDiscountPrice - totalAccountPrice);
				if(differenceUsableAmount > 0){
					$$.getSingle("input[name='"+changeElementName+"']").value = nmp.front.order.ui.setThousandComma(differenceUsableAmount);
					totalDiscountPrice = totalAccountPrice;
				}else{
					alert("결제금액이 0원 미만이어서 포인트 금액이 초기화됩니다.");
					$$.getSingle("input[name='"+changeElementName+"']").value = 0;
					this.showClearPointButton();
					totalDiscountPrice = discountAmount;
					if(this._getPayLater().isAvailable() && !this._getPayLater().isDisabled()){
						this._getPayLater().clear()
					}
				}
				checkChangeValueName = $$.getSingle("input[name='"+changeElementName+"']").name;
			} else if (changeElementName != undefined) {
				alert("결제금액이 0원 미만이어서 포인트 금액이 초기화됩니다.");
				$$.getSingle("input[name='"+changeElementName+"']").value = 0;
				this.showClearPointButton();
				totalDiscountPrice = discountAmount;
				checkChangeValueName = "payAmounts.NAVER_CASH";
				if(this._getPayLater().isAvailable() && !this._getPayLater().isDisabled()){
					this._getPayLater().clear()
				}
			}

			if (checkChangeValueName.indexOf("NAVER_CASH") > -1) {
				totalNaverMileagePrice = this._getMileageAmount();
			}
			if (checkChangeValueName.indexOf("PAY_LATER") > -1) {
				payLaterAmount = this._getPayLaterAmount();
			}
		}

		if(isNaN(totalDiscountPrice)){
			totalDiscountPrice = totalDiscountPrice.replace(/[,]/g,"");
		}

		// 결제상세 세팅: 네이버포인트+층전결제 합계
		if($$.getSingle("._useNaverMileagePrice",this._getElement("discountPriceTable",true)) != undefined){
			if (totalNaverMileagePrice > 0) {
				// 결제금액 > 충전가능금액, 등록된 은행 없는 case에는 최대충전가능금액(200만원) 이상이여도 결제금액 자체를 노출시킴
				var naverMileageAmount = this._getChargePoint().isEmptyBankAndExceedRemainChargeAmount() ? totalAccountPrice : totalNaverMileagePrice;
				this._setPaymentDetailArea(this._getElement("mileageUsedPaymentAmountArea"), naverMileageAmount, true);
			} else {
				this._setPaymentDetailArea(this._getElement("mileageUsedPaymentAmountArea"), 0, false);
			}
		}

		// 결제상세 세팅: PL 합계
		if ($$.getSingle("._usePayLaterAmount", this._getElement("discountPriceTable", true)) != undefined) {
			if (payLaterAmount > 0) {
				this._setPaymentDetailArea(this._getElement("usePayLaterAmountArea"), payLaterAmount, true);
			} else {
				this._setPaymentDetailArea(this._getElement("usePayLaterAmountArea"), 0, false);
			}
		}

		// 결제상세 세팅: 주결제 합계
		if ($$.getSingle("._generalPaymentAmount", this._getElement("discountPriceTable", true)) != undefined) {
			if (totalAccountPrice - totalDiscountPrice > 0 && this.isGeneralPayMethodTabChecked()) {
				this._setPaymentDetailArea(this._getElement("generalPaymentAmountArea"), totalAccountPrice - totalDiscountPrice, true);
			} else {
				this._setPaymentDetailArea(this._getElement("generalPaymentAmountArea"), 0, false);
			}
		}

		this.checkPossibleInstallment();
		this.changeNaverDonInfoText(totalAccountPrice-totalDiscountPrice);

		if(!isSkip){
			if(totalAccountPrice-totalDiscountPrice == 0){ // 주결제수단으로 결제할 금액이 남아있지 않은 경우

				if (this._htInstance["previousPayMethod"] == undefined) {
					this._htInstance["previousPayMethod"] = this.getPayMethod();
				}

				this.visibleControlSettlement(usePointAfterCharge > 0 ? true : false);

				// 복수모드에서 충전결제 금액이 사용되어 남은 결제금액이 없는 case -> 싱글모드로 전환
				if(!this.isPayMethodUiSingleMode()) {
					this.changeToSingleUiMode(this.chargePoint());
				}

				// 결제수단: 포인트 결제
				this.changePaymentByPayMethod("POINT");
			} else { // 주결제수단으로 결제할 금액이 남아있는 경우
				this.visibleControlSettlement(true);
				this.generalPayTab().clearPayMeansClassPointInput();

				// 일반결제수단이 유형중 POINT만 남이 있는 경우
				if($$("._payMeansClass").length == 1 && $$("._payMeansClass")[0].value =="POINT") {
					this.visibleControlSettlement(false);
				}

				if (this._htInstance["previousPayMethod"] != undefined && this._htInstance["previousPayMethod"] != "POINT") {
					// 이전에 선택되었던 주결제수단 세팅
					var sPayMethod = this._htInstance["previousPayMethod"];
					this._htInstance["previousPayMethod"] = undefined;

					if(!this.isPayMethodUiSingleMode()) {
						sPayMethod = this.getPayMethod();
					}

					this.changePaymentByPayMethod(sPayMethod);
				} else {
					// 선택되었던 주결제수단이 없는 case

					// 현재 선택된 결제수단이 아래 2가지 케이스가 모두 아니면, 일반결제 선택
					// 1. 간편결제선택됨
					// 2. 충전결제선택됨 && (모든은행 점검중 or 등록된 계좌 없음)
					var currentPayMethod = this.getPayMethod();
					if(!this._isEasyPay(currentPayMethod) && !this._getChargePoint().isCheckedWithNoPayable()){
						// 일반결제 유형중 선택된 input element 추출
						var oSelectedGeneralPayMeansClassRadio = null;
						$A(this._htInstance["aPayMeansClass"]).forEach($Fn(function(oGeneralPayMeansClassRadio){
							if(oGeneralPayMeansClassRadio.getChecked()){
								oSelectedGeneralPayMeansClassRadio = oGeneralPayMeansClassRadio;
							}

							var sGeneralPayMethod = oGeneralPayMeansClassRadio.value;

							// 결제금액 100원 이상이며, 현재 선택된 결제수단이 나중에결제(무통장입금) 또는 포인트인 case => 신용카드 선택
							if((totalAccountPrice-totalDiscountPrice) >= 100 && sGeneralPayMethod == "CREDIT_CARD" && (currentPayMethod == "VIRTUAL_ACCOUNT" || currentPayMethod == "POINT")){
								oGeneralPayMeansClassRadio.setChecked(true);
								oSelectedGeneralPayMeansClassRadio = oGeneralPayMeansClassRadio;
							//  결제금액 100원 미만인 경우 => 나중에결제(무통장입금) 선택
							}else if( (totalAccountPrice-totalDiscountPrice) < 100 && sGeneralPayMethod=="VIRTUAL_ACCOUNT"){
								oGeneralPayMeansClassRadio.setChecked(true);
								oSelectedGeneralPayMeansClassRadio = oGeneralPayMeansClassRadio;
							}
						},this).bind());

						//일반결제중 아무것도 선택되지 않은 경우 => 첫번째 결제수단 선택
						if(!oSelectedGeneralPayMeansClassRadio && this._htInstance["aPayMeansClass"][0]) {
							this._htInstance["aPayMeansClass"][0].setChecked(true);
							oSelectedGeneralPayMeansClassRadio = this._htInstance["aPayMeansClass"][0];
						}

						this.changePayment(null, oSelectedGeneralPayMeansClassRadio.getInput());
					}
				}
			}
		}

		this._setGeneralPayAmountOnPaymentsArea(this.getGeneralPayAmount());

		this._changePriceInfoView(totalAccountPrice - totalDiscountPrice);

		this.viewCheckCashReceiptForm();

		this.recalculateAccumulationNMileage();

		this.decidePointButtonDisable(totalAccountPrice , totalDiscountPrice);
		this.decidePayLaterButtonDisable(totalAccountPrice , totalDiscountPrice);
		this.calculateMembershipPlccExpectedAmount(this.getGeneralPayAmount());
	},
	decidePointButtonDisable: function (totalAccountPrice, totalDiscountPrice) {
		if (this._getElement("pointAllUseButton") == undefined) {
			return;
		}
		var ownPoint = this._getOption("remainNaverMileage") + this._getOption("remainChargedPoint");
		var inputPoint = this._getMileageAmount();
		if (ownPoint == 0) {
			this._getElement("pointAllUseButton").addClass("disable");
			return;
		}
		if (inputPoint == 0) {
			this._getElement("pointAllUseButton").removeClass("disable");
			return;
		}
		if (this._getUsePointAfterCharge() != undefined && this._getUsePointAfterCharge() == 0 && (totalAccountPrice - totalDiscountPrice == 0)) {
			this._getElement("pointAllUseButton").addClass("disable");
			return;
		}
		if (ownPoint == this._getMileageAmount()) {
			this._getElement("pointAllUseButton").addClass("disable");
			return;
		}
		this._getElement("pointAllUseButton").removeClass("disable");
	},
	decidePayLaterButtonDisable : function(totalAccountPrice , totalDiscountPrice){
		if (this._getElement("payLaterAllUseButton") == undefined) {
			return;
		}
		var ownPayLater = this._getOption("remainPayLaterAmount")
		var inputPayLater = this._getPayLaterAmount();
		if (inputPayLater == 0) {
			this._getElement("payLaterAllUseButton").removeClass("disable");
			return;
		}
		if (totalAccountPrice - totalDiscountPrice == 0) {
			this._getElement("payLaterAllUseButton").addClass("disable");
			return;
		}
		if (inputPayLater == ownPayLater) {
			this._getElement("payLaterAllUseButton").addClass("disable");
			return;
		}
		this._getElement("payLaterAllUseButton").removeClass("disable");
	},
	/* 주결제수단 탭 결제금액 노출 */
	_setGeneralPayAmountOnPaymentsArea : function(amount) {
		var aPayMethodTabs = [this.bankEasyPayTab(), this.cardEasyPayTab(), this.generalPayTab()];
		$A(aPayMethodTabs).forEach(function(payMethodTab){
			if(payMethodTab.hasBaseArea()){
				payMethodTab.isChecked() ? payMethodTab.showGeneralPaymentAmount(amount) : payMethodTab.hideGeneralPaymentAmount();
			}
		});
	},
	/* 결제상세 결제수단 금액 세팅 */
	_setPaymentDetailArea : function(element, amount, isShow) {
		if (isShow) {
			element.show();
			element.addClass('total_item');
		} else {
			element.hide();
			element.removeClass('total_item');
		}
		element.query("em").innerHTML=nmp.front.order.ui.setThousandComma(amount);
	},
	changeMembershipPlccPointBenefitBanner : function(isCard) {
		if (this._getElement("membershipPlccPointBenefitBanner") != undefined) {
			if (isCard) {
				this._getElement("membershipPlccExpectedAmount").show();
				this._getElement("membershipPlccPointBenefitBannerDetail").html("추가적립!");
			} else {
				this._getElement("membershipPlccExpectedAmount").hide();
				this._getElement("membershipPlccPointBenefitBannerDetail").html("최대 5% 추가적립!");
			}
		}
	},
	_changePriceInfoView : function (totalPrice) {
		if (totalPrice == undefined) {
			totalPrice = this.getGeneralPayAmount();
		}

		this._getElement("totalPayAmount").attr("value", totalPrice);

		if ($$.getSingle('._totalPayPrice') != undefined) {
			var totalDepositAmount = this._getOption("totalDepositAmount") || 0;
			$$.getSingle('._totalPayPrice').innerHTML = nmp.front.order.ui.setThousandComma(this._htInstance["summary"]["summary"]["payAmount"] + totalDepositAmount);
		}
		if ($$.getSingle("._lastTotalAccountPrice", this._getElement("discountPriceTable", true)) != undefined) {
			$$.getSingle("._lastTotalAccountPrice", this._getElement("discountPriceTable", true)).innerHTML = this._getImagedNumberFormatHtml(totalPrice);
		}
	},
	changeNaverDonInfoText : function(lastPaymentPrice){
		$ElementList($$("._naverDonInfoText")).hide();
		if(this._getOption("remainNaverDon") > lastPaymentPrice){
			if($$.getSingle("._remainNaverDonPayAmountOver")){
				$Element($$.getSingle("._remainNaverDonPayAmountOver")).show();
			}
		}else{
			if($$.getSingle("._remainNaverDonPayAmountUnder")){
				$Element($$.getSingle("._remainNaverDonPayAmountUnder")).show();
			}
		}
	},
	checkPossibleInstallment : function(){
		if (this._isEasyPay(this.getPayMethod())) {
			if (this._htInstance["sbInstallmentCode"] != undefined) {
				this._htInstance["sbInstallmentCode"].disable();
			}
		} else {
			if (this._htInstance["sbInstallmentCode"] != undefined) {
				this._htInstance["sbInstallmentCode"].enable();
			}
		}

		var generalPayAmt = this.getOrderSnapshot()["orderPayAmount"] - this._getMileageAmount() - this._getUsePointAfterCharge() - this._getPayLaterAmount();

		var oInstallmentCode = this.getInstallmentCodeSelectBox();
		if(oInstallmentCode == undefined){
			return;
		}
		var bInstallmentUnavailable = (this.getPayMethod() == "CREDIT_CARD" && this._isCreditCardInstallmentUnavailable()) || (this._getSelectedEasyPayCardType() != undefined && this._getSelectedEasyPayCardType() != "CREDIT") || this._isEasyCardNotPayable(this.getPayMethod());
		if (generalPayAmt < this.getMinimumInstallmentPayAmount() || bInstallmentUnavailable){
			nmp.front.order.ui.toggleInstallmentComponent(oInstallmentCode, false, true);
		} else {
			nmp.front.order.ui.toggleInstallmentComponent(oInstallmentCode, true);
		}

		if (nmp.front.order.order_sheet.integration_cart.isInitialized()) {
			nmp.front.order.order_sheet.integration_cart.changeInstallment(null);
			nmp.front.order.order_sheet.integration_cart.changeInstallmentSelectBoxText();
			if (this._getOption("easyCardCode").has(this.getPayMethod())) {
				//결제 금액 계산할 때, 카드 간편결제인 경우 무이자 PLCC 뱃지 노출
				nmp.front.order.order_sheet.integration_cart.changeLongFreeInterestBadge();
			}
		}
	},
	/**
	 * 현금 영수증 신청 여부
	 *
	 * @param we
	 */
	isCashReceipt : function(we){
		var elTarget = $Element(we.element.parentElement).query("input");
		var weReceiptLayer = $Element($$.getSingle("._cashReceiptInputArea"));
		if(elTarget.value == "true"){
			$ElementList($$("div .cashReceiptInfo")).show();
			$ElementList((weReceiptLayer).queryAll("input,select")).attr("disabled",false);
			this.changeReceiptType();
		}else{
			$ElementList((weReceiptLayer).queryAll("input,select")).attr("disabled",true);
			$ElementList($$("div .cashReceiptInfo")).hide();
		}
	},
	/**
	 * 현금 영수증 발급이 가능한 결제수단이 사용되었는지 확인하고, 사용된 경우 현금영수증 입력 form을 보여준다.
	 */
	viewCheckCashReceiptForm : function(){
		var paymeansMethod = this.getPayMethod();
		var originalPaymeansMethod = paymeansMethod;

		if (this._getOption("easyBankCode").has(paymeansMethod)) {
			paymeansMethod = "BANK";
		}

		if (this._getTotalUseChargePoint() > 0) {
			paymeansMethod = "CHARGED_POINT";
		}

		if (this._getPayLaterAmount() > 0) {
			paymeansMethod = "PAY_LATER";
		}

		var waPossiblePayMeans = $A(this._getOption("cashReceiptIssuePossiblePayMeans"));

		var weReceiptLayer = $Element($$.getSingle("._cashReceiptTemplate"));
		if ((this._getOption("orderClass") == "CHECKOUT" && this._isEasyPayBank(this.getPayMethod())) || waPossiblePayMeans.has(paymeansMethod)) {
			if (paymeansMethod != "BANK") {
				var elNaverPayPointNotice = $Element($$.getSingle(".naverPayPoint"));
				if (elNaverPayPointNotice != undefined) {
					elNaverPayPointNotice.show();

					if (originalPaymeansMethod == 'CREDIT_CARD') {
						elNaverPayPointNotice.css("border-top", "");
					} else if (paymeansMethod == "POINT" || paymeansMethod == "CHARGED_POINT") {
						elNaverPayPointNotice.css("border-top", "0px");
					}
				}
			}

			var cashReceiptIssueImpossible = (!this._isEasyPayBank(this.getPayMethod())) && ($A(this._getOption("payMeansInquiryList")).some(function(payMeans, i, o) {
				return payMeans.payMeansClass == paymeansMethod &&
					payMeans.cashReceiptIssuePossible != null &&
					!payMeans.cashReceiptIssuePossible ;
			}));

			var cashReceiptInputEnabled = !cashReceiptIssueImpossible;
			nmp.front.order.ui.enableFields(weReceiptLayer, cashReceiptInputEnabled);

			if (this._isEasyPayBank(this.getPayMethod()) || paymeansMethod == "CHARGED_POINT" || paymeansMethod == "PAY_LATER" || cashReceiptInputEnabled) {
				if (this._getElement("cashReceiptInfoSaved") == undefined) {
					weReceiptLayer.show();
				} else {
					weReceiptLayer.hide();
					this._getElement("cashReceiptInfoSaved").show();
				}
			} else {
				weReceiptLayer.hide();
				if (this._getElement("cashReceiptInfoSaved") != undefined) {
					this._getElement("cashReceiptInfoSaved").hide();
				}
			}

			var elCashReceiptApplied = this._getElement("root").query("input[name=receiptInfo.receiptApplyed]");
			if (elCashReceiptApplied.checked) {
				this.changeReceiptType();
			}

			var _elCashReceiptInfo = $Element($$.getSingle(".cashReceiptIssueInfomationsDON"));
			if ((this.getMileageUseAmount() > 0)) {
				_elCashReceiptInfo.show();
			} else {
				_elCashReceiptInfo.hide();
			}

			if (this.getMileageUseAmount() == 0) {
				this._getElement("cashReceiptNotice").hide();
			} else {
				this._getElement("cashReceiptNotice").show();
			}

			if (this._getOption("orderClass") == "CHECKOUT" && this._isEasyPayBank(this.getPayMethod()) && this.getMileageUseAmount() == 0) {
				this._getElement("cashReceiptNotice").hide()
			}

			if($$.getSingle("._payAgree") != undefined){
				$Element($$.getSingle("._payAgree")).addClass("bbm_line");
			}
		}else{
			if (paymeansMethod != "BANK") {
				var elNaverPayPointNotice = $Element($$.getSingle(".naverPayPoint"));
				if (elNaverPayPointNotice != undefined) {
					elNaverPayPointNotice.hide();

					if (paymeansMethod == "POINT") {
						elNaverPayPointNotice.css("border-top", "");
					}
				}
			}

			weReceiptLayer.hide();
			this._getElement("cashReceiptNotice").hide();

			if (this._getElement("cashReceiptInfoSaved") != undefined) {
				this._getElement("cashReceiptInfoSaved").hide();
			}
		}
	},
	/**
	 * 결제수단 입력 정보 노출/숨기기
	 *
	 * @param isVisible
	 */
	visibleControlSettlement : function(isVisible){
		var waNotice = $ElementList(".guide_box");
		if(isVisible){
			if ((this._getOption("orderClass") == "CHECKOUT" && !this._isEasyPay(this.getPayMethod()) && !this.getOption("isEasyBooking") && !this.getOption("isEscrow") && nmp.front.order.order_sheet.macos == undefined && this._getMileageAmount() <= 0)) {
				$Element($$.getSingle("._productAgreement")).hide();
			} else {
				$Element($$.getSingle("._productAgreement")).show();
			}

			$ElementList(this._getElementList("cashReceiptHeader", true)).removeClass("line");
			if (this._getOption("simplePaymentInfo")) {
				this._getElement("simplePaymentsArea").show();
				if (waNotice != undefined) {
					waNotice.show();
				}
			} else {
				$ElementList(this._getElementList("paymentsArea", true)).show();
			}
			this._getElement("noPaymentArea").hide();
		}else{
			$Element($$.getSingle("._productAgreement")).show();

			$ElementList(this._getElementList("cashReceiptHeader", true)).addClass("line");
			if (this._getOption("simplePaymentInfo")) {
				this._getElement("simplePaymentsArea").hide();
				if (waNotice != undefined) {
					waNotice.hide();
				}
			} else {
				$ElementList(this._getElementList("paymentsArea", true)).hide();
			}

			this._getElement("noPaymentArea").show();

			if (this._getElement("changeEasyPayInfoNotice") != undefined) {
				this._getElement("changeEasyPayInfoNotice").hide();
			}

			if (this._getElement("cardBenefitInfo") != undefined) {
				this._getElement("cardBenefitInfo").hide();
			}
		}
	},
	/* 주결제수단 결제상세 영역 세팅 */
	_setGeneralPaymentInfo : function(isShow, payMethod) {
		if (this._getElement("generalPaymentAmountArea") == undefined) {
			return;
		}

		if (isShow) {
			var payMethodText;
			if (this._getOption("easyCardCode").has(payMethod)) {
				payMethodText = "카드 간편결제";
			} else if (this._getOption("easyBankCode").has(payMethod)) {
				payMethodText = "계좌 간편결제";
			} else if (payMethod == "CREDIT_CARD") {
				payMethodText = "신용카드";
			} else if (payMethod == "MOBILE") {
				payMethodText = this._isMobilePinPayMethod() ? "휴대폰 간편결제" : "휴대폰";
			} else if (payMethod == "VIRTUAL_ACCOUNT") {
				payMethodText = "무통장입금";
			} else if (payMethod == "BANK") {
				payMethodText = "실시간 계좌이체";
			} else if (payMethod == "SKIP") {
				if (this._getCurrentSkipPayMethod() == "BANK") {
					payMethodText = "나중에 계좌 결제";
				} else if (this._getCurrentSkipPayMethod() == "CREDIT_CARD") {
					payMethodText = "나중에 카드 결제";
				}
			}
			this._setPaymentDetailArea(this._getElement("generalPaymentAmountArea"), this.getGeneralPayAmount(), true);
			// 주결제수단 결제상세 텍스트 입력
			$Element($$.getSingle("._generalPaymentClass")).html(payMethodText);
		} else {
			this._setPaymentDetailArea(this._getElement("generalPaymentAmountArea"), 0, false);
		}
	},
	/**
	 * 결제 수단 변경마다 각 등록 폼을 보여준다.
	 *
	 * @param we
	 * @param selectedElemet
	 */
	changePayment : function(we, elSelectedPayMethod) {
		var element = undefined;

		// 주결제수단(간편계좌, 카드, 일반) 엘리먼트(div, input) 중에서 checked 되어있는 엘리먼트 추출
		$A(this._getElementList("payMeansClass").$value()).forEach(function (v, i, a) {
			if (a[i].attr("checked")) {
				element = a[i].$value();
			}
		});

		// 선택된 결제수단 엘리먼트
		// 카드/계좌 간편의 경우 div, 충전결제 및 일반결제의 경우 input
		if (elSelectedPayMethod != undefined && elSelectedPayMethod != "") {
            element = elSelectedPayMethod;
        }

		// 일반결제 - 각 결제수단 선택될때 사용됨
		if (we != undefined) {
            if (we.element.tagName == "SPAN") {
				element = $Element(we.element.parentElement).query("input");
			} else {
				element = we.element;
			}
		}

		// [선택된 element의 결제수단 코드]
		// 간편결제 ex) 계좌간편 = 238(accountKey) , 카드간편 = C3(ckey),
		// 일반결제 ex) 신용카드 = CREDIT_CARD, 실시간계좌이체 = VIRTUAL_ACCOUNT, 휴대폰 = MOBILE, 나중에결제 = SKIP
		var paymentMeansCode = element.tagName == "DIV" ? element.getAttribute("data-code") : element.value;

		// 결제수단에 따른 주문한기 or 결제하기 버튼 노출 토글
		// TOME[seongchan.choi]: 함수화
		var elPaymentButton = $Element($$.getSingle("button._doPayButton span"));
		if (paymentMeansCode == "SKIP" || paymentMeansCode == "VIRTUAL_ACCOUNT") {
			if (this._getCurrentSkipPayMethod() == "VIRTUAL_ACCOUNT") {
				paymentMeansCode = this._getCurrentSkipPayMethod();
			}

			if (elPaymentButton != undefined) {
				elPaymentButton.text("주문하기");
				elPaymentButton.addClass("txt_order");
				elPaymentButton.removeClass("txt_payment");
			}
		} else {
			if (elPaymentButton != undefined) {
				elPaymentButton.text("결제하기");
				elPaymentButton.addClass("txt_payment");
				elPaymentButton.removeClass("txt_order");
			}
		}

		// 선택된 결제수단 input check + 주문하기/결제하기 버튼 변경
		this._selectPaymentMethod(paymentMeansCode);

		// 일반결제수단 펼침영역 모두 숨기기
		// card _tr_paymeans, bank _tr_paymeans, mobile _tr_paymeans, skip _tr_paymeans
		var tr_paymeans = $$("._tr_paymeans");
		$A(tr_paymeans).forEach(function(v,i,a){
			$Element(a[i]).hide();
		});

		// 결제안내 관련 모두 숨기기
		$A(this._getElement("paymentInfoArea").queryAll("._paymentInfo")).forEach(function(v) {
			$Element(v).hide();
		});
		// 증빙발급 안내 노출
		if (this._getElement("root").query("._paymentDetailInfo") != undefined) {
			$Element(this._getElement("root").query("._paymentDetailInfo")).show();
		}
		// 결제 할인/혜택 안내 숨기기
		if (this._getElement("creditCardInstallmentArea") != undefined) {
			this._getElement("creditCardInstallmentArea").hide();
		}
		// 윈도우 카드결제 안내 숨기기
		if (this._getElement("root").query("._creditCardGuide") != undefined) {
			$Element(this._getElement("root").query("._creditCardGuide")).hide();
		}

		// 이벤트 안내 레이어 숨기기
		$ElementList(this._getElement("root").queryAll("._payEvent")).hide();

		// 현대카드 포인트영역 제어
		if (this._htInstance["hyundaiCardPointBox"] != undefined) {
			this._htInstance["hyundaiCardPointBox"].setChecked(false);
		}
		// 이벤트 배너 영역 제어
        if ($$.getSingle("._eventBannerArea") != undefined) {
            $ElementList($$("._eventBannerArea")).hide();
        }
		if (this._getElement("eventBannerAreaCvsCharge") != undefined) {
			this._getElement("eventBannerAreaCvsCharge").hide();
		}

		if(this._isEasyCardNotPayable(this.getPayMethod())){
			this._changeDoPayBtnStatus(false);
		} else {
			this._changeDoPayBtnStatus(true);
		}

		// 결제수단에 따른 payEvent 영역 노출
		this._changePayEventInfo(paymentMeansCode);

		this._getElementList("skipLayers").hide();
		this.showToolTipEvent("EasyBank");

		// 카드간편결제 || 일반결제(카드)
		this.calculateMembershipPlccExpectedAmount(this.getGeneralPayAmount());

		// 동의영역 노출 제어
		if(paymentMeansCode != "POINT"){
			if ((this._getOption("orderClass") == "CHECKOUT" && !this._isEasyPay(this.getPayMethod()) && !this.getOption("isEasyBooking") && !this.getOption("isEscrow") && nmp.front.order.order_sheet.macos == undefined && this._getMileageAmount() <= 0)) {
				$Element($$.getSingle("._productAgreement")).hide();
			} else {
				$Element($$.getSingle("._productAgreement")).show();
			}

			var elPayAgreement = $$.getSingle("._payAgreement");
			if (elPayAgreement != undefined) {
				$Element(elPayAgreement).show();
			}
		}

		// 동의영역 제어
		if (this._getElement("purchaserAgreements") != undefined) {
			this._getElement("purchaserAgreements").show();
		}
		this.checkAllAgreed();


		// 선택된 결제수단별 액션
		if(paymentMeansCode == "CHARGE_POINT"){
			this.changePaymentTabSelection("chargePoint");
			this.calculateTotalPrice(null, null, "CHARGE_POINT");
		}
		else if(paymentMeansCode == "CREDIT_CARD"){
			this.initializePayMethod(paymentMeansCode);
			this.changePaymentTabSelection("generalPayments");
			this.generalPayTab().checkSelectedPayMeansClassInput(paymentMeansCode);

			// 광고 영역
			this.generalPayTab().showTextBanner();
			this.generalPayTab().showCommonBanner(paymentMeansCode);

			$A($$(".creditCard")).forEach(function(v,i,a){
				$Element(a[i]).show();
			});

			// 카드리스트 selectbox 초기화
			this._htInstance["sbCardCodeList"].setValue("");

			if($$.getSingle("._paymentInfoForm")){
				try{
					nmp.front.order.order_sheet.integration_cart.changeCompanyTypeCode(undefined, "");
				}catch(e){}
			}

			if(nmp.front.order.order_sheet.macos){
				nmp.front.order.order_sheet.macos.removeAppendedCardCode();
			}

			if (this._getElement("root").query("._creditCardGuide") != undefined) {
				$Element(this._getElement("root").query("._creditCardGuide")).show();
			}
			if (this.getCurrentCreditCardForm() != undefined && this.getCurrentCreditCardForm().query("._eventBannerArea") != undefined) {
				$Element(this.getCurrentCreditCardForm().query("._eventBannerArea")).show();
			}
			this.showSkipLayer("GeneralPay");
		} else if(this._getOption("easyCardCode").has(paymentMeansCode)){

			this.changePaymentTabSelection("naverPaymentsCard");

			$A($$(".easyPayCard")).forEach(function(v,i,a){
				$Element(a[i]).show();
			});
			this._getElement("creditCardInstallmentArea").show();

			$A($$(".screditCard")).forEach($Fn(function(v,i,a){
				$Element(a[i]).show();
				this._getOption("easyCardCode").forEach(function(easyCardCode){
					if($Element(a[i]).query("."+easyCardCode)){
						$Element($Element(a[i]).query("."+easyCardCode)).hide();
						if(paymentMeansCode == easyCardCode){
							$Element($Element(a[i]).query("."+easyCardCode)).show();
						}
					}
				});
			},this).bind());

			if($$.getSingle("._paymentInfoForm")){
				$Element($$.getSingle("._paymentInfoForm")).removeClass("pdr");
			}

			if (this._htInstance["aCardType"] != undefined && this._htInstance["aCardType"].length > 0){
				this._htInstance["aCardType"][0].setChecked(true);
			}
			if (this.getCurrentCreditCardForm() != undefined && this.getCurrentCreditCardForm().query("._eventBannerArea") != undefined) {
				$Element(this.getCurrentCreditCardForm().query("._eventBannerArea")).show();
			}

			if(nmp.front.order.order_sheet.macos){
				nmp.front.order.order_sheet.macos.appendCardCompanyCode(paymentMeansCode);
			}
			this._htInstance["sbCardCodeList"].setValue(paymentMeansCode);
			this._getElement("defaultEasyPayCard").attr("value", paymentMeansCode);

			try{
				nmp.front.order.order_sheet.integration_cart.changeCompanyTypeCode(undefined, paymentMeansCode);
			}catch(e){}

			if (this._getSelectedEasyPayCardType() == "CREDIT") {
				this.showSkipLayer("EasyCard");
			}
		} else if(this._getOption("easyBankCode").has(paymentMeansCode)){
			this.changePaymentTabSelection("naverPaymentsBank");

			//간편결제계좌 문구 노출
			$A($$(".easyPayBank")).forEach(function(v,i,a){
				$Element(a[i]).show();
			});

			if (this._getOption("orderClass") == "CHECKOUT") {
				$Element($$.getSingle("._productAgreement")).show();
			}

			var bankForm = this.getCurrentBankForm();
            var easyPayBankBannerArea = bankForm.query("._eventBannerArea");

			if (bankForm != undefined && easyPayBankBannerArea != undefined){
                $Element(easyPayBankBannerArea).show();
            }
			this.showSkipLayer("EasyBank");
		} else if(paymentMeansCode == "MOBILE"){
			this.changePaymentTabSelection("generalPayments");
			this.generalPayTab().checkSelectedPayMeansClassInput(paymentMeansCode);

			$A($$(".mobile")).forEach(function(v,i,a){
				$Element(a[i]).show();
			});
			this.showSkipLayer("GeneralPay");

			// 광고 영역
			this.generalPayTab().showCommonBanner(paymentMeansCode);
		} else if (paymentMeansCode == "VIRTUAL_ACCOUNT" || paymentMeansCode == "SKIP") {
			this.changePaymentTabSelection("generalPayments");
			this.generalPayTab().checkSelectedPayMeansClassInput(paymentMeansCode);
			this._changeSkipPayMethodView();
            if (paymentMeansCode == "VIRTUAL_ACCOUNT") {
                var bIsShowSkipLayer = this.showSkipLayer("GeneralPay", true);
                if (!bIsShowSkipLayer) {
                    bIsShowSkipLayer = this.showSkipLayer("VirtualAccount");
                }

                if (!bIsShowSkipLayer) {
                    $A($$(".virtualAccount")).forEach(function (v, i, a) {
                        $Element(a[i]).show();
                    });
                }
            }

			// 광고 영역
			this.generalPayTab().showCommonBanner(paymentMeansCode);
		} else if (paymentMeansCode == "BANK") {
			var welnaverPaymentBankTab = $Element(this._getElement("root").query("._naverPaymentsBankTab"));
			if ((this._getOption("orderClass") == "INTEGRATION_CART" || this.getOption("isEasyBooking")) &&
				welnaverPaymentBankTab != undefined &&
				this.isAllEasyBankUnderMaintenance() == false) {
				alert("실시간 계좌이체는 계좌 간편결제로 통합되었습니다.\n계좌 간편결제로 더욱 편리하고 안전하게 결제해보세요 !");
				this._setPaymentTabChecked("naverPaymentsBank");
				this.changePaymentTab(null, "naverPaymentsBank");
			} else {
                if (this._getOption("orderClass") == "CHECKOUT") {
					this.showSkipLayer("GeneralPay");
                }
                this.initializePayMethod(paymentMeansCode);

				this.changePaymentTabSelection("generalPayments");
				this.generalPayTab().checkSelectedPayMeansClassInput(paymentMeansCode);

				$A($$(".bank")).forEach(function (v, i, a) {
					$Element(a[i]).show();
				});
			}

			// 광고 영역
			this.generalPayTab().showCommonBanner(paymentMeansCode);
		}

        // 결제문구 변경
        this._changePaymentMethodStatement(this._getPaymentMethodStatementExposureArea(paymentMeansCode));

		if(paymentMeansCode == "VIRTUAL_ACCOUNT" && (this._getOption("orderClass") == "INTEGRATION_CART" || this.getOption("isForcedBillingPayment"))){
			var selectedRefundMethod = "BANK_ACCOUNT";
			if(this._getOption("remainChargeAmount") < 0){
				selectedRefundMethod = "CHARGE_AMOUNT";
			}
			$A(this._htInstance["aRefundMethodType"]).forEach($Fn(function(v, i, a){
				v.enable();
				if(v.getInput().value == selectedRefundMethod){
					v.setChecked(true);
					this.changeRefundMethod(undefined, selectedRefundMethod);
				}
				if((this._getOption("remainChargeAmount") < 0 && v.getInput().value == "BANK_ACCOUNT")){
					v.addClass("radio-disabled");
				}
			}, this).bind());

		}else if(paymentMeansCode == "VIRTUAL_ACCOUNT" && this._getOption("orderClass") == "CHECKOUT"){
			$A($$(".refundAccountInfo")).forEach(function(v,i,a){
				$Element(a[i]).show();
			});
		}

		// 임시주문번호 초기화.
		$$.getSingle("input[name=tempOrderId]").value = '';

		var waFreeInterestField = $A(this._getElement("root").queryAll("._freeInterestField"));
		if(nmp.front.order.order_sheet.getOption("orderClass") == "CHECKOUT" && paymentMeansCode == "CREDIT_CARD"){
			// 신용카드인 경우 PG결제라면 무이자 폼 정보를 비활성화시켜 잘못된 정보가 저장되지 않도록 한다.
			waFreeInterestField.forEach(function(v) {
				v.disabled = true;
			});
		} else {
			// 간편결제라면 무이자 정보를 저장한다.
			waFreeInterestField.forEach(function(v) {
				v.disabled = false;
			});
		}

		// 결제수단 세부사항 안내 노출 제어
		if ($$("._paymentDetailGuide > h4[@display=block]").length == 0) {
			$Element($$.getSingle("._paymentDetailGuide")).hide();
		} else {
			$Element($$.getSingle("._paymentDetailGuide")).show();
		}

		// 주결제수단 결제상세 영역 변경
		if (paymentMeansCode && paymentMeansCode != "POINT" && paymentMeansCode != "CHARGE_POINT") {
			this._setGeneralPaymentInfo(true, paymentMeansCode);
		} else {
			this._setGeneralPaymentInfo(false, paymentMeansCode);
		}

		this.viewCheckCashReceiptForm();

		this.recalculateAccumulationNMileage();

		this._htInstance["currentPaymethod"] = this.getPayMethod();
	},
	disableSkipPaymentMethod: function (disable) {
		if ($$.getSingle("._payMeanSkipInput") == undefined) {
			return;
		}
		if (disable) {
			if ($Element($$.getSingle("._payMeanSkipInput")).attr('checked')) {
				//this.showUnableSkipPaymentLayer();
				var elPurchaserDefaultPayment = this._getDefaultPaymentInfo();
				if (elPurchaserDefaultPayment == 'SKIP') {
					var oDefaultGeneralPayMeansClassRadio = this._htInstance["aPayMeansClass"][0];
					this.clearGeneralPayMethodTabs();
					this.changePayment(null, oDefaultGeneralPayMeansClassRadio.getInput());
					return;
				}
				this.clearGeneralPayMethodTabs();
				this.changePaymentByPayMethod(elPurchaserDefaultPayment);
			}
			$Element($$.getSingle("._payMeanSkipEvent")).removeClass("_click(nmp.front.order.order_sheet.changePayment())");
			$Element($$.getSingle("._payMeanSkipEvent")).addClass("_click(nmp.front.order.order_sheet.showUnableSkipPaymentLayer())");
			$Element($$.getSingle("._payMeanSkip")).addClass('radio-disabled')
            $Element($$.getSingle("._payMeanSkipInput")).attr("disabled", "disabled");


			$Element($$.getSingle("._payMeanSkipLabel")).addClass("_click(nmp.front.order.order_sheet.showUnableSkipPaymentLayer())");
			$Element($$.getSingle("._payMeanSkipTooltip")).hide();
			$Element($$.getSingle("._payMeanSkipGuide")).hide();

		} else {
			$Element($$.getSingle("._payMeanSkipEvent")).addClass("_click(nmp.front.order.order_sheet.changePayment())");
			$Element($$.getSingle("._payMeanSkipEvent")).removeClass("_click(nmp.front.order.order_sheet.showUnableSkipPaymentLayer())");
			$Element($$.getSingle("._payMeanSkip")).removeClass('radio-disabled');
			$Element($$.getSingle("._payMeanSkipInput")).attr("disabled", "");

			$Element($$.getSingle("._payMeanSkipLabel")).removeClass("_click(nmp.front.order.order_sheet.showUnableSkipPaymentLayer())");
			$Element($$.getSingle("._payMeanSkipTooltip")).show();
			$Element($$.getSingle("._payMeanSkipGuide")).show();
		}
	},
    _getPaymentMethodStatementExposureArea: function (paymentMeansCode) {
        if (this._getOption("easyCardCode").has(paymentMeansCode)) {
            return "EASY_PAY_CREDIT_CARD";
        } else if (this._getOption("easyBankCode").has(paymentMeansCode)) {
            return "EASY_PAY_BANK";
        }

        return paymentMeansCode;
    },
    _changePaymentMethodStatement: function (exposureArea) {
        var weCardEventTextList = this._getElementList("cardEventText");
        var weChargeEventTextList = this._getElementList("chargeEventText");

        if (this._hasLegacyPaymentMethodStatement(weCardEventTextList, weChargeEventTextList)) {
            if (exposureArea === "VIRTUAL_ACCOUNT") {
                weCardEventTextList.hide();
                weChargeEventTextList.show();
            } else {
                weCardEventTextList.show();
                weChargeEventTextList.hide();
            }
        } else {
            this._getElementList("paymentMethodStatement").hide();
            this._showPaymentMethodStatement(exposureArea);
        }
    },
    _hasLegacyPaymentMethodStatement: function (weCardEventTextList, weChargeEventTextList) {
        return weCardEventTextList.length() > 0 && weChargeEventTextList.length() > 0;
    },
    _showPaymentMethodStatement: function (exposureArea) {
        var sPaymentMethodStatementSelector = "";
        var sPaymentMethodStatementAreaSelector = ".paymentMethodStatementArea";

        switch (exposureArea) {
            case "EASY_PAY_CREDIT_CARD":
                sPaymentMethodStatementSelector = "._easyPay_creditCard_statement";
                break;
            case "EASY_PAY_BANK":
                sPaymentMethodStatementSelector = "._easyPay_bank_statement";
                break;
            case "BANK":
                sPaymentMethodStatementSelector = "._bank_statement";
                break;
            case "CREDIT_CARD":
                sPaymentMethodStatementSelector = "._creditCard_statement";
                break;
            case "VIRTUAL_ACCOUNT":
                sPaymentMethodStatementSelector = "._virtualAccount_statement";
                break;
            case "MOBILE":
                sPaymentMethodStatementSelector = "._mobile_statement";
                break;
			case "POINT":
				sPaymentMethodStatementSelector = "._chargedPoint_statement";
				break;
			case "SKIP":
				sPaymentMethodStatementSelector = "._virtualAccount_statement";
				break;
        }

        // 포인트 전액결제시에 exposureArea가 없음
        if (sPaymentMethodStatementSelector != "") {
            var welStatementList = this._getElement("root").queryAll(sPaymentMethodStatementSelector);

            if (welStatementList.length > 0) {
                $ElementList(this._getElement("root").queryAll(sPaymentMethodStatementAreaSelector)).show();
                $ElementList(this._getElement("root").queryAll(sPaymentMethodStatementSelector)).show();
            } else {
                $ElementList(this._getElement("root").queryAll(sPaymentMethodStatementAreaSelector)).hide();
            }
        }
    },
	 changePaymentByPayMethod : function (sPayMethod) {

		if(sPayMethod == "chargePoint") {
			return;
		}

		if (this._isEasyPay(sPayMethod)) {
			if (this._isEasyPayCreditCard(sPayMethod)) {
				this._changePayMethodAndActivateFlick("Card");
			} else if (this._isEasyPayBank(sPayMethod)) {
				this._changePayMethodAndActivateFlick("Bank");
			}

			this.changePayment(null, this._getSelectedEasyPayElement());
		} else {
			var elGeneralPayMeansClassRadioInput = null;

			if (sPayMethod == "VIRTUAL_ACCOUNT") {
				sPayMethod = "SKIP";
			}

			$A(this._htInstance["aPayMeansClass"]).forEach(function (oGeneralPayMeansClassRadio) {
				if (oGeneralPayMeansClassRadio.getInput().value == sPayMethod) {
					elGeneralPayMeansClassRadioInput = oGeneralPayMeansClassRadio.getInput();
				}
			});
			this.changePayment(null, elGeneralPayMeansClassRadioInput);
		}
	},
	getPaymentTabByPayMethod : function (sPayMethod) {
		if (this._isEasyPay(sPayMethod)) {
			if (this._isEasyPayCreditCard(sPayMethod)) {
				return "naverPaymentsCard";
			} else if (this._isEasyPayBank(sPayMethod)) {
				return "naverPaymentsBank";
			}
		} else {
			return "generalPayments";
		}
	},
	_setPaymentTabChecked : function (sTab) {
		$A($ElementList(this._getElement("root").queryAll("._payMethodRadio")).$value()).forEach(function(welPayMethodRadioArea){
			var welPayMethodRadioInput = $Element(welPayMethodRadioArea.query("input"));
			if(welPayMethodRadioInput.attr("value") === sTab){
				welPayMethodRadioInput.attr("checked", true);
				$A.Break();
			}
		});
	},
	/**
	 * 현금 영수증 발급 유형(개인/법인)
	 *
	 * @param we
	 */
	changeReceiptType : function(we){

		var deductionMethod="";
		if(we != undefined){
			deductionMethod = $Element(we.element.parentElement).query("input").value;
		}else{
			$A($$("._receiptIssueUsageCode")).forEach(function(v,i,a){
				if(a[i].checked){
					deductionMethod = a[i].value;
				}
			});
		}
		if(deductionMethod == "PERSONAL_INCOME_TAX"){
			$$.getSingle("div .privateDeductMethod").style.display = "block";
			$$.getSingle("div .businessDeductMethod").style.display = "none";
			this._htInstance["sbPrivateCashReceiptIssueType"].enable();
			$$.getSingle(".businessCashReceiptIssueClassCode").disabled=true;
			this.changeCashReceiptIssueClass();
		}else if(deductionMethod == "BIZ_EXPENSE_PROOF"){
			$$.getSingle("div .privateDeductMethod").style.display = "none";
			$$.getSingle("div .businessDeductMethod").style.display = "block";
			this._htInstance["sbPrivateCashReceiptIssueType"].disable();
			$$.getSingle(".businessCashReceiptIssueClassCode").disabled=false;
		}
	},
	/**
	 * 현금 영수증 신청 정보
	 *
	 * @param we
	 */
	changeCashReceiptIssueClass : function(we){
		var selectedType = undefined;
		if(we != undefined){
			selectedType = we.element.value;
		}else{
			selectedType = $$.getSingle(".privateCashReceiptIssueClassCode").value;
		}
		if(selectedType.indexOf("SOCIAL_NUMBER") > -1){
			$$.getSingle(".socialNumber").style.display = "inline";
			$$.getSingle(".cellPhone").style.display = "none";
			$$.getSingle(".cashCard").style.display = "none";
		}else if(selectedType.indexOf("PHONE_NUMBER") > -1){
			$$.getSingle(".socialNumber").style.display = "none";
			$$.getSingle(".cellPhone").style.display = "inline";
			$$.getSingle(".cashCard").style.display = "none";
		}else if(selectedType.indexOf("CARD_NUMBER") > -1){
			$$.getSingle(".socialNumber").style.display = "none";
			$$.getSingle(".cellPhone").style.display = "none";
			$$.getSingle(".cashCard").style.display = "inline";
		}
	},
	/**
	 * 선택된 radio 버튼의 상위 엘리먼트에 class를 설정한다. 그외의 모든 엘리먼트의 class정보는 제거한다.
	 *
	 * @param radiosTags
	 *            제거하기위한 태그 정보
	 * @param addOnObject
	 *            class 정보 추가하기위한 타겟 오브젝트
	 */
	addClassOnRadio : function(radiosTags, addOnObject){
		$A($$(radiosTags)).forEach(function(v,i,a){
			$Element(a[i]).removeClass("on");
		});
		$Element(addOnObject).addClass("on");
	},
	showPayLoadingLayer : function(){
		var screenWidth = 0;
		var screenHeight = 0;
		var scrollTop=0;
		var elTempLayer = $$.getSingle("._tempLayer");

		if(window.innerHeight){				// IE외 브라우저
			screenWidth = window.innerWidth + "px";
			screenHeight = window.innerHeight + "px";
		}else{// IE
			screenWidth = document.body.clientWidth + "px";
			screenHeight = document.body.clientHeight + "px";
		}

		if(typeof pageYOffset!= 'undefined'){
			// most browsers
			scrollTop= pageYOffset;
		}
		else{
			var B= document.body; // IE 'quirks'
			var D= document.documentElement; // IE with doctype
			D= (D.clientHeight)? D: B;
			scrollTop = D.scrollTop;
		}
		scrollTop += "px";

		$Element(elTempLayer).css(
			{
				width : screenWidth,
				height : screenHeight,
				position : "absolute",
				left : "0px",
				top : scrollTop,
				display : "block"
			});
		nmp.showLayer($$.getSingle("._payLoadingLayer"), elTempLayer, {
			sPosition : "inside-center",
			bAuto : true,
			bShowDimmedLayer : true
		});
	},
	/**
	 * 적립될 마일리지 정보를 다시 조회해온뒤 주문서에 반영한다.
	 */
	recalculateAccumulationNMileage : function() {
		if($$.getSingle("._totalBenefitMileageWithPayEvent") == undefined || this._htInstance["completeInitialize"] !== true){
			return;
		}
		var sUrl ="/orderSheetAjax/recalculateAccumulationNMileage/"+this._htInstance["orderSnapshot"]["orderSnapshotKey"] ;

		nmp.requestAjax(sUrl, {"orderCreateJson" : this.createOrderCreateFormJson()}, {
			method : "post",
			onload : $Fn(function(htResult) {
				if(htResult.bSuccess == true){
					this._htInstance["hasNmpMileage"] = htResult.htReturnValue.hasNmpMileage;

					this._generateMileageLayerDataFromMap(htResult.htReturnValue.accumulateMileages);
					this._generateReviewMileageLayerDataFromMap(htResult.htReturnValue.accumulateReviewMileages);

					if (this._htInstance["mileageMap"]["TOTAL"] == 0 && this._htInstance["reviewMileageMap"]["TOTAL"] == 0) {
						$ElementList(this._getElementList("benefitAreaDisplayStatus", true)).hide();
					} else {
						$ElementList(this._getElementList("benefitAreaDisplayStatus", true)).show();
					}

					if (!this._htInstance["hasNmpMileage"]) {
						if (this._getElement("cardBenefitItem") != undefined) {
							this._getElement("cardBenefitItem").hide();
						}

						if (this._getElement("cardBenefitTag") != undefined) {
							this._getElement("cardBenefitTag").hide();
						}
					} else {
						this._setCardBenefitInfo();
					}

					var nPayEventBankRegisterAmount = (this._isEasyPayBank(this.getPayMethod()) ? this._getOption("payEventBankRegisterAmount") : 0);
					var commaCardBenefitPoint = this._htInstance["commaCardBenefitPoint"] ? this._htInstance["commaCardBenefitPoint"] : 0;
					var totalBenefitMileageWithPayEvent = this._htInstance["mileageMap"]["TOTAL"] + this._htInstance["reviewMileageMap"]["TOTAL"] + nPayEventBankRegisterAmount + this._getOption("totalEasybookingMileage") + commaCardBenefitPoint;

					if($$.getSingle("._totalAccumulateMileageArea") != undefined) {
						if ((this._htInstance["mileageMap"]["TOTAL"] + this._htInstance["reviewMileageMap"]["TOTAL"]) == 0) {
							$Element($$.getSingle("._totalAccumulateMileageArea")).hide();
						} else {
							$Element($$.getSingle("._totalAccumulateMileageArea")).show("table");

							if ( (this._htInstance["mileageMap"]["TOTAL"])  > 0) {
								this._getElement("purchaseBenefitArea").show("table-cell");
								var htPurchaseBenefits = $H(this._htInstance["mileageMap"]);
								var aSellerCustomerManagementBenefits = $A();
								$H(htResult.htReturnValue.accumulateSellerCustomerManagementMileages).forEach(function (v, k) {
									aSellerCustomerManagementBenefits.push({"key": k, "amount": v});
								});
								htPurchaseBenefits.add("items", aSellerCustomerManagementBenefits.$value());
								var aInflowBenefits = $A();
								$H(htResult.htReturnValue.accumulateInflowBenefitMileages).forEach(function (v, k) {
									aInflowBenefits.push({"key": k, "mileage":
											{
												"amount" : v.amount,
												"membershipImageYn" : v.membershipImageYn === undefined ? false : v.membershipImageYn
											}
									});
								});
								htPurchaseBenefits.add("inflowBenefits", aInflowBenefits.$value());
								var elPurchaseBenefitLayerHtml = $Template(this._getElement("purchaseBenefitTemplate").html()).process(htPurchaseBenefits.$value());
								this._getElement("purchaseBenefitArea").html(elPurchaseBenefitLayerHtml);
							} else {
								this._getElement("purchaseBenefitArea").hide();
							}

							if ((this._htInstance["reviewMileageMap"]["TOTAL"] + nPayEventBankRegisterAmount) > 0) {
								this._getElement("reviewBenefitArea").show();

								var htReviewBenefits = $H(this._htInstance["reviewMileageMap"]);
								var elReviewBenefitLayerHtml = $Template(this._getElement("reviewBenefitTemplate").html()).process(htReviewBenefits.$value());

								if (nPayEventBankRegisterAmount > 0) {
									var htRegisterAccountBenefits = $H();
									htRegisterAccountBenefits.add("BANK_EVENT", nPayEventBankRegisterAmount);
									var elRegisterAccountBenefitLayerHtml = $Template(this._getElement("registerAccountBenefitTemplate").html()).process(htRegisterAccountBenefits.$value());
									elReviewBenefitLayerHtml += elRegisterAccountBenefitLayerHtml;
								}

								if (this._getOption('serviceType') == 'CHECKOUT') {
									var elReviewBenefitLayerGuideHtml = $Template(this._getElement("registerAccountBenefitC1GuideTemplate").html()).process(htReviewBenefits.$value());
									elReviewBenefitLayerHtml += elReviewBenefitLayerGuideHtml;
								}

								if (this._getOption('serviceType') == 'MP') {
									var elReviewBenefitLayerGuideHtml = $Template(this._getElement("registerAccountBenefitC2GuideTemplate").html()).process(htReviewBenefits.$value());
									elReviewBenefitLayerHtml += elReviewBenefitLayerGuideHtml;
								}

								this._getElement("reviewBenefitArea").html(elReviewBenefitLayerHtml);
							} else if(this._getElement("reviewBenefitArea") != undefined){
								this._getElement("reviewBenefitArea").hide();
							}
						}
					}
					$$.getSingle("._totalBenefitMileageWithPayEvent").innerHTML = nmp.front.order.ui.setThousandComma(totalBenefitMileageWithPayEvent);


					this._getChargePoint().showChargePointUseBannerIfAvailable(
						this._htInstance["mileageMap"]["TOTAL_PURCHASE"],
						htResult.htReturnValue.accumulateMileages["EXPECTED_CHARGED_POINT"],
						htResult.htReturnValue.accumulateMileages["EXPECTED_CHARGED_POINT_ADDITIONAL"]);

					var bannerBennefitInfo = this._getChargePoint().getBannerBennefitInfo(
						this._htInstance["mileageMap"]["TOTAL_PURCHASE"],
						htResult.htReturnValue.accumulateMileages["EXPECTED_CHARGED_POINT"],
						htResult.htReturnValue.accumulateMileages["EXPECTED_CHARGED_POINT_ADDITIONAL"]);

					// 간편카드 이용자 -> 충전결제 사용 유도를 위해 최대 3% 로 문구 고정
					var bannerMaxThreeBenefitInfo = this._getChargePoint().getMaxThreeBenefitInfo(
						this._htInstance["mileageMap"]["TOTAL_PURCHASE"],
						htResult.htReturnValue.accumulateMileages["EXPECTED_CHARGED_POINT"],
						htResult.htReturnValue.accumulateMileages["EXPECTED_CHARGED_POINT_ADDITIONAL"]
					);

					this._getChargePoint().settingTitleBenefitBanner(bannerBennefitInfo);
					this._getChargePoint().settingChargePointUseCardBanner(bannerMaxThreeBenefitInfo);
					this._getChargePoint().settingChargePointUseGeneralPaymentBanner(bannerBennefitInfo);


				}else if(htResult && !htResult.bSuccess && htResult.sErrorCode == "ACCESS_DENIED") {
					eval(htResult.htReturnValue.script);
				}
			},this).bind()});
	},
	/**
	 * 안내 팝업 띄우기
	 *
	 * @param we
	 * @param url
	 */
	openGuidePopup : function (we, url_key){

		if(url_key != undefined){
			var urlInfo = this._htInstance[url_key]
			if(urlInfo != undefined){
				nmp.openPopup(urlInfo.url, urlInfo.option);
			}else{
				if(url_key != "" && url_key.indexOf("http://") > -1){
					nmp.openPopup(url_key);
				}else{
					alert('URL 정보가 없습니다.');
				}
			}
		}
	},
	openDonAgree : function(){
		var htUrls = this._getOption("urls");
		var sPageUrl = htUrls["naver.don.agree.popup"];
		nmp.openPopup(sPageUrl+"?callbackFunction=nmp.front.order.order_sheet.donAgreeResult", ["width=650", "height=430"], "naverDonAgreePopup");
	},
	donAgreeResult : function(htResult){
		var donAgree =  $$.getSingle("input[name=donAgree]");
		if(donAgree != undefined){
			donAgree.value = true;
		}

		var donAgreeForm = $Element($$.getSingle("._donAgree"));
		donAgreeForm.hide();
		donAgreeForm.removeClass("don");
		donAgreeForm.removeClass("_accountInfo");
	},
	openDonPayPopup : function(reserveSeq){
		var htUrls = this._getOption("urls");
		var sPageUrl = htUrls["naver.don.pay.popup"];
		try{
			this._getOption("payPopup").moveTo((screen.width-575)/2, (screen.height-625)/2);
			this._getOption("payPopup").resizeTo(575,625);
			this._getOption("payPopup").location.href=sPageUrl+reserveSeq;
		}catch(e){
			nmp.openPopup(sPageUrl+reserveSeq, ["width=575", "height=625"], "naverDonPayPopup");
		}
	},
	_remainNaverMileage : function() {
		return (this._getOption("remainNaverMileage") > 0) ? this._getOption("remainNaverMileage") : 0;
	},
	createOrderCreateFormJson : function(){
		var orderCreateForm = {};
		var formList = ["payForm","certificationForm", "deliveryForm"];
		for(var i = 0; i < formList.length; i++){
			orderCreateForm[formList[i]] = this._makePartialCreateForm(formList[i]);
		}
		if(this._getElement("orderAdditionalInfo", true) != undefined){
			orderCreateForm["orderAdditionalInfoForm"] = this._makePartialCreateForm("orderAdditionalInfoForm");
			if ($H(orderCreateForm["orderAdditionalInfoForm"]).length() > 0) {
				if(orderCreateForm["orderAdditionalInfoForm"]["orderOptionInfoParticularInputYn"] == "false"){
					orderCreateForm["orderAdditionalInfoForm"]["orderAdditionalInfos"] = this._makeOrderAdditionalInfo("._orderAdditionalInfos");
				}else{
					orderCreateForm["orderAdditionalInfoForm"]["orderAdditionalInfoPerItem"] = {};
					var orderProducts = this.getOrderSnapshot().orderProducts;
					for(var i = 0 ; i < orderProducts.length ; i++){
						var orderItems = orderProducts[i].items;
						for(var j = 0 ; j < orderItems.length ; j++){
							var itemId = orderItems[j].id;
							orderCreateForm["orderAdditionalInfoForm"]["orderAdditionalInfoPerItem"][itemId] = this._makeOrderAdditionalInfo("._orderAdditionalInfoPerItem"+itemId);
						}
					}
				}
			}
		}

		orderCreateForm["certificationForm"]["isExistEcouponProduct"] = this._getOption("isExistEcouponProduct");

		// 주결제수단 금액 정보셋팅하기
		if( orderCreateForm["payForm"]["payAmounts"] == undefined){
			orderCreateForm["payForm"]["payAmounts"] = {};
		}

		var payMethod = this.getPayMethod();

		var formPayMethod = this._getOption("easyCardCode").has(payMethod) ? "CREDIT_CARD" : (this._getOption("easyBankCode").has(payMethod) ? "BANK" : payMethod);
		if(formPayMethod){
			orderCreateForm["payForm"]["payAmounts"][formPayMethod] = this.getOrderSnapshot().orderPayAmount - this._getMileageAmount() - this._getUsePointAfterCharge() - this._getPayLaterAmount();
		}
		orderCreateForm["payForm"]["isEasyPay"] = this._isEasyPay(payMethod);

		if (this._isEasyPay(payMethod)) {
			orderCreateForm["payForm"]["easyPayMethodNo"] = this._getSelectedEasyPayCKey(payMethod);
			if (this._isEasyPayBank(payMethod)) {
				orderCreateForm["payForm"]["realTimeAccountTransferSettleInfo"] = orderCreateForm["payForm"]["realTimeAccountTransferSettleInfo"] || {};
				orderCreateForm["payForm"]["realTimeAccountTransferSettleInfo"]["payBankbookCode"] = this._getSelectedEasyPayBankbookCode();
			}
			if (this._isEasyPayCreditCard(payMethod)) {
				orderCreateForm["payForm"]["easyPayCardBenefitYn"] = this._getSelectedEasyPayCardBenefitYn();
			}
		} else if (this.getPayMethod() == "SKIP") {
			orderCreateForm["payForm"]["nextPayMeansClass"] = this._getCurrentSkipPayMethod();
		}

		orderCreateForm["productDiscounts"] = this.extractDiscountedOrderItem(nmp.front.order.order_sheet.getOrderSnapshot());
		orderCreateForm["deliveryFeeDiscounts"] = this.extractDiscountedDeliveryGroup(nmp.front.order.order_sheet.getOrderSnapshot());
		orderCreateForm["orderDiscount"] = nmp.front.order.order_sheet.getOrderSnapshot()["discount"];
		orderCreateForm["storeDiscounts"] = nmp.front.order.order_sheet.getOrderSnapshot()["storeDiscounts"];

		var useTotalNaverCash = this._getMileageAmount();
		var remainMileage = this._remainNaverMileage();
		var useMileage = 0;
		var useChargePoint = 0;
		var usePointAfterCharge = 0;
		var usePayLaterAmount = 0;

		if (useTotalNaverCash > remainMileage) {
			useMileage = remainMileage;
			useChargePoint = useTotalNaverCash - useMileage;
		} else {
			useMileage = useTotalNaverCash;
			useChargeAmount = 0;
		}

		usePointAfterCharge = this._getUsePointAfterCharge();
		usePayLaterAmount = this._getPayLaterAmount();

		orderCreateForm["payForm"]["payAmounts"]['NAVER_CASH'] = useMileage;
		orderCreateForm["payForm"]["payAmounts"]['CHARGED_POINT'] = useChargePoint + usePointAfterCharge;
		orderCreateForm["payForm"]["payAmounts"]['PAY_LATER'] = usePayLaterAmount;

		if (this._getTotalUseChargePoint() > 0) {
			orderCreateForm["payForm"]["pointSettleInfo"] = orderCreateForm["payForm"]["pointSettleInfo"] || {};

			if (this._getChargeAmount() > 0) {
				orderCreateForm["payForm"]["pointSettleInfo"]["chargedPointBankbookCode"] = this.getChargePointInfo()["payBankbookCode"];
				orderCreateForm["payForm"]["pointChargeAmount"] = this._getChargeAmount();
			} else {
				if (this._getOption("isNaverBankbookRecentCharged")) {
					orderCreateForm["payForm"]["pointSettleInfo"]["chargedPointBankbookCode"] = "MIRAEASSET_CMA";
				}
			}
		}

		if (this._htInstance["isPinPay"] && this._getOption("isPinPayMember")) {
			orderCreateForm["payForm"]["isPinPayMember"] = this._getOption("isPinPayMember");
			orderCreateForm["certificationForm"]["isPinPayAgree"] = this._getOption("isPinPayAgree");
			orderCreateForm["payForm"]["mobileSettleInfo"]["pinNo"] = $$.getSingle("input[name=mobilePassword]").value;
		}

		// 전통주 성인 인증 토큰 세팅
		if (this._getOption("hasTraditionalAlcoholProduct") && this._htInstance["adultAuthenticationToken"]){
			orderCreateForm["certificationForm"]["adultAuthenticationToken"] = this._htInstance["adultAuthenticationToken"];
			orderCreateForm["certificationForm"]["adultAuthenticationMethod"] = this._htInstance["adultAuthenticationMethod"];
		}


		// 보증금 정보
		if (this._getOption("deposits") != "" && this._getOption("deposits") != undefined) {
			orderCreateForm["deposits"] = this._getOption("deposits");
		}

		if (this.isRefundAccountChecked()) {
			orderCreateForm["payForm"]["refundAccountInfo"]["refundAccountKey"] = this.selectedRefundAccount();
		} else {
			orderCreateForm["payForm"]["refundAccountInfo"]["refundAccountKey"] = "";
		}


		return $Json(orderCreateForm).toString();
	},
	/**
	 * 주문 추가 정보 셋을 만든다.
	 *
	 * @param upperClassName
	 * @returns
	 */
	_makeOrderAdditionalInfo : function(upperClassName){
		var orderAdditionalInfos = $A();
		$A(this._getElement("orderAdditionalInfo").queryAll(upperClassName)).forEach(
			function(el)
			{
				var orderAdditionalList=$A();
				$A($Element(el).queryAll("input,select,textarea")).forEach(function(element){orderAdditionalList.push(element) });

				var _htOrderAdditionalInfo = {};
				orderAdditionalList.forEach(function(innerEl){
					var val = innerEl.value;
					if((innerEl.className.indexOf("_text_50") > -1 && val == "50자 내로 입력해주세요.")
						|| (innerEl.className.indexOf("_text_20") > -1 && val == "20자 내로 입력해주세요.")){
						val = "";
					}
					var name = innerEl.name;
					if(/_*[0-9]$/.test(name)){
						name = name.split("_")[0];
					}
					_htOrderAdditionalInfo[name] = val;
				});

				orderAdditionalInfos.push(_htOrderAdditionalInfo);
			}
		);
		return orderAdditionalInfos.$value();
	},
	/**
	 * formClassName에 있는 모든 엘리먼트의 값을 반환하도록 한다. - 체크박스인 경우에는 체크 여부 - radio버튼인
	 * 경우에는선택된 것의 value값을쓴다. - 그외는 모두 value값
	 *
	 * @param formClassName
	 * @returns {___anonymous65118_65119}
	 */
	_makePartialCreateForm : function(formClassName){
		var partialForm = {};
		var groupForm = {};
		$A(this._getElementList(formClassName, true)).forEach(
			function(el,i,a){
				if(el.className.indexOf("_group") > -1){
					var classNameArr = el.className.split(" ");
					for(var idx = 0 ; idx < classNameArr.length ; idx++ ){
						if(classNameArr[idx].indexOf("_group") > -1){
							groupForm[classNameArr[idx]] = el;
							break;
						}
					}
					$A.Continue();
				}
				if(el.disabled){
					$A.Continue();
				}

				var elVal = a[i].value;
				if(elVal != "" && (a[i].className.indexOf("_onlyPriceTarget") > -1
					|| a[i].className.indexOf("_onlyNumberTarget") > -1)){
					elVal = elVal.replace(/[,]/g,"");
				}
				if(a[i].type=="checkbox"){elVal = a[i].checked;}
				if(a[i].type=="radio"){
					if(a[i].checked == false){
						$A.Continue();
					}else{
						elVal = a[i].value;
					}
				}
				var elNameArr = a[i].name.split(".");
				if(elNameArr.length==1){
					partialForm[a[i].name]=elVal;
				} else {
					var elHash = partialForm[elNameArr[0]];
					if(elHash == undefined){
						elHash={};
					}
					for(var idx = 1; idx > 0 ; idx--){
						elHash[elNameArr[idx].split("___")[0]] = elVal;
					}
					partialForm[elNameArr[0]]=elHash;
				}
			}
		);
		partialForm = this._makeGroupFormMerge(groupForm, partialForm, (formClassName == "deliveryForm" ? "-":""));
		return partialForm;
	},
	/**
	 * merge되어야 하는 필드인 경우 처리 class에 _group_* 로 존재하는 필드 처리
	 *
	 * @param groupForm
	 * @param partialForm
	 * @returns
	 */
	_makeGroupFormMerge : function(groupForm, partialForm, delimiter){
		var _htGroup = $H(groupForm).ksort();
		var mergeKey = "";
		var mergeValue = "";
		$A(_htGroup.keys()).forEach($Fn(function (val, i, a){
			var el = _htGroup.$(val);
			if( mergeKey == "" || mergeKey != el.name.split("___")[0] || i ==a.length -1){
				if(i ==a.length -1){
					if(mergeValue != "" && el.className.indexOf("_notFormat") == -1 ){
						mergeValue += delimiter ;
					}
					mergeValue += $S(el.value).trim().$value();
				}
				if(mergeKey != ""){
					var elNameArr = mergeKey.split(".");
					if(elNameArr.length==1){
						partialForm[mergeKey]=mergeValue;
					} else {
						var elHash = partialForm[elNameArr[0]];
						if(elHash == undefined){
							elHash={};
						}
						for(var idx = 1; idx > 0 ; idx--){
							var name = elNameArr[idx].split("___")[0];
							if(/_*[0-9]$/.test(name)){
								name = name.split("_")[0];
							}
							elHash[name] = mergeValue;
						}
						partialForm[elNameArr[0]]=elHash;
					}
				}
				mergeKey = el.name.split("___")[0];
				mergeValue = "";
			}
			if(mergeValue != "" && el.className.indexOf("_notFormat") ==-1){
				mergeValue += delimiter ;
			}
			mergeValue +=  $S(el.value).trim().$value();
		},this).bind());
		return partialForm;
	},
	extractDiscountedOrderItem : function(orderSnapshot) {
		var whtExtractedOrderItems = $H();

		$A(orderSnapshot.orderProducts).forEach($Fn(function(orderProduct) {
			$A(orderProduct.items).forEach($Fn(function(orderItem) {
				if ($A(orderItem.current.discounts).some(this._isAvailableDiscount)) {
					whtExtractedOrderItems.add(orderItem.id, $A(orderItem.current.discounts).filter(this._isAvailableDiscount).$value());
				}
			}, this).bind());
		}, this).bind());

		return whtExtractedOrderItems.$value();
	},
	extractDiscountedDeliveryGroup : function(orderSnapshot) {
		var whtExtractedDeliveryGroups = $H();

		$A(orderSnapshot.orderProducts).forEach($Fn(function(orderProduct) {
			if (orderProduct.deliveryGroup.discount != undefined && this._isAvailableDiscount(orderProduct.deliveryGroup.discount)) {
				whtExtractedDeliveryGroups.add(orderProduct.deliveryGroup.id, orderProduct.deliveryGroup.discount);
			}
		}, this).bind());

		return whtExtractedDeliveryGroups.$value();
	},
	_isAvailableDiscount : function(discount) {
		return discount.available;
	},
	_isEasyPayNotOpened : function() {
		return this._isOpenedCardTab() == false && this._isOpenedBankTab() == false;
	},
	/* 현재 선택되어있는 결제수단코드 반환 */
	getPayMethod : function () {
		var payMethod = undefined;

		// 선택된 결제수단 확인
		$A(this._getElementList("payMeansClass").$value()).forEach(function (v, i, a) {
			if (a[i].attr("checked")) {
				payMethod = a[i].attr("value");
				$A.Break();
			}
		});

		// 나중에 결제중 선택된 수단 반환 ( 나중에결제 + 무통장입금인 case )
		if (this._isEasyPayNotOpened() && payMethod == "SKIP" && this._getCurrentSkipPayMethod() == "VIRTUAL_ACCOUNT" ) {
			return this._getCurrentSkipPayMethod();
		}

		// 일반 결제수단(신용카드, 실시간계좌이체, 모바일, 포인트) 반환
		if (this._isEasyPayNotOpened() || payMethod == "POINT") {
			return payMethod;
		}

		// 간편카드 결제수단 반환
		if (this._isOpenedCardTab() && this._getSelectedEasyPayCardElement()) {
			return this._getSelectedEasyPayCardCode();
		}

		// 간편계좌 결제수단 반환
		if (this._isOpenedBankTab() && this._getSelectedEasyPayBankElement()) {
			return this._getSelectedEasyPayBankCode();
		}

		return payMethod;
	},
	getCreditCardUsable : function() {
		var creditCardUseYn = false;
		$A(this._getElementList("payMeansClass").$value()).forEach($Fn(function(v,i,a){
			if(a[i].attr("value") == "CREDIT_CARD" || this._getOption("easyCardCode").has(a[i].attr("id"))){
				creditCardUseYn = true;
				$A.Break();
			}
		},this).bind());
		return creditCardUseYn;
	},
	getFormalCreditCardUsable : function() {
		var creditCardUseYn = false;
		$A(this._getElementList("payMeansClass").$value()).forEach(function(v,i,a){
			if(a[i].attr("value") == "CREDIT_CARD"){
				creditCardUseYn = true;
				$A.Break();
			}
		});
		return creditCardUseYn;
	},
	account : function() {
		var payMeansClass = this.getPayMethod();
		var htChargePointInfo = this.getChargePointInfo();

		if (htChargePointInfo["amount"] > 0) {
			if (this.isAllChargePointBankUnderMaintenance()) {
				alert("은행 시스템 작업으로 인하여 계좌 간편결제를 이용하실 수 없습니다.");
				this._htInstance["isProgress"] = false;
				return;
			}

			if (htChargePointInfo != undefined && htChargePointInfo["amount"] > 0 && htChargePointInfo["accountKey"] == undefined) {
				alert("포인트 충전을 위해 연결된 계좌를 확인해주세요.");
				this._htInstance["isProgress"] = false;
				return;
			}
		}

		if (this.needBankAccountToCharge()) {
			if (confirm('계좌를 등록하신 후 결제를 진행하시겠습니까?')) {
				this.openEasyPayBankPopup();
			} else {
				this._getChargePoint().toggle();
			}
			this._htInstance["isProgress"] = false;
			return;
		}

		// 복수모드 상태에서, 주결제수단이 선택되지 않을때, 결제금액이 남아있는 case
		if(!this.isPayMethodUiSingleMode() && !this.getCurrentCheckedGeneralPayMethodTabId() && this.getGeneralPayAmount() > 0){
			this.showDimmedLayerSimplePayMethodAutoChoice();
			return;
		}

		if(this._isEasyCardNotPayable(this.getPayMethod())){
			alert("카드사 시스템 점검으로 인해 해당 카드로 간편결제를 이용하실 수 없습니다.");
			return;
		}

		if(this._getChargePoint().isChecked()){
			if (this.isAllChargePointBankUnderMaintenance()) {
				alert("은행 시스템 작업으로 인하여 포인트 충전결제를 이용하실 수 없습니다.");
				this._htInstance["isProgress"] = false;
				return;
			}

			if(!this._getChargePoint().isPayable()) {
				alert("출금계좌 점검으로 인해 충전결제를 사용하실 수 없습니다. 다른 결제수단을 이용해주세요.");
				this._htInstance["isProgress"] = false;
				return;
			}
		}

		// 네이버 예약이면 바로 네이버빌링 결제 요청(결제수단 휴대폰 사용 하지 않으므로 아래 payPopup 해당사항 없음)
		if (this.getOption("isEasyBooking") == true) {
			nmp.front.order.order_sheet.integration_cart.account();
			return;
		}

		// 도로명 주소인 경우 상세주소가 미입력되었다면 확인 후 진행함
		var elRoadNameAddressYn = this._getElement("deliveryInfos").query("input[name='deliveryAddress.roadNameAddressYn']");
		var elDetailAddress = this._getElement("deliveryInfos").query("input[name='deliveryAddress.detailAddress']");
		if (elRoadNameAddressYn != undefined && elDetailAddress != undefined && elRoadNameAddressYn.value == "true" && $S(elDetailAddress.value).trim().$value() == "") {
			if (!confirm("상세주소가 입력되지 않았습니다. 그대로 주문하시겠습니까?")) {
				return;
			}
		}

		if(payMeansClass == "DON"
			|| (this._getOption("switchPayment") == true && this._getOption("orderClass") == "CHECKOUT" && payMeansClass == "MOBILE")
			|| (this._getOption("switchPayment") != true && this._getOption("orderClass") == "CHECKOUT" && !this._isEasyPay(payMeansClass) && this._getOption("pgId") != "inicis" && payMeansClass != "POINT" && payMeansClass != "SKIP" && nmp.front.order.order_sheet.macos == undefined && !this.getOption("isForcedBillingPayment"))
		){
			payPopup = window.open(this._getOption("urls")["order.pay.progress"],"payPopup", ["width=460", "height=540","left="+((screen.width-460)/2), "top="+((screen.height-540)/2), "scrollbars=yes", "resizable=yes"].join(","));
			this._setOption("payPopup",payPopup);
		}

		if (this.isPGPayment(payMeansClass)) {
			nmp.front.order.order_sheet.checkout.account();
		} else {
			nmp.front.order.order_sheet.integration_cart.account();
		}

	},
	resetTempLayer : function (){
		nmp.hideLayer();
		$$.getSingle("._tempLayer").style.display="none";

		var tempOrderNo = $$.getSingle("input[name=tempOrderId]").value;
		if (tempOrderNo != undefined && tempOrderNo != '') {
			$$.getSingle("input[name=tempOrderId]").value = '';
		}
	},
	closePayPopup : function(){
		if(this._getOption("payPopup")){
			this._getOption("payPopup").close();
			this._setOption("payPopup", false);
		}
	},
	/**
	 * 가주문생성 실패시 메시지 노출 처리
	 *
	 * @param htResult
	 */
	viewFailResult : function(htResult){
		this.closePayPopup();

		if(htResult == undefined || htResult.htReturnValue == undefined){
			alert("알수없는 오류가 발생하였습니다.");
		}
		if(htResult.sErrorCode == "ACCESS_DENIED") {
			eval(htResult.htReturnValue.script);
		}else if(htResult.sErrorMessage != undefined){
			alert(htResult.sErrorMessage);
		}else if(htResult.htReturnValue.firstResultMessage.messageCode == "create.valid.blackconsumer"){
			var elLayerHtml = $Template(this._getElement("blackconsumerLayerTemplate").html()).process(htResult.htReturnValue.resultMap.invalidOrderProductList[0].orderError.messageArgs);
			this._getElement("root").appendHTML(elLayerHtml);

			var welBlackconsumerNotice = $Element($$.getSingle("._blackconsumerNotice"));
			welBlackconsumerNotice.css("top", (this._getScrollTop() + (window.innerHeight - welBlackconsumerNotice.height()) / 4) + "px");
		}else if(htResult.htReturnValue.firstResultMessage.messageCode == "create.valid.product"){
			nmp.openPopup("/orderSheetPopup/invalidOrder",["width=520", "height=500"],"invalidOrder",{invalidOrderProductList : $Json(htResult.htReturnValue.resultMap.invalidOrderProductList).toString()},true);
		}else if(htResult.htReturnValue.firstResultMessage.messageCode == "under14.checkoutAgreement" || htResult.htReturnValue.firstResultMessage.messageCode == "groupId.checkoutAgreement"){
			alert(htResult.htReturnValue.firstResultMessage.message);
			var htUrls = this._getOption("urls");
			location.href = "http://"+htUrls["user.front.host"];
		}else{
			alert(htResult.htReturnValue.firstResultMessage.message);
			if(htResult.htReturnValue.firstResultMessage.messageCode == "field.required.donAgree"){
				nmp.front.order.order_sheet.openDonAgree();
			}else if (htResult.htReturnValue.firstResultMessage.messageCode == "field.unusable.reliefPhoneNumberUseYn"){
				$$.getSingle("._reliefPhoneNumberUseYn").checked=false;
			}
		}

		if (htResult.htReturnValue.firstResultMessage.messageCode != undefined && this._htValidationFocusing[htResult.htReturnValue.firstResultMessage.messageCode] != undefined) {
			var elNeedFocus = $$.getSingle(this._htValidationFocusing[htResult.htReturnValue.firstResultMessage.messageCode]);
			if (elNeedFocus != undefined) {
				elNeedFocus.focus();
			}
		}

		if (htResult.htReturnValue.firstResultMessage.messageCode != undefined && htResult.htReturnValue.firstResultMessage.messageCode.indexOf("createForm.deliveryAddress.overSeasDelivery") >= 0) {
			this.editDeliveryInfo();

			var elDeliveryPlace = $$.getSingle("#deliveryTypeNew");
			if (elDeliveryPlace != undefined) {
				elDeliveryPlace.focus();
			}
		}
	},
	/**
	 * 이전 페이지로 이동
	 *
	 * @param we
	 */
	previousPage : function(we) {
		var backUrl = this._getOption("backUrl");
		if(backUrl != ""){
			nmp.moveUrl(backUrl);
		}else{
			alert("이전페이지로 갈 수 없습니다.");
		}
	},
	cancelSwitchingPayment : function(we, orderId) {
		window.location.href = "/orderStatus/" + orderId;
	},
	/**
	 * 회원 정보 변경 팝업을 연다.
	 */
	changeMemberInfo : function(){
		nmp.openPopup(this._getOption("urls")["user.front.myPage.update"]);
	},
	/**
	 * 네이버 캐시 회원 가입 페이지로 이동
	 *
	 * @param we
	 */
	moveNaverCash : function (we){
		var htUrls = this._getOption("urls");
		var sPageUrl = htUrls["mileage.popup.agree"];
		nmp.openPopup(sPageUrl , ["toolbar=no", "channelmode=no", "location=no", "directories=no", "menubar=no"]);
	},

	successNaverCash : function(mileageInfo){
		// 마일리지 보유 금액
		this._htInstance["mileageValue"] = mileageInfo.naverCashAmount;

		var mileagePriceTag = $$.getSingle("._mileagePrice");
		if(mileagePriceTag != undefined){
			mileagePriceTag.innerHTML = nmp.front.order.ui.setThousandComma(this._htInstance["mileageValue"]) ;
		}

		$Element($$.getSingle("._mileageUseContents")).hide();
		$$.getSingle("._naverMileageText").innerHTML = "사용가능 마일리지";

		$ElementList($$("._beforeMileageAgree")).hide();
		$ElementList($$("._afterMileageAgree")).show();

		if(this._htInstance["mileageValue"]  > 500000){
			$Element($$.getSingle("._afterMileageAgreeAccum")).hide();
			$Element($$.getSingle("._afterMileageAgreeNoAccum")).show();
		}

		this.recalculateAccumulationNMileage();
	},
	getGeneralPayAmount : function(){
		if (this._getOption("generalPayAmount") != null) {
			return this._getOption("generalPayAmount");
		}
		return this.getOrderSnapshot()["orderPayAmount"] - this._getMileageAmount() - this._getUsePointAfterCharge() - this._getPayLaterAmount();
	},
	_getGeneralPayAmountExceptUsePointAfterCharge : function() {
		return this.getOrderSnapshot()["orderPayAmount"] - this._getMileageAmount() - this._getPayLaterAmount();
	},
	_getGeneralPayAmountExceptPayLaterAmount : function() {
		return this.getOrderSnapshot()["orderPayAmount"] - this._getMileageAmount() - this._getUsePointAfterCharge();
	},
	_getOrderPayAmountMinusMileageAmount : function() {
		return this.getOrderSnapshot()["orderPayAmount"] - this._getMileageAmount();
	},
	_getInputIntValue : function (name) {
		var val = $$.getSingle("input[name='"+name+"']") != undefined ? $$.getSingle("input[name='"+name+"']").value : 0;
		if(val != undefined && val != ""){
			val = parseInt(val.replace(/[,]/g,""));
		}
		if(val == "" || isNaN(val)){
			val = 0;
		}
		return val;
	},
	getMileageUseAmount : function() {
		return this._getMileageAmount();
	},
	/* 사용할 네이버 포인트 금액 반환 */
	_getMileageAmount : function(){
		return this._getInputIntValue("payAmounts.NAVER_CASH");
	},
	// 사용할 충전금액
	_getUsePointAfterCharge : function () {
		return this.getChargePointInfo()["useAmount"];
	},
	// 충전할 충전금액
	_getChargeAmount : function () {
		return this.getChargePointInfo()["amount"];
	},
	// 총 사용한 충전포인트 (보유 + 충전후 사용분)
	_getTotalUseChargePoint : function() {
		var useTotalNaverCash = this._getMileageAmount();
		var remainMileage = this._remainNaverMileage();
		var useHoldChargePoint = (useTotalNaverCash > remainMileage) ? useTotalNaverCash - remainMileage : 0;
		return useHoldChargePoint + this._getUsePointAfterCharge();
	},
	openMallProvision : function(we, bUseMallInfo){
		var merchantList = this._getOption("checkoutMerchantJson");
		var merchantListValues = null;
		if (bUseMallInfo) {
			merchantListValues = [ this.getOption("mallInfo") ];
		} else {
			merchantListValues = merchantList.values();
		}
		var elLayerHtml = $Template(this._getElement("mallProvisionLayerTemplate").html()).process({ "items": merchantListValues});
		var welMallProvisionLayer = this._getElement("mallProvisionLayer");
		welMallProvisionLayer.html(elLayerHtml);
		nmp.layer.show(welMallProvisionLayer, we.element, {
			"sPosition" : "outside-bottom",
			"sAlign" : "center",
			"nTop" : 8,
			"bAuto" : false ,
			"nShowDelay" : 0
		});
	},
	getOption : function(optionName){
		return this._getOption(optionName);
	},
	removeCoupons : function(bOrderAndProductCoupons, bDeliveryCoupon) {
		var orderSnapshot = this.getOrderSnapshot();

		$A(orderSnapshot.orderProducts).forEach($Fn(function(orderProduct) {
			if (bOrderAndProductCoupons) {
				$A(orderProduct.items).forEach($Fn(function(orderItem) {
					orderItem.current = orderItem.current || {};

					// 적용된 복수구매할인은 제거하지 않음
					orderItem.current.discounts = $A(orderItem.current.discounts).filter(function(discount) {
						return discount.available && (discount.discountPolicy.discountType == "MULTI_PURCHASE_DISCOUNT");
					}).$value();
				}, this).bind());
			}

			if (bDeliveryCoupon) {
				orderProduct.deliveryGroup.discount = undefined;
			}
		}, this).bind());

		if (bOrderAndProductCoupons) {
			orderSnapshot.discount = undefined;
		}

		var calculator = new nmp.component.OrderProductCalculator();
		$A(orderSnapshot.orderProducts).forEach(function(orderProduct) {
			calculator.addOrderProduct(orderProduct);
		});
		calculator.addOrderDiscount(orderSnapshot.discount);
		$H(orderSnapshot.storeDiscounts).forEach(function(value, key) {
			calculator.addStoreDiscount(key, value);
		});

		// 상품쿠폰 제거시에는 마일리지 금액 재계산 필요
		this.applyDiscounts(orderSnapshot, calculator.calculate(), false, bOrderAndProductCoupons);
	},
	showNaverCashLayer : function(htEvent, layerClass, isEdged, isLined, sAlign, cssName, sLayerName) {
		this._getElement('availNaverCashAmount').html("적립 포인트 : " + nmp.front.order.ui.setThousandComma(this._getOption("remainNaverMileage")) + "원");
		this._getElement('availChargedPoint').html("충전 포인트 : " + nmp.front.order.ui.setThousandComma(this._getOption("remainChargedPoint")) + "원");
		this.showLayerCommon(htEvent, layerClass, isEdged, isLined, sAlign, cssName, sLayerName);

	},
	showLayerCommon : function(htEvent, layerClass, isEdged, isLined, sAlign, cssName, sLayerName) {
		var welCommonLayer = null;

		if (sLayerName != undefined) {
			welCommonLayer = this._getElement(sLayerName);
		} else {
			if (isEdged == "true") {
				welCommonLayer = (isLined == "true") ? this._getElement("commonEdgedLineLayer") : this._getElement("commonEdgedLayer");
			} else {
				welCommonLayer = (isLined == "true") ? this._getElement("commonLineLayer") : this._getElement("commonLayer");
			}
		}
		var welContentLayer = $Element(welCommonLayer.query("._content"));
		if (cssName != undefined && cssName != "") {
			welCommonLayer.addClass(cssName);
		}
		welContentLayer.html(this._getElement(layerClass).html());

		var nTop = 5;
		if (isEdged == "true") {
			nTop = 8;
		}

		var baseElement = htEvent.element;
		nmp.layer.show(welCommonLayer, baseElement, {
			"sPosition" : "outside-bottom",
			"sAlign" : sAlign,
			"nTop" : nTop,
			"bAuto" : false
		});
	},
	showLayerDiscount : function(htEvent, orderProductId) {
		var elLayerHtml = $Template(this._getElement("discountLayerTemplate").html()).process(this._makeDiscountLayerTemplateArgument(orderProductId));

		var welDiscountLayer = this._getElement("discountLayer");
		$Element(welDiscountLayer.query("._content")).html(elLayerHtml);

		nmp.layer.show(welDiscountLayer, htEvent.element, {
			"sPosition" : "outside-bottom",
			"sAlign" : "center",
			"nTop" : 8,
			"bAuto" : false
		});
	},
	showLayerDeliveryFee : function(htEvent, orderProductId, sLayerType) {
		var elLayerHtml = $Template(this._getElement("deliveryFeeLayerTemplate").html()).process(this._makeDeliveryFeeLayerTemplateArgument(orderProductId));

		if(sLayerType == undefined || sLayerType == '') {
			var welDeliveryFeeLayer = this._getElement("deliveryFeeLayer");
		} else {
			var welDeliveryFeeLayer = this._getElement(sLayerType);
		}
		$Element(welDeliveryFeeLayer.query("._content")).html(elLayerHtml);

		nmp.layer.show(welDeliveryFeeLayer, htEvent.element, {
			"sPosition" : "outside-bottom",
			"sAlign" : "center",
			"nTop" : 8,
			"bAuto" : false
		});
	},
	showLayerMileage : function(htEvent, sType) {
		this._htInstance["mileageMap"] = $H(this._htInstance["mileageMap"]).add("type", sType).$value();

		var elLayerHtml = null;
		var welMileageFeeLayer = null;
		if (this._isEasyPay(this.getPayMethod())) {
			elLayerHtml = $Template(this._getElement("easyPayMileageLayerTemplate").html()).process(this._htInstance["mileageMap"]);
			welMileageFeeLayer = this._getElement("easyPayMileageLayer");
		} else {
			elLayerHtml = $Template(this._getElement("mileageLayerTemplate").html()).process(this._htInstance["mileageMap"]);
			welMileageFeeLayer = this._getElement("mileageLayer");
		}

		$Element(welMileageFeeLayer.query("._content")).html(elLayerHtml);

		var baseElement = htEvent.element;
		nmp.layer.show(welMileageFeeLayer, baseElement, {
			"sPosition" : "outside-bottom",
			"sAlign" : "left",
			"nTop" : 0,
			"bAuto" : false
		});
	},
	showLayerIioma : function(htEvent){
		var welIiomaAgreeLayer = this._getElement("iiomaAgreeLayer");

		var elLayerHtml = this._getElement("iiomaAgreeLayerTemplate").html();
		$Element(welIiomaAgreeLayer.query("._content")).html(elLayerHtml);

		nmp.layer.show(welIiomaAgreeLayer, htEvent.element, {
			"sPosition" : "outside-bottom",
			"sAlign" : "left",
			"nTop": 0,
			"nLeft" : 55,
			"bAuto" : false
		});
	},
	_makeDiscountLayerTemplateArgument : function (orderProductId) {
		var orderProduct = this._getOrderProductByOrderId(this._htInstance["orderSnapshot"].orderProducts, orderProductId);
		var multiPurchaseDiscountMinOrderValueText = "";
		var multiPurchaseDiscountValueText = "";
		var multiplePurchaseDiscountType;
		var sellerImmediateDiscountAmount = 0;
		var sellerSpecialDiscountAmount = 0;
		var sellerSpecialDiscountName = "즉시할인";

		var isSellerSpecialDiscount = false;
		for (var i = 0; i < orderProduct.items.length; ++i) {
			if (orderProduct.items[i].current != undefined) {
				var policy = orderProduct.items[i].current.sellerImmediateDiscount;
				if (policy != undefined && policy.discountPolicy != undefined) {
					var sellerImmediateDiscountType = policy.discountPolicy.sellerImmediateDiscountType;
					if (sellerImmediateDiscountType != undefined && sellerImmediateDiscountType != "IMMEDIATE") {
						sellerSpecialDiscountName = policy.couponName;
						isSellerSpecialDiscount = true;
						break;
					}
				}
			}
		}

		if (isSellerSpecialDiscount) {
			sellerSpecialDiscountAmount = this._htInstance["summary"]["orderProductDiscounts"][orderProductId]["sellerImmediateDiscount"];
		} else {
			sellerImmediateDiscountAmount = this._htInstance["summary"]["orderProductDiscounts"][orderProductId]["sellerImmediateDiscount"];
		}

		if (this._htInstance["summary"]["orderProductDiscounts"][orderProductId]["multiPurchaseDiscount"] > 0) {
			var policy = orderProduct.benefits.benefitPolicies.multiPurchaseDiscount;
			multiplePurchaseDiscountType = policy.multiplePurchaseDiscountType;

			if (policy.minOrderUnit == "PURCHASE_COUNT") {
				multiPurchaseDiscountMinOrderValueText = policy.minOrderValue + "개";
			} else {
				multiPurchaseDiscountMinOrderValueText = nmp.utility.convertNumberFormat(policy.minOrderValue) + "원";
			}

			if (policy.discountUnit == "RATE") {
				multiPurchaseDiscountValueText = policy.discountValue + "%";
			} else {
				multiPurchaseDiscountValueText = nmp.utility.convertNumberFormat(policy.discountValue) + "원";
			}
		}

		return {
			"sellerImmediateDiscountAmount" : sellerImmediateDiscountAmount,
			"sellerImmediateDiscountAmountText" : nmp.utility.convertNumberFormat(sellerImmediateDiscountAmount),
			"sellerSpecialDiscountName" : sellerSpecialDiscountName,
			"sellerSpecialDiscountAmount" : sellerSpecialDiscountAmount,
			"sellerSpecialDiscountAmountText" : nmp.utility.convertNumberFormat(sellerSpecialDiscountAmount),
			"managerImmediateDiscountAmount" : this._htInstance["summary"]["orderProductDiscounts"][orderProductId]["nmpImmediateDiscount"],
			"managerImmediateDiscountAmountText" : nmp.utility.convertNumberFormat(this._htInstance["summary"]["orderProductDiscounts"][orderProductId]["nmpImmediateDiscount"]),
			"multiplePurchaseDiscountType" : multiplePurchaseDiscountType,
			"multiPurchaseDiscountAmount" : this._htInstance["summary"]["orderProductDiscounts"][orderProductId]["multiPurchaseDiscount"],
			"multiPurchaseDiscountMinOrderValueText" : multiPurchaseDiscountMinOrderValueText,
			"multiPurchaseDiscountValueText" : multiPurchaseDiscountValueText
		};
	},
	_makeDeliveryFeeLayerTemplateArgument : function(orderProductId) {
		var orderProduct = this._getOrderProductByOrderId(this._htInstance["orderSnapshot"].orderProducts, orderProductId);
		var deliveryFee = orderProduct.deliveryFee;
		var deliveryGroup = orderProduct.deliveryGroup;
		var extraFee = deliveryGroup.deliveryAreaFee;
		var isApiSupport = false;

		if (extraFee != undefined) {
			extraFee.area2ExtraFee = extraFee.area2ExtraFee || 0;
			extraFee.area3ExtraFee = extraFee.area3ExtraFee || 0;
			isApiSupport = deliveryGroup.deliveryAreaFee.apiSupport;
		}
		return {
			"policy" : deliveryFee,
			"fee" : deliveryGroup.fee,
			"groupPolicy" : deliveryGroup,
			"extraFeePolicy" : extraFee,
			"isApiSupport" : isApiSupport
		};
	},
	_generateMileageLayerDataFromMap : function(htMileageMap) {
		var waMileageItems = $A();

		$A(this._htInstance["orderSnapshot"].orderProducts).forEach($Fn(function(orderProduct) {
			if ($H(htMileageMap).hasKey(orderProduct.id) && $H(htMileageMap).$(orderProduct.id) > 0) {
				var htMileageItem = {productName : orderProduct.name, mileage : $H(htMileageMap).$(orderProduct.id)};
				waMileageItems.push(htMileageItem);
			}
		}, this).bind());

		this._htInstance["mileageMap"] = {
			"TOTAL" : htMileageMap["TOTAL"],
			"TOTAL_NMP" : htMileageMap["TOTAL_NMP"]||0,
			"TOTAL_PURCHASE" : htMileageMap["TOTAL_PURCHASE"]||0,
			"TOTAL_ADDITIONAL" : htMileageMap["TOTAL_ADDITIONAL"]||0,
			"TOTAL_MEMBERSHIP" : htMileageMap["TOTAL_MEMBERSHIP"]||0,
			"MEMBERSHIP_PURCHASED_AMOUNT" : this._htInstance["membershipPurchasedAmount"],
			"CURRENT_MEMBERSHIP_ADDITIONAL_POINT_PERCENT" : this._htInstance["currentMembershipAdditionalPointPercent"],
			"FAMILY_MEMBERSHIP_YN" : this._htInstance["fmbrsSscYn"],
			"TOTAL_SCM" : htMileageMap["TOTAL_SCM"]||0,
			"TOTAL_INFLOW" : htMileageMap["TOTAL_INFLOW"]||0,
			"TOTAL_CHARGED_POINT" : htMileageMap["TOTAL_CHARGED_POINT"]||0,
			"TOTAL_CHARGED_POINT_ADDITIONAL" : htMileageMap["TOTAL_CHARGED_POINT_ADDITIONAL"]||0,
			"TOTAL_ADMIN_ADDITIONAL" : htMileageMap["TOTAL_ADMIN_ADDITIONAL"]||0,
			"items" : waMileageItems.$value(),
		};
	},
	_generateReviewMileageLayerDataFromMap : function(htMileageMap) {
		var waMileageItems = $A();
		$A(this._htInstance["orderSnapshot"].orderProducts).forEach($Fn(function(orderProduct) {
			if ($H(htMileageMap).hasKey(orderProduct.id)) {
				var htOrderProductReviewMap = $H(htMileageMap).$(orderProduct.id);

				var htMileageItem = {
					productName : orderProduct.name,
					textReviewMileage : htOrderProductReviewMap["TEXT"],
					photoVideoReviewMileage : htOrderProductReviewMap["PHOTOVIDEO"],
					subscriberReviewMileage : htOrderProductReviewMap["SUBSCRIBER"]
				};
				waMileageItems.push(htMileageItem);
			}
		}, this).bind());

		this._htInstance["reviewMileageMap"] = {
			"TOTAL" : htMileageMap["TOTAL"],
			"TOTAL_NORMAL_TEXT" : htMileageMap["TOTAL_NORMAL_TEXT"],
			"TOTAL_NORMAL_PHOTOVIDEO" : htMileageMap["TOTAL_NORMAL_PHOTOVIDEO"],
			"TOTAL_AFTERUSE_TEXT" : htMileageMap["TOTAL_AFTERUSE_TEXT"],
			"TOTAL_AFTERUSE_PHOTOVIDEO" : htMileageMap["TOTAL_AFTERUSE_PHOTOVIDEO"],
			"TOTAL_SUBSCRIBER" : htMileageMap["TOTAL_SUBSCRIBER"],
			"MAX_REVIEW_MILEASE" : htMileageMap["MAX_REVIEW_MILEASE"],
			"items" : waMileageItems.$value()
		};
	},
	_getOrderProductByOrderId : function(orderProducts, orderId) {
		var aOrderProducts = $A(orderProducts).filter(function(v, i, o) {
			return (v.id == orderId);
		});

		return (aOrderProducts.length() == 1 ? aOrderProducts.get(0) : null);
	},
	/**
	 * 환불계좌 정보를 주문서에 셋팅한다.
	 *
	 * @param accountInfo
	 */
	applyRefuncAccountInfo : function(accountInfo) {
		if (accountInfo == undefined || accountInfo.id == undefined) {
			return;
		}
		$$.getSingle("._refundBankId").value = accountInfo.id;
		$$.getSingle("._refundBankCode").value = accountInfo.bankTypeCode;
		$$.getSingle("._refundBankCodeName").value = accountInfo.bankTypeCodeName;
		$$.getSingle("._refundAccountHolderName").value = accountInfo.depositorName;
		$$.getSingle("._refundAccountNo").value = accountInfo.refundmentAccountNumber;
	},

	/* 휴대폰 결제 방법 노출 변경 */
	changeMobilePayMethod : function(we, mobilePayMethod) {

		if(mobilePayMethod != undefined){
			this._setGeneralPaymentInfo(true, this.getPayMethod());

			if (mobilePayMethod == "mobilePinPay") {
				this._htInstance["isPinPay"] = true;
				if ((this._getOption("isPinPayMember") != undefined && this._getOption("isPinPayMember")) &&
					(this._getOption("isPinPayAgree") == undefined || this._getOption("isPinPayAgree"))) {
					$ElementList($$("._isPinMember")).show();
					$ElementList($$("._isNotPinMember")).hide();
					$ElementList($$("._isPinMember .cphNo")).addClass("_payForm");
					$ElementList($$("._isNotPinMember .cphNo")).removeClass("_payForm");
					this._resetElement();
					return; // return
				} else{
					$ElementList($$("._isPinMember")).hide();
					$ElementList($$("._isNotPinMember")).show();
					$ElementList($$("._isPinMember .cphNo")).removeClass("_payForm");
					$ElementList($$("._isNotPinMember .cphNo")).addClass("_payForm");
					this._resetElement();
				}
			} else if (mobilePayMethod == "mobilePay") {
				$ElementList($$("._isPinMember")).hide();
				$ElementList($$("._isNotPinMember")).show();
				$ElementList($$("._isPinMember .cphNo")).removeClass("_payForm");
				$ElementList($$("._isNotPinMember .cphNo")).addClass("_payForm");
				this._resetElement();
				this._htInstance["isPinPay"] = false;
			}
		}
	},

	/* 간편결제 해지시 휴대폰 일반결제  default 값으로 변경 */
	clearMobilePayMethod : function(we) {
		$$.getSingle("#mobilePay").click();
		this._setOption("isPinPayAgree" , false);
		this._setOption("isPinPayMember" , false)
	},

	changeRefundMethod : function(we, refundMethod) {
		if(we != undefined){
			var elParent = $Element(we.element.parentElement).query("input");
			if ($Element(elParent).hasClass("radio-disabled")) {
				return;
			}
			refundMethod = elParent.value;
		}
		var isVisible = true;
		if(refundMethod == "BANK_ACCOUNT"){
			isVisible = true;
		}else{
			isVisible = false;
		}
		var refundInfos=this._getElementList("refundInfos");
		if(isVisible && this._getOption("remainChargeAmount") >= 0){
			refundInfos.show();
		}else{
			refundInfos.hide();
		}
	},
	changeMemberSimpleUpdate : function(we, isTel) {
		if (this._getElement("usePurchaserTelNumber") != undefined && this._getElement("usePurchaserTelNumber").attr("checked")) {
			alert("수신자 정보에 주문자 정보 자동 입력을 해제 후 변경하실 수 있습니다.");
			return;
		}

		var htUrls = this._getOption("urls");
		var sPageUrl = htUrls["user.front.myPage.simple.update"];
		var params = {"callbackFunction" : "nmp.front.order.order_sheet.callbackChangeMemberSimpleUpdate", "isTel" : isTel};
		nmp.openPopup(sPageUrl+"?"+jindo.$H(params).toQueryString(),["width=520", "height=240"]);
	},
	callbackChangeMemberSimpleUpdate : function(strResult) {
		var result = strResult.split("/");

		this._getElement("memberTelNumber").html(this.phoneNumberMasking(result[0]));
		this._setOption("memberTelNumber", this.phoneNumberMasking(result[0]));
		this._getElement("memberEmailAddress").html(this.emailMasking(result[1]));
	},
	changeMemberEmail : function(we) {
		var htUrls = this._getOption("urls");
		var sPageUrl = htUrls["user.front.email.update"];
		var params = {
			"windowType": "popup",
			"btnType": "close",
			"origin": location.protocol + "//" + location.host,
			"callbackFunctionName" : "nmp.front.order.order_sheet.callbackChangeMemberEmail"
		};
		nmp.openPopup(sPageUrl+"?"+jindo.$H(params).toQueryString(),["width=450", "height=650"]);
	},
	callbackChangeMemberEmail : function(event) {
		var sResult = event.data.content;
		var oThis = nmp.front.order.order_sheet;

		var aResult = sResult.split("/");
		if (oThis._getElement("memberEmailAddress") != undefined) {
			oThis._getElement("memberEmailAddress").html(oThis.emailMasking(aResult[0]));
		}
		oThis._clearUserInfoCache();
	},
	changeMemberCellphone : function(we) {
		if (this._getElement("usePurchaserTelNumber") != undefined && this._getElement("usePurchaserTelNumber").attr("checked")) {
			alert("수신자 정보에 주문자 정보 자동 입력을 해제 후 변경하실 수 있습니다.");
			return;
		}

		var htUrls = this._getOption("urls");
		var sPageUrl = htUrls["user.front.cellphone.update"];
		var params = {
			"windowType": "popup",
			"btnType": "close",
			"origin": location.protocol + "//" + location.host,
			"callbackFunctionName": "nmp.front.order.order_sheet.callbackChangeMemberCellphone"
		};

		nmp.openPopup(sPageUrl+"?"+jindo.$H(params).toQueryString(),["width=450", "height=650"]);
	},
	callbackChangeMemberCellphone : function(event) {
		var sResult = event.data.content;
		var oThis = nmp.front.order.order_sheet;

		var aResult = sResult.split("/");
		if (oThis._getElement("memberTelNumber") != undefined) {
			oThis._getElement("memberTelNumber").html(oThis.phoneNumberMasking(aResult[0]));
		}
		oThis._setOption("memberTelNumber", oThis.phoneNumberMasking(aResult[0]));
		oThis._updatePurchaserCellphoneInfoNoti(aResult[1]);
		oThis._clearUserInfoCache();
	},
	_updatePurchaserCellphoneInfoNoti : function(sResult) {
		this._getElementList("telNoNoti").hide();

		switch(sResult) {
			case "null":
			case "true":
				this._getElement("purchaserInfo").removeClass("case_overlap");
				this._getElement("purchaserInfo").removeClass("case_none_regist");
				this._getElement("telNoHighlight").removeClass("phone_num");

				this._getElement("telNoInfo").show();
				break;
			case "false":
				this._getElement("purchaserInfo").addClass("case_overlap");
				this._getElement("purchaserInfo").removeClass("case_none_regist");
				this._getElement("telNoHighlight").addClass("phone_num");

				this._getElement("telNoDuplicated").show();
				break;
		}
	},
	_clearUserInfoCache : function() {
		nmp.requestAjax("/orderSheetAjax/clearUserInfoCache", undefined, {
			method: "get",
			onload : $Fn(function(htResult) {
				if (htResult.bSuccess != true) {
					alert("회원 정보 상태 갱신에 실패하였습니다. 회원 정보를 다시 확인해주세요.");
				}
			}, this).bind(),
			onerror : function (res) {
				alert("회원 정보 상태 갱신에 실패하였습니다. 회원 정보를 다시 확인해주세요.");
			}
		});
	},
	phoneNumberMasking : function(phoneNumber) {
		var result = phoneNumber;
		if (phoneNumber != undefined) {
			var telNoArray = phoneNumber.split("-");
			for (var i = 0; i < telNoArray.length; i++) {
				if (telNoArray[i]) {
					if (i == 0) {
						result = telNoArray[i];
					} else {
						if (telNoArray[i].length == 3) {
							result = result + "-" + telNoArray[i].substring(0,1) + "**";
						} else {
							result = result + "-" + telNoArray[i].substring(0,1) + "**" + telNoArray[i].substring(telNoArray[i].length - 1,telNoArray[i].length);
						}
					}
				}
			}
		}
		return result;
	},
	emailMasking : function(email) {
		var result = email;
		if (email != undefined) {
			var emailArray = email.split("@");
			if (emailArray.length > 1) {
				var emailId = emailArray[0];
				var domainArray = emailArray[1].split(".");
				var emailService = this.replaceMasking(domainArray[0],2);
				var emailDotAfter = domainArray[1];
				if (emailId.length > 2) {
					result = emailId.substring(0,2) + "******@" + emailService + "." + emailDotAfter;
				} else {
					result = emailId + "******@" + emailService + "." + emailDotAfter;
				}
			}
		}
		return result;
	},
	replaceMasking : function(data, maskingStartIndex) {
		if (data != undefined && data.length > maskingStartIndex) {
			var maskingString = data.substring(maskingStartIndex, data.length);
			var maskingResult = data.substring(0, maskingStartIndex);
			for (var i=0; i < maskingString.length; i++) {
				maskingResult = maskingResult + "*";
			}
			return maskingResult;
		} else {
			return data;
		}
	},
	callbackAutoChargeNaverDon : function(htResult){
		$ElementList($$("._donAutoCharge")).hide();
		if(htResult["isRegister"]){
			var autoChageRegistElement = $Element($$.getSingle("._donAutoChargeRegist"));
			autoChageRegistElement.show();
			var statusText = "",settingText = "";
			var statusClassName = "";
			if(htResult["naverDonAutoChargeStatus"] == "ACTIVE"){
				$Element(autoChageRegistElement.query("._autoChargeStatusText")).removeClass("cashend");
				statusText = "이용 중";
				settingText = "변경";
				statusClassName = "cashing";
			}else if(htResult["naverDonAutoChargeStatus"] == "STOP"){
				$Element(autoChageRegistElement.query("._autoChargeStatusText")).removeClass("cashing");
				statusText = "정지 중";
				settingText = "해제";
				statusClassName = "cashend";
			}
			$Element(autoChageRegistElement.query("._autoChargeStatusText")).html(statusText);
			$Element(autoChageRegistElement.query("._autoChargeStatusText")).addClass(statusClassName);
			$Element(autoChageRegistElement.query("._autoChargeSettingText")).html(settingText);
		}else{
			$Element($$.getSingle("._donAutoChargeNoRegist")).show();
		}
	},
	checkFirstNumber : function(we, nIndex){
		var isExistsRestrictedNumber = false;
		var _aBlankTelNo = $A();

		var elFirstTelNo1 = this._getElement("allAddressArea").query("select[name=deliveryAddress.telNo1___1]");
		var elFirstTelNo2 = this._getElement("allAddressArea").query("select[name=deliveryAddress.telNo2___1]");
		var aFirstTelNos = [elFirstTelNo1, elFirstTelNo2];

		$A(aFirstTelNos).forEach($Fn(function(el){
			if(this._getOption("restrictedReliefNumberList").has(el.value)){
				isExistsRestrictedNumber = true;
				$A.Break();
			}
			if( el.value == "" ){
				var tempTelNo="";
				$A($$("input",el.parentNode)).forEach(function(el){
					tempTelNo += el.value;
				});
				if(tempTelNo != ""){
					isExistsRestrictedNumber = true;
				}else{
					_aBlankTelNo.push(tempTelNo);
				}
			}
		}, this).bind());

		var isAllBlank = false;
		if(_aBlankTelNo.length() == 2){
			isAllBlank = true;
		}

		var reliefPhoneNumberUseYn = $$.getSingle("._reliefPhoneNumberUseYn");
		if(reliefPhoneNumberUseYn == undefined){
			return;
		}
		if(isExistsRestrictedNumber || isAllBlank){
			if(reliefPhoneNumberUseYn.value == "true"){
				alert("선택하신 국번은 안심번호 이용신청이 불가합니다. 안심번호 사용신청이 취소됩니다.");
			}
			reliefPhoneNumberUseYn.value = false;
			$A(this._htInstance["aReliefPhoneNumberCheckBox"]).forEach(function(v) {
				v.setChecked(false);
				v.disable();
			});
		}else{
			if (we != undefined && nIndex != undefined) {
				reliefPhoneNumberUseYn.value = $$.getSingle("._reliefPhoneNumberCheckbox_" + nIndex).checked;
			}
			$A(this._htInstance["aReliefPhoneNumberCheckBox"]).forEach(function(v) {
				v.enable();
			});
		}
	},
	showLatestDeliveryMemo : function(htEvent, itemId, sTargetElementName) {
        var welLatestDeliveryMemoes = this._getElement("latestDeliveryMemoes");
        if(welLatestDeliveryMemoes.visible()){
            nmp.layer.hide(welLatestDeliveryMemoes);
            return;
        }

        var elTargetElement = htEvent.element;
		if (sTargetElementName != undefined) {
			if (elTargetElement.tagName == "SPAN") {
				elTargetElement = elTargetElement.parentElement;
			}
			elTargetElement = $Element(elTargetElement.parentElement).query("." + sTargetElementName);
		}

		var elLayerHtml = $Template(this._getElement("latestDeliveryMemoTemplate").html()).process({"itemId" : itemId});

		welLatestDeliveryMemoes.width($Element(elTargetElement).width() - 8);
		welLatestDeliveryMemoes.html(elLayerHtml);

		nmp.layer.show(welLatestDeliveryMemoes, elTargetElement, {
			"sPosition" : "outside-bottom",
			"sAlign" : "left",
			"nTop" : 0,
			"bAuto" : false
		});

		htEvent.stopBubble();
		elTargetElement.focus();
	},
	applyLatestDeliveryMemo : function(htEvent, itemId) {
		var welTargetMemo = null;
		if (itemId == "") {
			welTargetMemo = this._getElement("deliveryMemo");
		} else {
			welTargetMemo = $Element($$.getSingle("input[name=deliveryMemos\\." + itemId + "]"));
		}
		var elMemo = null;
		switch (htEvent.element.tagName.toLowerCase()) {
			case "span":
				elMemo = htEvent.element;
				break;
			case "em":
				elMemo = $Element(htEvent.element.parentElement).query("span._deliveryMemo");
				break;
			default:
				elMemo = $Element(htEvent.element).query("span._deliveryMemo");
		}

		welTargetMemo.attr("value", $S(elMemo.innerHTML).unescapeHTML());
		welTargetMemo.fireEvent("focus");
		welTargetMemo.fireEvent("blur");
		nmp.layer.hide();
	},
	trimCardName : function(sCardName) {
		if (sCardName == undefined) {
			return "";
		}

		return sCardName.replace("카드", "");
	},
	inputPurchserTelNumber : function(we) {
		var isAutoInput = (we.element.tagName == "SPAN") ? $Element(we.element.parentElement).query("input").checked : we.element.checked;
		var prefixElementClassName = "_group_tel1_";
		if(isAutoInput){
			this._htInstance[prefixElementClassName +1].disable();
			this._getElement("deliveryInfos").query("."+prefixElementClassName + 2).disabled = true;
			this._getElement("deliveryInfos").query("."+prefixElementClassName + 3).disabled = true;

			this.insertSplitDeliveryInfo(prefixElementClassName,this._getOption("memberTelNumber"), 3);
		}else{
			this._htInstance[prefixElementClassName +1].enable();
			this._getElement("deliveryInfos").query("."+prefixElementClassName + 2).disabled = false;
			this._getElement("deliveryInfos").query("."+prefixElementClassName + 3).disabled = false;

			this.insertSplitDeliveryInfo(prefixElementClassName,"010-", 3);
		}
	},
	showDimmedLayer : function(htEvent, sLayerName) {
		var screenWidth = 0;
		var screenHeight = 0;
		var scrollTop=0;
		var elTempLayer = $$.getSingle("._tempLayer");
		if(window.innerHeight){				// IE외 브라우저
			screenWidth = window.innerWidth + "px";
			screenHeight = window.innerHeight + "px";
		}else{// IE
			screenWidth = document.body.clientWidth + "px";
			screenHeight = document.body.clientHeight + "px";
		}

		if(typeof pageYOffset!= 'undefined'){
			// most browsers
			scrollTop= pageYOffset;
		}
		else{
			var B= document.body; // IE 'quirks'
			var D= document.documentElement; // IE with doctype
			D= (D.clientHeight)? D: B;
			scrollTop = D.scrollTop;
		}
		scrollTop += "px";

		$Element(elTempLayer).css(
			{
				width : screenWidth,
				height : screenHeight,
				position : "absolute",
				left : "0px",
				top : scrollTop,
				display : "block"
			});

		var welDimmedLayer = this._getElement("dimmedLayer");
		welDimmedLayer.html($$.getSingle("." + sLayerName).innerHTML);
		nmp.showLayer(welDimmedLayer.$value(), elTempLayer, {
			sPosition : "inside-center",
			bAuto : true,
			bShowDimmedLayer : true
		});
		htEvent.stop();
	},
	closeDimmedLayer : function(htEvent, sLayerName) {
		nmp.hideLayer();
		$$.getSingle("._tempLayer").style.display="none";
	},
	onToggleAllAgree : function(htEvent) {
		var bAgreed = this._htInstance["rdAllAgree"].getChecked();
		this._htInstance["waAgreeCheckBox"].forEach(function(v) {
			v.setChecked(bAgreed);
		});

		if (htEvent != undefined && nmp.front.order.order_sheet.storage != undefined) {
			nmp.front.order.order_sheet.storage.saveOrderInfo();
		}
	},
	checkAllAgreed : function(htEvent) {
		var aAgreeBtn = $A(this._getElementList("agreeButtons", true));
		var bAllNotAgreed = aAgreeBtn.every(function(v) {
			return !nmp.front.order.ui.isElementVisible(v) || !v.checked;
		});

		var bAllAgreed = aAgreeBtn.every(function(v) {
			return !nmp.front.order.ui.isElementVisible(v) || v.checked;
		});

		// 전체동의 상태가 click 이벤트가 아닌 스크립트에 의해 변경될 경우 form data를 수동으로 저장해줌 (복구 시 필요)
		if (bAllAgreed != this._htInstance["rdAllAgree"].getChecked() || bAllNotAgreed) {
			this._htInstance["rdAllAgree"].setChecked(bAllAgreed);

			// 결제수단을 변경할 경우 동의 개수가 달라져도, 전체동의에 체크가 되면 유저가 직접 체크하지 않은 동의도 체크하도록 함 (언체크도 마찬가지)
			if (bAllAgreed || bAllNotAgreed) {
				this.onToggleAllAgree();
			}

			if (nmp.front.order.order_sheet.storage != undefined) {
				nmp.front.order.order_sheet.storage.saveOrderInfo();
			}
		}
	},
	changeOverseaDeliveryCustomType : function(htEvent) {
		var bVisibleIndv;
		var elTarget = (htEvent.element.tagName == "SPAN") ? $Element(htEvent.element.parentElement).query("input:checked") : htEvent.element;
		if (elTarget.value == "INDIVIDUAL_CUSTOM_UNIQUE_CODE") {
			bVisibleIndv = true;
			this._getElement("individualCustomUniqueCode").attr("disabled", null);
		} else {
			bVisibleIndv = false;
			this._getElement("individualCustomUniqueCode").attr("disabled", "disabled");
		}

		$A(this._getElement("root").queryAll("._overseaIndv")).forEach(function(v) {
			$Element(v).visible(bVisibleIndv);
		});
		$A(this._getElement("root").queryAll("._overseaNa")).forEach(function(v) {
			$Element(v).visible(!bVisibleIndv);
		});
	},
	openPopupIndividualCustomUniqueCode : function(htEvent) {
		nmp.openPopup("/orderSheetPopup/individualCustomUniqueCodeIssue", ["width=420", "height=366"], "individualCustomUniqueCodeIssue");
	},
	toggleLotNumberAddress : function() {
		var sLotNumberAddress = $$.getSingle("input[name=deliveryAddress.lotNumberAddress]").value;
		var bRoadNameAddressYn = ("true" == $$.getSingle("input[name=deliveryAddress.roadNameAddressYn]").value);

		if(bRoadNameAddressYn && $S(sLotNumberAddress).trim().$value() != ""){
			if(this._getElement("root").query("p.lotNumberAddress")){
				$Element(this._getElement("root").query("p.lotNumberAddress")).html("지번 : " + sLotNumberAddress);
			}
		}else{
			if(this._getElement("root").query("p.lotNumberAddress")){
				$Element(this._getElement("root").query("p.lotNumberAddress")).html("");
			}
		}
	},
	showDeliveryPlaceDirectInput : function(htEvent, rowId) {
		this.editDeliveryInfo();

		var reliefPhoneNumberUseYn = $$.getSingle("._reliefPhoneNumberUseYn");
		if(reliefPhoneNumberUseYn != undefined){
			reliefPhoneNumberUseYn.value = false;
		}

		this.changeDeliveryPlace(undefined, undefined, "true");

		if(nmp.front.order.order_sheet.storage){
			nmp.front.order.order_sheet.storage.saveOrderInfo();
		}
	},
	showDeliveryInfo : function(htEvent, rowId, bBaseAddressYn) {

		this._getElement("allAddressArea").hide();
		$A(this._getElementList("deliveryPlaces", true)).forEach(function(v) {
			$Element(v).hide();
		});

		$Element(this._getElement("root").query("._deliveryPlaces_" + rowId)).show();

		var reliefPhoneNumberUseYn = $$.getSingle("._reliefPhoneNumberUseYn");
		if(reliefPhoneNumberUseYn != undefined){
			reliefPhoneNumberUseYn.value = false;
		}

		$A(this._htInstance["aReliefPhoneNumberCheckBox"]).forEach(function(v) {
			v.setChecked(false);
		});

		this._getElement("deliveryMemoHeader").hide();
		this._getElement("deliveryMemoOuter").removeClass("deliver_option_wrap deli_comments");
		this._getElement("deliveryMemoInner").removeClass("deliver_option");

		this.changeDeliveryPlace(undefined, rowId, "true");

		if(nmp.front.order.order_sheet.storage){
			nmp.front.order.order_sheet.storage.saveOrderInfo();
		}
	},
	editDeliveryInfo : function(htEvent) {
		if (this._htInstance["rdNewAddress"] != undefined) {
			this._htInstance["rdNewAddress"].setChecked(true);
		}

		$A(this._getElementList("deliveryPlaces", true)).forEach(function(v) {
			$Element(v).hide();
		});

		$A(this._htInstance["aReliefPhoneNumberCheckBox"]).forEach(function(v) {
			v.setChecked(false);
		});

		this._getElement("allAddressArea").show();
		this._getElement("deliveryMemoHeader").show();
		this._getElement("deliveryMemoOuter").addClass("deliver_option_wrap deli_comments");
		this._getElement("deliveryMemoInner").addClass("deliver_option");
	},
	removeDeliveryInfo : function(htEvent, rowId, orderDeliveryAddrNo) {
		if (confirm('최근 배송지를 삭제하시겠습니까?')) {
			var target = this._getElement("root").query("#recentDeliveryPlace_" + rowId);

			nmp.requestAjax("/orderSheetAjax/requestRemoveRecentDeliveryInfo", {
				"orderDeliveryAddrNo": orderDeliveryAddrNo
			}, {
				method: "post",
				onload : $Fn(function() {
					/*삭제 하려고 하는 배송지가 선택되어 있을 경우 기본 배송지 선택 후 삭제*/
					if (target.checked) {
						$$.getSingle("._baseDeliveryInfo span").click();
						nmp.front.order.order_sheet.showDeliveryInfo(null, 0, true);
					}
					var removeElement = htEvent.element.parentElement;
					removeElement.parentElement.removeChild(removeElement);

                    this._hideRecentDeliveryAddressAreaOrBtn();
				}, this).bind(),
				onerror : function (res) {
					alert("다시 시도해 주세요");
				}
			});
		}
	},
    _hideRecentDeliveryAddressAreaOrBtn: function () {
        var welRecentDeliveryAddressArea = this._getElement("recentDeliveryAddressArea");
        var elRecentDeli = welRecentDeliveryAddressArea.query(".recent_deli");

        // legacy 구분
        if (elRecentDeli != null) {
            var recentDeliveryAddressLength = $Element(elRecentDeli).queryAll("a").length;

            if (recentDeliveryAddressLength === 5) {
                var welMoreRecentDeliveryBtn = $Element(welRecentDeliveryAddressArea.query(".recent_deli_more"));
                welMoreRecentDeliveryBtn.hide();
            } else if (recentDeliveryAddressLength <= 0) {
                welRecentDeliveryAddressArea.hide();
            }
        } else {
            if (welRecentDeliveryAddressArea.queryAll("li").length <= 0) {
                welRecentDeliveryAddressArea.hide();
            }
        }
    },
	showLayerReviewMileage : function(htEvent) {
		var elLayerHtml = $Template(this._getElement("reviewMileageLayerTemplate").html()).process(this._htInstance["reviewMileageMap"]);

		var welNstampFeeLayer = this._getElement("reviewMileageLayer");
		$Element(welNstampFeeLayer.query("._content")).html(elLayerHtml);

		// N stamp 레이어의 노출 기준 element 는 부모 엘리먼트(li) 위치의 왼쪽으로 정함
		var baseElement = htEvent.element;
//		if (baseElement.parentElement != undefined) {
//			baseElement = baseElement.parentElement;
//		}
		// 웹접근성 관련 처리를 위해 위와같이 기준 element 를 변경시키면 안됨.
		// TODO[minsu.hwang] 부모 엘리먼트(li) 위치로 rePositioning 하는 코드 추가 예정.

		nmp.layer.show(welNstampFeeLayer, baseElement, {
			"sPosition" : "outside-bottom",
			"sAlign" : "left",
			"nTop" : 0,
			"bAuto" : false
		});
	},
	showLayerCardBenefit : function(htEvent) {
		htCardBenefits = {}
		htCardBenefits["cardName"] = this._getSelectedEasyPayCardName();
		htCardBenefits["cardImageUrl"] = this._getSelectedEasyPayCardImageUrl();
		htCardBenefits["remainedCardBenefitAmount"] = this._getSelectedEasyPayCardBenefitResidualAmount();

		var elLayerHtml = $Template(this._getElement("cardBenefitLayer").html()).process(htCardBenefits);
		this._getElement("root").appendHTML(elLayerHtml);

		var welCardBenefitContents = $Element($$.getSingle("._cardBenefitContents"));
		welCardBenefitContents.css("top", (this._getScrollTop() + (window.innerHeight - welCardBenefitContents.height()) / 4) + "px");
	},
	hideLayerCardBenefit : function (htEvent) {
		var welCardBenefitContents = $Element($$.getSingle("._cardBenefitContents"));
		var welCardBenefitContentsDimmed = $Element($$.getSingle("._cardBenefitContentsDimmed"));
		welCardBenefitContents.leave();
		welCardBenefitContentsDimmed.leave();
	},
	_changePayMethodAndActivateFlick : function (sType) {
		if (sType == 'Bank' && this.isAllEasyBankUnderMaintenance()) {
			return;
		}

		var sFlickingInstanceName = "easyPay" + sType + "Flicking";

		if (this._htInstance[sFlickingInstanceName] == null) {
			this._htInstance[sFlickingInstanceName] = this._initPreviewFlick(sType);
		} else if (this._htInstance[sFlickingInstanceName] != null) {
			var currentIndex = this._htInstance[sFlickingInstanceName].getContentIndex();

			this._htInstance[sFlickingInstanceName].refresh(0);
			this._htInstance[sFlickingInstanceName].resize();
			this._htInstance[sFlickingInstanceName].refresh(currentIndex);
		}
		// 결제수단 변경 시 Flick 띄울 때, 무이자 PLCC 뱃지 노출
		if (nmp.front.order.order_sheet.integration_cart.isInitialized()) {
			nmp.front.order.order_sheet.integration_cart.changeLongFreeInterestBadge();
		}
	},

	/* 포인트 충전결제 탭 클릭 이벤트 핸들러 */
	changeChargePointPaymentTab: function(htEvent) {

		// 후불결제 사용중인 경우, 충전결제 탭 활성화 방지
		if(this._getPayLater().isChecked()) {
			this.showDimmedLayerUnableChargePoint();
			return
		}

		// 충전가능금액 1만원 미만인 경우 레이어 노출
		if(!this._getChargePoint().validateMinimumAvailableChargePoint()){
			this.showDimmedLayerRemainChargeAmountShortage();
			return;
		}

		// 현재 선택되어 있는 주결제수단탭 object
		var oCurrentCheckedGeneralPayMethodTab = this.getCurrentCheckedGeneralPayMethodTab();

		if(this.isPayMethodUiSingleMode()) {
			// 포인트 충전결제가 이미 선택되어 있는 case
			if(this._getChargePoint().isChecked()){
				return;
			}

			// 복수모드 변경이 필요한 case
			if(oCurrentCheckedGeneralPayMethodTab && this.isMultipleModeCommonCondition()) {
				this.showDimmedLayerGeneralPayMethodAutoChoice();
				return;
			}

			// 충전결제만 선택된 UI로 변경
			this.clearGeneralPayMethodTabs();
			this.changePaymentTabSelection("chargePoint");
			this.calculateTotalPrice(null, null, "CHARGE_POINT", this._getChargePoint().isAllBankUnderMaintenance());
		} else {
			// 복수모드인 경우 -> 싱글모드 + 복수모드중 선택되어있는 주결제수단으로 UI 변경
			this.chargePoint().clear();
			this.changeToSingleUiMode(oCurrentCheckedGeneralPayMethodTab || this._htInstance["offPayMethodTab"]);
			this.changePaymentByPayMethod(this.getPayMethod());
			this.calculateTotalPrice(null, null, null, true);
		}
	},

	/* 결제수단 탭 클릭 이벤트 핸들러 */
	changePaymentTab : function (htEvent, sTab) {

		// 복수모드이고, 현재 선택된 주결제수단탭과 동일한 탭이 클릭된경우
		if(!this.isPayMethodUiSingleMode() && this.getCurrentCheckedGeneralPayMethodTabId() ==  sTab){
			this.offPayMethodTab(sTab);
			return;
		}

		// 싱글모드이고, 포인트충전결제수단에서 주결제수단으로 변경하는 case
		if(this.isPayMethodUiSingleMode() && this._getChargePoint().isChecked()){
			this.changeFromChargePointToGeneralPaymentTab(sTab);
		}

		// 탭 초기화
		this.clearGeneralPayMethodTabs();
		switch (sTab) {
			case "naverPaymentsCard":
				this.cardEasyPayTab().markRadio();
				this.cardEasyPayTab().showOpenArea();
				this._changePayMethodAndActivateFlick("Card");
				this.changePayment(null, this._getSelectedEasyPayElement());
				break;
			case "naverPaymentsBank":
				this.bankEasyPayTab().markRadio();
				this.bankEasyPayTab().showOpenArea();
				this._changePayMethodAndActivateFlick("Bank");
				this.changePayment(null, this._getSelectedEasyPayElement());
				break;
			case "generalPayments":
				var oCheckedGeneralPayMeansClassRadio = this.generalPayTab().initPayMeansClass();
				this.changePayment(null, oCheckedGeneralPayMeansClassRadio.getInput());

				if ((this._getOption("orderClass") == "INTEGRATION_CART" || this._getOption("isForcedBillingPayment")) && nmp.front.order.order_sheet.getPayMethod() == "CREDIT_CARD") {
					nmp.front.order.order_sheet.integration_cart.changeCompanyTypeCode(undefined, "");
				}
				break;
		}

		this._changePriceInfoView();
		this.checkPossibleInstallment();
		this._setGeneralPayAmountOnPaymentsArea(this.getGeneralPayAmount());

		this._htInstance["previousClickedPaymentTabId"] = sTab;
	},

	/* 포인트충전결제 -> 주결제수단 으로 변경하는 case 처리 */
	changeFromChargePointToGeneralPaymentTab: function(sTab) {

		// 포인트 결제수단 초기화
		this.chargePoint().clear();
		this.generalPayTab().clearPayMeansClassPointInput();

		// 선택된 주결제수단 세팅
		var oTab = this.getPayMethodTabObject(sTab);
		oTab.markRadio();
		oTab.showOpenArea();

		this.calculateTotalPrice(null, null, null, true);
	},

	/* 복수모드에서 주결제수단 Off 처리 */
	offPayMethodTab: function(sTab) {
		var oTab = this.getPayMethodTabObject(sTab);
		oTab.clearCheckBox();
		oTab.hideOpenArea();
		this.changePaymentByPayMethod("POINT");
		this._changePriceInfoView();
		this.checkPossibleInstallment();
		this._setGeneralPayAmountOnPaymentsArea(0);

		//off 처리된 주결제수단 저장
		this._htInstance["offPayMethodTab"] = oTab;
	},

	/* 결제수단 탭 UI 변경 */
	changePaymentTabSelection : function (sTab) {

		// [단일,복수모드 마킹 + 펼침영역 제어]
		if(this.isPayMethodUiSingleMode()) { // 단일모드
			this.clearGeneralPayMethodTabs();
			var oCheckedPayMethodTab = this.getPayMethodTabObject(sTab);
			oCheckedPayMethodTab.markRadio();
			oCheckedPayMethodTab.showOpenArea();
		} else { // 복수모드
			if(sTab !== "chargePoint") {
				var oCheckedPayMethodTab = this.getPayMethodTabObject(sTab);
				oCheckedPayMethodTab.markCheckBox();
				oCheckedPayMethodTab.showOpenArea();
				this._getChargePoint().markCheckBox();
				this._getChargePoint().showOpenArea();
			}
		}

		// 카드 할인 혜택 문구 숨기기
		if (this._getElement("cardBenefitInfo") != undefined) {
			this._getElement("cardBenefitInfo").hide()
		}
		// 일반 결제 펼침 영역 숨기기
		if (this._getElement("generalPaymentsList") != undefined) {
			this._getElement("generalPaymentsList").hide();
		}
		// 결제수단 title 오른쪽 "간편카드/계좌 설정" 문구 숨기기
		if (this._getElement("changeEasyPayInfoNotice") != undefined) {
			this._getElement("changeEasyPayInfoNotice").hide();
		}

		// 선택된 결제수단별 부가정보 노출
		switch (sTab) {
			case "naverPaymentsBank":
			case "naverPaymentsCard":
				if (this._getElement("changeEasyPayInfoNotice") != undefined && this._getElement("paymentsArea").visible()) {
					this._getElement("changeEasyPayInfoNotice").show();
				}
				break;
			case "generalPayments":
				if (this._getElement("generalPaymentsList") != undefined) {
					this._getElement("generalPaymentsList").show();
				}
				break;
		}
	},
	isGeneralPayMethodTabChecked : function () {
		return this.bankEasyPayTab().isChecked() || this.cardEasyPayTab().isChecked() || this.generalPayTab().isChecked();
	},
	/* 주결제수단 탭 초기화(radio/check/펼침영역 초기화/input checked false) */
	clearGeneralPayMethodTabs: function () {
		// 단일모드(radio), 복수모드(checkbox) 모두 초기화
		$ElementList(this._getElement("root").queryAll("._payMethodRadio input[name=payMethod]")).attr("checked", false);
		$ElementList(this._getElement("root").queryAll("._payMethodRadio ._radioMarker")).removeClass("radio-checked");
		$ElementList(this._getElement("root").queryAll("._payMethodCheckBox ._checkboxMarker")).removeClass("checkbox-checked");

		// 일반결제 모든 결제유형 초기화
		this.generalPayTab().clearAllPayMeansClass();

		// 결제수단 펼침 영역 모두 초기화(숨기기)
		$A(this.getPayMethodTabObjectList()).forEach(function (oTab) {
			oTab.hideOpenArea();
		});
	},
	/* 싱글모드 UI 변경 */
	changeToSingleUiMode: function (oPayMethodTab) {
		// 결제수단 초기화
		this.clearGeneralPayMethodTabs();
		// 싱글모드 UI 변경
		this.switchPayMethodUiToSingleMode();
		// 주결제수단 marking + 펼침영역 open
		if(oPayMethodTab) {
			oPayMethodTab.markRadio();
			oPayMethodTab.showOpenArea();
		}
	},
	/* 복수모드 UI 변경 */
	changeToMultipleUiMode: function (currentCheckedGeneralPayMethodTab) {
		// 결제수단 초기화
		this.clearGeneralPayMethodTabs();
		// 복수모드 UI 변경
		this.switchPayMethodUiToMultipleMode();
		// 충전결제 marking/open
		this._getChargePoint().markCheckBox();
		this._getChargePoint().showOpenArea();
		// 주결제수단 marking/open
		if(currentCheckedGeneralPayMethodTab) {
			currentCheckedGeneralPayMethodTab.markCheckBox();
			currentCheckedGeneralPayMethodTab.showOpenArea();
		}
	},
	/* 복수모드 전환 조건 충족 여부 반환 */
	isMultipleModeCommonCondition: function() {
		// 결제금액 > 충전가능금액,
		// 등록된 계좌 존재하고,
		// 은행이 전체점검중이 아니고,
		// 결제가능계좌 존재하는 case
		return (this._getGeneralPayAmountExceptUsePointAfterCharge() > this._getChargePoint().getRemainChargeAmount())
			&& !this._getChargePoint().isEmptyBankList()
			&& !this._getChargePoint().isAllBankUnderMaintenance()
			&& this._getOption('hasPayableBank')
	},
	/* 결제수단 단일모드 여부 반환 */
	isPayMethodUiSingleMode: function() {
		var waPayMethodRadio = $ElementList(this._getElement("root").queryAll("._payMethodRadio")).$value();

		var hasOneVisiblePayMethodRadio = $A(waPayMethodRadio).some(function(wel){
			return wel.visible();
		});

		return hasOneVisiblePayMethodRadio ? true : false;
	},
	/* 결제수단 단일모드 UI 변경 */
	switchPayMethodUiToSingleMode: function() {
		this._getChargePoint().switchToRadioBoxUI();
		this.bankEasyPayTab().switchToRadioBoxUI();
		this.cardEasyPayTab().switchToRadioBoxUI();
		this.generalPayTab().switchToRadioBoxUI();
	},
	/* 결제수단 복수모드 UI 변경 */
	switchPayMethodUiToMultipleMode: function() {
		this._getChargePoint().switchToCheckBoxUI();
		this.bankEasyPayTab().switchToCheckBoxUI();
		this.cardEasyPayTab().switchToCheckBoxUI();
		this.generalPayTab().switchToCheckBoxUI();
	},
	/* 주결제수단 등록상태별 복수선택모드에 선택될 주결제수단 반환 */
	getGeneralPayMethodTabIdForMultipleMode: function() {

		if(this._htInstance["previousClickedPaymentTabId"]) {
			return this._htInstance["previousClickedPaymentTabId"];
		}

		if(this._getOption("hasRegisteredEasyCard") && this.cardEasyPayTab().hasBaseArea()) {
			return "naverPaymentsCard"
		} else if(this._getOption("hasRegisteredEasyBank") && this.bankEasyPayTab().hasBaseArea()) {
			return "naverPaymentsBank";
		}

		return "generalPayments";
	},
	/* 결제수단 tab 오브젝트 반환 */
	getPayMethodTabObject: function (sTab) {
		switch (sTab) {
			case "chargePoint": return this._getChargePoint();
			case "naverPaymentsBank": return this.bankEasyPayTab();
			case "naverPaymentsCard": return this.cardEasyPayTab();
			case "generalPayments": return this.generalPayTab();
			default: return null;
		}
	},
	/* 존재하는 결제수단 tab 리스트 반환 */
	getPayMethodTabObjectList: function() {
		var aTabObjects = [this._getChargePoint(), this.bankEasyPayTab(), this.cardEasyPayTab(), this.generalPayTab()];
		var aExistTabObjects = $A(aTabObjects).filter(function(oTabObject){
			return oTabObject.hasBaseArea();
		});
		return aExistTabObjects;
	},
	/* 현재 선택되어있는 주결제수단 tab id 반환 */
	getCurrentCheckedGeneralPayMethodTabId: function () {
		var oCurrentCheckedGeneralPayMethodTab = this.getCurrentCheckedGeneralPayMethodTab();
		return oCurrentCheckedGeneralPayMethodTab ? oCurrentCheckedGeneralPayMethodTab.getTabId() : null;
	},
	/* 현재 선택되어있는 주결제수단 tab 오브젝트 반환 */
	getCurrentCheckedGeneralPayMethodTab: function () {
		var oCurrentCheckedGeneralPayMethodTab = null;
		var aPayMethodTabs = [this.bankEasyPayTab(), this.cardEasyPayTab(), this.generalPayTab()];
		$A(aPayMethodTabs).forEach(function(payMethodTab){
			if(payMethodTab.isChecked()){
				oCurrentCheckedGeneralPayMethodTab = payMethodTab;
				$A.Break();
			}
		});

		return oCurrentCheckedGeneralPayMethodTab;
	},
	/* 디폴트 결제수단에 있는 주결제수단 tab 오브젝트 반환 */
	getDefaultGeneralPayMethodTab: function () {
		var sDefaultPayMethod = this._getDefaultPaymentInfo()
		var nEasyPayYn = this._getOption("defaultPaymentInfo")["easyPayYn"];
		switch (sDefaultPayMethod) {
			case "CREDIT_CARD" && nEasyPayYn: return this.cardEasyPayTab();
			case "BANK" && nEasyPayYn : return this.bankEasyPayTab();
			default: return this.generalPayTab();
		}
	},
	getInstallmentCodeSelectBox : function() {
		if (!this.cardEasyPayTab().hasBaseArea()) {
			return this._htInstance["sbInstallmentCode"];
		}

		return (this.cardEasyPayTab().isChecked() && this._getSelectedEasyPayCardElement() != undefined) ? $Element($Element(this._getElement("root").query("._easyPayCardInfoArea")).query("select")) : this._htInstance["sbInstallmentCode"];
	},
	getCardCodeList : function() {
		return this._htInstance["sbCardCodeList"];
	},
	_getImagedNumberFormatHtml : function(nNumber) {
		var sNumber = nNumber + "";
		var sResult = "";
		for (var n = 0; n < sNumber.length; n++) {
			if (n > 0 && ((sNumber.length - n) % 3) == 0) {
				sResult += "<em class=\"comma\">,</em> ";
			}
			sResult += "<em class=\"n" + (parseInt(sNumber.charAt(n))) + "\">" + (parseInt(sNumber.charAt(n))) + "</em> ";
		}
		return sResult + "<span class=\"txt\">원</span>";
	},
	changeIndividualCustomUniqueCode : function(htEvent) {
		$ElementList(this._getElementList("individualCustomUniqueCodeInput", true)).show();
		this._getElement("individualCustomUniqueCodeSaved").hide();
		$A(this._getElement("root").queryAll("._overseaIndv")).forEach(function(v) {
			$Element(v).visible(true);
		});
		if (this._htInstance["chkIndividualCustomCode"] != undefined) {
			this._htInstance["chkIndividualCustomCode"].setChecked(false);
		}
	},
	changeCashReceiptInfo : function(htEvent) {
		$Element($$.getSingle("._cashReceiptTemplate")).show();
		var weReceiptLayer = $Element($$.getSingle("._cashReceiptInputArea"));
		$ElementList((weReceiptLayer).queryAll("input,select")).attr("disabled",false);

		if (this._getElement("socialNumberSecond") != undefined) {
			this._getElement("socialNumberSecond").attr("value", "");
		}

		this._getElement("cashReceiptInfoSaved").leave();
		this._resetElement();
	},
	setFdsUuid : function(sFdsUuid) {
		this._getElement("fdsUuid").attr("value", sFdsUuid);
	},
	setNaverToken : function(sNaverToken) {
		this._getElement("naverToken").attr("value", sNaverToken);
	},
	setAuthentificationToken : function(sAuthentificationToken) {
		this._getElement("authentificationToken").attr("value", sAuthentificationToken);
	},
	setAuthentificationLevel : function(sAuthentificationLevel) {
		this._htInstance["authentificationLevel"] = sAuthentificationLevel;
	},
	getAuthentificationLevel : function(sAuthentificationLevel) {
		return this._htInstance["authentificationLevel"];
	},
	isSelectedEasyPayBankPayable : function (sPayMethod) {
		if (this._isEasyPayBank(sPayMethod)) {
			var elEasyPayBankElement = this._getSelectedEasyPayBankElement();
			var welEasyPayBankElement = $Element(elEasyPayBankElement);

			return !welEasyPayBankElement.hasClass("disabled");
		}

		return false;
	},
	isAllEasyBankUnderMaintenance : function () {
		var welPaymentsBankTab = $Element(this._getElement("root").query("._naverPaymentsBank"));
		var welAllEasyBankUnderMaintenanceArea = welPaymentsBankTab.query("._allEasyBankUnderMaintenanceArea");
		return (welAllEasyBankUnderMaintenanceArea != undefined);
	},
	isAllChargePointBankUnderMaintenance : function () {
		return this._getChargePoint().isAllBankUnderMaintenance();
	},
	_isCardBenefitIncluded : function () {
		var flag = false;
		var welPaymentsCardTab = $Element(this._getElement("root").query("._naverPaymentsCard"));

		if (welPaymentsCardTab != undefined) {
			$A(welPaymentsCardTab.queryAll("._payMeansClass")).forEach(function (v) {
				if (v.getAttribute("benefitCardYn")  == "true" && v.getAttribute("rewardRate") != "0"){
					flag = true;
					$A.Break();
				}
			});
		}

		return flag;
	},
	_getSelectedEasyPayElement : function () {
		var elEasyPayElement;

		if (this._isOpenedCardTab()) {
			elEasyPayElement = this._getSelectedEasyPayCardElement();
		} else if (this._isOpenedBankTab()) {
			elEasyPayElement = this._getSelectedEasyPayBankElement();
		}

		return elEasyPayElement;
	},
	_getSelectedEasyPayCardElement : function () {
		var elEasyPayCardElement;
		var welPaymentsBankTab = $Element(this._getElement("root").query("._naverPaymentsCard"));

		$A(welPaymentsBankTab.queryAll("._payMeansClass")).forEach(function (v) {
			if ($Element(v).hasClass('selected')) {
				elEasyPayCardElement = v;
				$A.Break();
			}
		});

		return elEasyPayCardElement;
	},
	_getSelectedEasyPayBankElement : function () {
		var elEasyPayBankElement;
		var welPaymentsBankTab = $Element(this._getElement("root").query("._naverPaymentsBank"));

		$A(welPaymentsBankTab.queryAll("._payMeansClass")).forEach(function (v) {
			if ($Element(v).hasClass('selected')) {
				elEasyPayBankElement = v;
				$A.Break();
			}
		});

		return elEasyPayBankElement;
	},
	_getSelectedEasyCardProductCode : function () {
		return this._getSelectedEasyPayCardElement().getAttribute("data-card-product-code");
	},
	_getSelectedEasyCardIsLongTermInstallment : function () {
		return this._getSelectedEasyPayCardElement().getAttribute("data-is-long-term-installment") == 'true';
	},
	_getSelectedEasyPayCardCode : function () {
		var elEasyPayCardElement = this._getSelectedEasyPayCardElement();
		var sCardCode = elEasyPayCardElement.getAttribute("data-code");

		return sCardCode;
	},
	_getSelectedEasyPayBankCode : function () {
		var elEasyPayBankElement = this._getSelectedEasyPayBankElement();
		var sBankCode = elEasyPayBankElement.getAttribute("data-code");

		return sBankCode;
	},
	_getSelectedEasyPayCKey : function (sPayMethod) {
		var sAccountKey;
		if (this._isEasyPayCreditCard(sPayMethod)) {
			sAccountKey = this._getSelectedEasyPayCardElement().getAttribute("data-card-key");
		} else if (this._isEasyPayBank(sPayMethod)) {
			sAccountKey = this._getSelectedEasyPayBankElement().getAttribute("data-account-key");
		}
		return sAccountKey;
	},
	_getSelectedEasyPayBankbookCode : function () {
		return this._getSelectedEasyPayBankElement().getAttribute("data-pay-bankbook-code");
	},
	_getSelectedEasyPayCardType : function () {
		if (this._isOpenedCardTab() && this._getSelectedEasyPayCardElement()) {
			return this._getSelectedEasyPayCardElement().getAttribute("data-card-class-type");
		}
	},
	_getSelectedEasyPayCardRewardRate : function () {
		if (this._isOpenedCardTab() && this._getSelectedEasyPayCardElement()) {
			return this._getSelectedEasyPayCardElement().getAttribute("rewardRate");
		}
	},
	_getSelectedEasyPayCardBenefitResidualAmount : function () {
		if (this._isOpenedCardTab() && this._getSelectedEasyPayCardElement()) {
			return this._getSelectedEasyPayCardElement().getAttribute("benefitResidualAmount");
		}
	},
	_getSelectedEasyPayCardBenefitYn : function () {
		if (this._isOpenedCardTab() && this._getSelectedEasyPayCardElement()) {
			return this._getSelectedEasyPayCardElement().getAttribute("benefitCardYn");
		}
	},
	_getSelectedEasyPayCardImageUrl : function () {
		if (this._isOpenedCardTab() && this._getSelectedEasyPayCardElement()) {
			return this._getSelectedEasyPayCardElement().getAttribute("cardImageUrl");
		}
	},
	_getSelectedEasyPayCardName : function () {
		if (this._isOpenedCardTab() && this._getSelectedEasyPayCardElement()) {
			return this._getSelectedEasyPayCardElement().getAttribute("data-card-name");
		}
	},
	getEasyPayTextByPayMethod : function (sPayMethod) {
		var sEasyPayText;

		if (this._isEasyPayCreditCard(sPayMethod)) {
			sEasyPayText = "카드";
		} else if (this._isEasyPayBank(sPayMethod)) {
			sEasyPayText = "계좌";
		}

		return sEasyPayText;
	},
	isEasyPayRegistrationMethod : function (sPayMethod) {
		return this.isEasyPayBankRegistrationMethod(sPayMethod) || this.isEasyPayCardRegistrationMethod(sPayMethod);
	},
	isEasyPayBankRegistrationMethod : function (sPayMethod) {
		return sPayMethod == this._getOption("registrationMethodCodeMap")["BANK"];
	},
	isEasyPayCardRegistrationMethod : function (sPayMethod) {
		return sPayMethod == this._getOption("registrationMethodCodeMap")["CREDIT_CARD"];
	},
	getCurrentCreditCardForm : function () {
		return this._isOpenedCardTab() ? $Element(this._getElement("root").query("._naverPaymentsCard")) : $Element(this._getElement("root").query("._generalPayments"));
	},
	getCurrentBankForm : function () {
		return this._isOpenedBankTab() ? $Element(this._getElement("root").query("._naverPaymentsBank")) : $Element(this._getElement("root").query("._generalPayments"));
	},
	getCardBenefitInfo : function () {
		return this._isOpenedCardTab() ? $Element(this._getElement("root").query("._cardBenefitInfo")) : $Element(this._getElement("root").query("._generalPayments"));
	},
	getCardInstallmentPeriodClassCode : function () {
		var welCardInstallmentPeriod;
		if (this._isOpenedCardTab()) {
			welCardInstallmentPeriod = $Element(this._getElement("root").query("._naverPaymentsCard div.npay_selectbox"));
		} else {
			welCardInstallmentPeriod = $Element(this._getElement("root").query("._generalPayments"));
		}
		return welCardInstallmentPeriod.query("select.cardInstallmentPeriodClassCode").value;
	},
	_isOpenedCardTab : function () {
		return !this.isNoPaymentAreaVisible() && this.cardEasyPayTab().isChecked();
	},
	_isOpenedBankTab : function () {
		return !this.isNoPaymentAreaVisible() && this.bankEasyPayTab().isChecked();
	},
	isNoPaymentAreaVisible : function () {
		return this._getElement("noPaymentArea") && this._getElement("noPaymentArea").visible();
	},
	togglePayEventInfo : function() {
		var welPayEventInfoHeader = $Element($$.getSingle(".benefit_fold_panel"));
		welPayEventInfoHeader.toggleClass("on");
	},
	_changePayEventInfo : function(paymentMeansCode) {
		if ($$.getSingle("._payEventHeader") == undefined) {
			return;
		}

		if (this._isEasyPay(paymentMeansCode)) {
			$A(this._getElement("root").queryAll("._payEvent_" + (this.getOption("easyCardCode").has(paymentMeansCode) ? "credit_card" : "bank"))).forEach(function(v) {
				$Element(v).show("inline-block");
			});
		}
	},
	getNaverToken : function() {
		return this._getElement("naverToken").attr("value");
	},
	openPasswordAuthentificationPage : function () {
		var naverTokenValue = this.getNaverToken();
		var htUrls = this._getOption("urls");
		var sPageUrl = htUrls["pay.password.authentification.popup.url"] + "?sessionKey=" + naverTokenValue
			+ "&rurl=" + this._doubleEncode(htUrls["pay.authentification.return.url"] + "&isRegistration=true")
			+ "&surl=" + this._doubleEncode(htUrls["pay.authentification.return.url"] + "&cancel=true");
		this._openPopupWithReferer(sPageUrl);
	},
	openAuthentificationPopup : function(htPinPay) {
		var naverTokenValue = this.getNaverToken();
		var htUrls = this._getOption("urls");
		var sPageUrl = "";

		if (this._htInstance["authentificationLevel"] == "ATH002") {
			sPageUrl = htUrls["pay.password.authentification.popup.url"] + "?sessionKey=" + naverTokenValue
				+ "&rurl=" + this._doubleEncode(htUrls["pay.authentification.return.url"] + this._makePinPayParam(htPinPay))
				+ "&surl=" + this._doubleEncode(htUrls["pay.authentification.return.url"] + "&cancel=true");
		} else {
			sPageUrl = htUrls["pay.ars.authentification.popup.url"] + "&token=" + naverTokenValue
				+ "&return_url=" + encodeURIComponent(htUrls["pay.authentification.return.url"] + this._makePinPayParam(htPinPay));
		}

		this._openPopupWithReferer(sPageUrl);
	},
	_doubleEncode : function(str) {
		return encodeURIComponent(encodeURIComponent(str));
	},
	_makePinPayParam : function(htPinPay) {
		return (htPinPay == undefined) ? "" : ("&isPin=" + htPinPay["isPin"] + "&pinNo=" + htPinPay["pinNo"] + "&isPinPayMember=" + htPinPay["isPinPayMember"]);
	},
	openNaverPayAuthPopup : function(we) {
		window.open('',this._htInstance["naverPayAuthTarget"],'width=300,height=460,scrollbar=yes').focus();
	},
	callbackNaverPayAuthentification : function(bCanceled, pinNo, isPin, isPinPayMember) {
		if (bCanceled != undefined && bCanceled) {
			alert("인증이 취소되었습니다.");
			return;
		}

		if (nmp.front.order.order_sheet.macos == undefined && this.getPayMethod() != "SKIP" && this._getOption("orderClass") == "CHECKOUT" && !this._isEasyPay(this.getPayMethod()) && nmp.front.order.order_sheet.checkout != undefined) {
			nmp.front.order.order_sheet.checkout.orderApply();
		} else {
			nmp.front.order.order_sheet.integration_cart.orderApply(pinNo, isPin, isPinPayMember);
		}
	},
	_selectPaymentMethod : function (sPaymentMethod) {
		this._changeDoPayBtnText(sPaymentMethod);
		// 계좌/카드 간편결제 수단
		if (this._isEasyPay(sPaymentMethod)) {
			// 일반 결제수단중 첫번째 결제수단 radio input check
			$A(this._htInstance["aPayMeansClass"]).forEach(function (v) {
				var welInput = $Element(v.getInput());
				if (welInput.attr("value") != "POINT") {
					v.setChecked(true);
					$A.Break();
				}
			});
		} else {
			if (sPaymentMethod == "VIRTUAL_ACCOUNT") {
				sPaymentMethod = "SKIP";
			}
			// 선택된 일반 결제수단 radio input check
			$A(this._htInstance["aPayMeansClass"]).forEach(function (v) {
				var welInput = $Element(v.getInput());
				if (welInput.attr("value") == sPaymentMethod) {
                    v.setChecked(true);
                    $A.Break();
                }
            });

			// 일반결제수단 탭 radio input check
			if (sPaymentMethod != "POINT") {
				this._setPaymentTabChecked("generalPayments");
            }
        }
	},
	_changeDoPayBtnText : function(sPaymentMethod){
		var btnText = "결제하기";

		if(sPaymentMethod == "VIRTUAL_ACCOUNT" || sPaymentMethod == "SKIP") {
			btnText = "주문하기"
		}
		this._getElement("payButton").text(btnText);
	},
	_changeDoPayBtnStatus : function(bDoEnable) {
		var doPayButton = $Element($$.getSingle("._doPayButton"));
		if(doPayButton == undefined){
			return;
		}

		if(bDoEnable == true){
			doPayButton.attr("disabled", null);
		} else {
			doPayButton.attr("disabled", "disabled");
		}
	},
	_isEasyPay : function (payMethod) {
		return (this._isEasyPayCreditCard(payMethod) || (this._isEasyPayBank(payMethod)));
	},
	_isEasyPayCreditCard : function (payMethod) {
		return this._getOption("easyCardCode").has(payMethod);
	},
	_isEasyCardNotPayable : function (payMethod) {
		if (this._isEasyPayCreditCard(payMethod) && this._htInstance["easyPayCardFlicking"] && this._htInstance["easyPayCardFlicking"].getElement().query(".checking")) {
			return true;
		}
		return false;
	},
	_isEasyPayBank : function (payMethod) {
		return this._getOption("easyBankCode").has(payMethod);
	},
	showLayerPayEvent : function(htEvent, sPayMethodType, sActionType, nAmount) {
		var htPayEvent = $H({"amount" : nmp.front.order.ui.setThousandComma(nAmount)});

		switch (sPayMethodType) {
			case "CARD":
				htPayEvent.add("payMethod", "카드");
				break;
			case "ACCOUNT":
				htPayEvent.add("payMethod", "계좌");
				break;
		}

		switch (sActionType) {
			case "REGISTER":
				htPayEvent.add("action", "등록");
				break;
			case "USE":
				htPayEvent.add("action", "사용");
				break;
		}

		var elLayerHtml = $Template(this._getElement("payEventLayerTemplate").html()).process(htPayEvent.$value());
		var welPayEventLayer = this._getElement("payEventLayer");

		$Element(welPayEventLayer.query("._content")).html(elLayerHtml);

		var baseElement = htEvent.element;
		nmp.layer.show(welPayEventLayer, baseElement, {
			"sPosition" : "outside-bottom",
			"sAlign" : "left",
			"nTop" : 0,
			"bAuto" : false
		});
	},
	openCardBenefitsPopup : function() {
		var htCreditCardInfos = $Json(this._getOption("creditCardInfos")).$value();
		var aEventInfos = $A();
		$H(htCreditCardInfos).forEach(function(v) {
			if (v["eventinfo"].length > 0) {
				$A(v["eventinfo"]).forEach(function(o) {
					aEventInfos.push(o);
				});
			}
		});

		var sUrl = "/orderSheetPopup/cardBenefits";
		var cultureBenefitYn = this._getOption("cultureBenefitYn") == "true" ? true : false;
		var htParams = {"cardEvents" : $Json(aEventInfos.$value()).toString(), "cardFreeInstallments" : $Json(nmp.front.order.order_sheet.integration_cart._getOption("freeInterests")).toString(), "cultureBenefitYn" : cultureBenefitYn};
		nmp.openPopup(sUrl,["width=450", "height=300", "scrollbars=yes"], "cardBenefits", htParams);
	},
	_openPopupWithReferer : function(sPageUrl) {
		var oNav = jindo.$Agent().navigator();
		var sUserAgent = navigator.userAgent;
		if ((oNav.ie && oNav.version < 10) || sUserAgent.indexOf("Edge") > 0) {
			var elNaverPayAuthPopup = this._getElement("naverPayAuthPopup").$value();
			this._htInstance["naverPayAuthTarget"] = "naverPayAuth" + Math.floor((Math.random() * 10000) + 1);

			elNaverPayAuthPopup.href = sPageUrl;
			elNaverPayAuthPopup.target = this._htInstance["naverPayAuthTarget"];
			elNaverPayAuthPopup.click();
		} else {
			if (this._htInstance["oAuthPopup"] == undefined || this._htInstance["oAuthPopup"].closed) {
				this._htInstance["oAuthPopup"] = window.open("", "naverAuthPopup", "width=290, height=496");

				if (this._htInstance["oAuthPopup"]) {
					this._htInstance["oAuthPopup"].location.href = sPageUrl;
				} else {
					alert("팝업이 차단되었습니다. 팝업 설정을 허용하여 주십시요.");
				}
			} else {
				this._htInstance["oAuthPopup"].location.href = sPageUrl;
			}
		}
	},
	initializePayMethod : function(sPayMethod) {
		if ((this._htInstance["payMethodInitialized"] == undefined || this._htInstance["payMethodInitialized"][sPayMethod] == undefined) && nmp.front.order.order_sheet.integration_cart.isInitialized()) {
			this._htInstance["payMethodInitialized"] = this._htInstance["payMethodInitialized"] || {};
			this._htInstance["payMethodInitialized"][sPayMethod] = true;

			switch (sPayMethod) {
				case "CREDIT_CARD":
					nmp.front.order.order_sheet.integration_cart.initializeGeneralCreditCard();
					break;
				case "BANK":
					nmp.front.order.order_sheet.integration_cart.initializeGeneralBank();
					break;
			}
		}
	},
	showAllPayments : function() {
		this._setOption("simplePaymentInfo", false);
		this._getElement("simplePaymentsArea").hide();
		this._getElement("simplePaymentsArea").leave();
		$ElementList(this._getElementList("paymentsArea", true)).show();
		if (this._getElement("changeEasyPayInfoNotice") != undefined) {
			this._getElement("changeEasyPayInfoNotice").show();
		}
	},
	changeBeforePayMethod : function() {
		this.changePaymentByPayMethod(this._htInstance["currentPaymethod"]);
	},
	confirmCheckPayLimit : function() {
		if (confirm('설정하신 결제 한도를 초과하여 결제가 불가능하며,\n보안설정 메뉴에서 한도 해제/변경 후 결제 가능합니다.\n보안설정 메뉴로 이동하시겠습니까?')) {
			this.openPayLimitConfig();
		}
	},
	openPayLimitConfig : function() {
		var htUrls = this._getOption("urls");
		var sPageUrl = htUrls["pay.limit.conf.url"] + "?btnType=close";;
		nmp.openPopup(sPageUrl, ["width=440", "height=620"], "payLimitConfig");
	},
	toggleCompanyCardNotice : function(nMonth) {
		if (this._getElement("companyCardNotice") != undefined) {
			if (nMonth != undefined && nMonth > 1) {
				this._getElementList("companyCardNotice").show();
			} else {
				this._getElementList("companyCardNotice").hide();
			}
		}
	},
	hideNotice : function(htEvent, sNoticeClass) {
		$Element(this._getElement("root").query(".dimmed")).leave();
		$Element(this._getElement("root").query("." + sNoticeClass)).leave();
	},
	checkDeliveryAddressInsertable : function(htEvent) {
		if (this._getOption("isDeliveryAddressAgreed") == undefined || this._getOption("isDeliveryAddressAgreed") == false || htEvent == null || htEvent.element == null || htEvent.element.checked == false) {
			return;
		}

		nmp.requestAjax("/orderSheetAjax/checkDeliveryAddressInsertable", {}, {
			method : "get",
			onload : $Fn(nmp.front.order.order_sheet.callbackDeliveryAddressInsertable, this).bind(htEvent.element.parentElement.id),
			onerror : function(res) {
			}
		});
	},
	callbackDeliveryAddressInsertable : function(sParentElementId, result) {
		if (result != null && result.bSuccess == true && result.htReturnValue.result == false && this._htInstance[sParentElementId] != undefined) {
			alert(result.htReturnValue.resultMessage);
			this._htInstance[sParentElementId].setChecked(false);
		}
	},
	_getPointStatusAndAmount : function () {
		if (this._getOption("isAdult") == undefined || this._getOption("isAdult") == true) {
			this._getCardPointStatusAndAmount();
		} else {
			this._getPointChargeInfo();
		}
	},
	_getCardPointStatusAndAmount : function() {
		if (this._getElement("cardPointLoading") == null) {
			return;
		}

		var htUrls = this._getOption("urls");
		var sCardPointUrl = htUrls["member.cardpoint.amount.pc.url"] + "?jsonp=nmp.front.order.order_sheet.callbackCardPointStatusAndAmount";
		setTimeout($Fn(this.callbackCardPointStatusAndAmount,this).bind(), 3000);
		nmp.requestAjax(sCardPointUrl, undefined, {
			method: "get",
			type: "jsonp",
			onload: $Fn(function (res) {
			}, this).bind(),
			onerror: $Fn(function (htResult) {
			}, this).bind()
		});
	},
	callbackCardPointStatusAndAmount : function(htResponse) {
		this._getElement("cardPointLoading").hide();
		if (htResponse == undefined && this._htInstance["cardPointResult"] == undefined) {
			this._htInstance["cardPointResult"] = false;
			this._getElement("cardPointInputArea").hide();
			this._getElement("cardPointFailed").show();
		} else if (this._htInstance["cardPointResult"] == undefined) {
			this._htInstance["cardPointResult"] = true;
			if (htResponse.apiSuccess != undefined && htResponse.apiSuccess) {
				if (htResponse.body != undefined && htResponse.body.hasAgree != undefined && htResponse.body.hasAgree) {
					this._getElement("totalCardPointAmount").attr("value", htResponse.body.point);
					this._getElement("cardPointInputArea").show();
					this._getElement("convertCardPointBtn").removeClass("disable");
					this._getElement("convertCardPointBtn").attr("disabled", "");
				} else {
					this._getElement("cardPointInputArea").hide();
					this._getElement("cardPointFailed").hide();
					this._getElement("cardPointCheck").show();
					this._getElement("convertCardPointBtn").addClass("disable");
					this._getElement("convertCardPointBtn").attr("disabled", "disabled");
				}
			}
		}
	},
	showCardPointConversionPopup : function(htEvent) {
		var htUrls = this._getOption("urls");
		var sCardPointConversionUrl = htUrls["member.cardpoint.callback.pc.url"] + "nmp.front.order.order_sheet.callbackCardPointConversion" + "&parentCallback=reloadParentWindow";
		nmp.openPopup(sCardPointConversionUrl, ["width=440", "height=520", "scrollbars=yes"], "cardPointConversion");
	},
	callbackCardPointConversion : function() {
		window.location.reload();
	},
	reloadCardPointArea : function(htEvent) {
		this._htInstance["cardPointResult"] = undefined;
		this._getElement("cardPointInputArea").hide();
		this._getElement("cardPointFailed").hide();
		this._getElement("cardPointLoading").show("inline-block");
		this._getCardPointStatusAndAmount();
	},
	_getPointChargeInfo : function () {
		var htUrls = this._getOption("urls");
		var sPointChargeUrl = htUrls["point.charge.pc.url"] + "&jsonp=nmp.front.order.order_sheet.callbackPointChargeInfo";
		nmp.requestAjax(sPointChargeUrl, undefined, {
			method : "get",
			type : "jsonp",
			onload : $Fn(function (res) {
			}, this).bind(),
			onerror : $Fn(function (htResult) {
			}, this).bind()
		});
	},
	callbackPointChargeInfo : function (htResponse) {
		if (htResponse && htResponse.apiSuccess) {
			var sMessageHtml = this._convertRawPointChargeMessage(htResponse.body.message, htResponse.body.logoUrl, "CU,세븐일레븐");
			var sInsertHtml = sMessageHtml + '<span class="ico_more"></span>';
			var welPoitChargeArea = this._getElement("pointChargeArea");
			if(welPoitChargeArea) {
				welPoitChargeArea.attr("href", htResponse.body.detailLink);
				welPoitChargeArea.html(sInsertHtml);
			}
		} else {
			this._getElement("pointChargeArea").hide();
		}
	},
	_convertRawPointChargeMessage : function (sMessage, sLogoUrl, sTargetWord) {
		var sImgHtml = '<img src="logoUrl" width="102" height="15" alt="CU,세븐일레븐">';
		var sImgHtmlConverted = sImgHtml.replace("logoUrl", sLogoUrl);
		return sMessage.replace(sTargetWord, sImgHtmlConverted)
	},
    showDeliveryPlaceNameList: function (htEvent) {
        var welDeliveryPlaceNameListArea = this._getElement("deliveryPlaceNameListArea");
        if(welDeliveryPlaceNameListArea.visible()){
            nmp.layer.hide(welDeliveryPlaceNameListArea);
            return ;
        }

        var welAllAddressArea = this._getElement("allAddressArea");
        var elDeliveryPlaceName = welAllAddressArea.query("input[name='deliveryAddress.deliveryPlaceName']");

        nmp.layer.show(welDeliveryPlaceNameListArea, elDeliveryPlaceName, {
            "sPosition": "outside-bottom",
            "sAlign": "left",
            "nTop": 0,
            "bAuto": false
        });

        htEvent.stopBubble();
        elDeliveryPlaceName.focus();
    },
    setDeliveryPlaceName: function (htEvent, sPlaceName) {
        var welAllAddressArea = this._getElement("allAddressArea");
        var elDeliveryPlaceName = welAllAddressArea.query("input[name='deliveryAddress.deliveryPlaceName']");

        if (elDeliveryPlaceName != null) {
            elDeliveryPlaceName.value = sPlaceName;

            var welDeliveryPlaceName = $Element(elDeliveryPlaceName);
            welDeliveryPlaceName.fireEvent("focus");
            welDeliveryPlaceName.fireEvent("blur");

            nmp.layer.hide();
        }
    },
    toggleMoreRecentlyDeliveryAddresses: function (htEvent) {
        var welRecentDeliBox = $Element(htEvent.element.parentElement);

        if (welRecentDeliBox != null) {
            welRecentDeliBox.toggleClass("unfold");
        }
    },
	_getScrollTop : function() {
		return document.body.scrollTop || document.documentElement.scrollTop;
	},
	getMinimumInstallmentPayAmount : function() {
		return ((this.getPayMethod() == "CREDIT_CARD" && this._htInstance["sbCardCodeList"].getValue() == "CH") || this.getPayMethod() == "CH") ? 10000 : 50000;
	},
	showPointChargePopup : function(htEvent) {
		var sUrl = this._getOption("urls")["charge.pay.url"] + encodeURIComponent(this._getOption("urls")["order.ordersheet.url"] + "closePopup") + "&CLOSETYPE=D";
		nmp.openPopup(sUrl,["width=500", "height=660"], "pointChargePopup", null, true);
	},
	getSuffixUrl : function() {
		if (this._getOption("orderClass") == "INTEGRATION_CART") {
			return "/integrationCart";
		}else{
			return "/checkout";
		}
	},
	isEasyPaySelected : function() {
		return this._isEasyPay(this.getPayMethod());
	},
	_getProductOrdersByDeliveryGroup : function(id) {
		var orderProducts = [];
		var snapshot = this._getOption('orderSnapshot');
		if (snapshot.orderProducts) {
			snapshot.orderProducts.map(function(orderProduct) {
				if (orderProduct.deliveryGroup.id == id) {
					orderProducts.push(orderProduct);
				}
			});
		}
		return orderProducts;
	},
	showHopeDeliveryFee : function (htEvent, id) {

		var hopeDeliveryFeeTexts = [];
		var orderProducts = this._getProductOrdersByDeliveryGroup(id);
		orderProducts.map(function(orderProduct) {
			if (orderProduct.hopeDeliveryInfoJson) {
				var hopeDeliveryInfo = JSON.parse(orderProduct.hopeDeliveryInfoJson);
				var text = hopeDeliveryInfo.region + ' ' + (hopeDeliveryInfo.additionalFee == 0 ? '무료배송' : (nmp.utility.convertNumberFormat(hopeDeliveryInfo.additionalFee) + '원')) + ' 예상';
				if (hopeDeliveryFeeTexts.join(':').indexOf(text) == -1) {
					hopeDeliveryFeeTexts.push(text);
				}
			}
		});

		var elLayerHtml = $Template(this._getElement("hopeDeliveryFeeLayerTemplate").html()).process({hopeDeliveryFeeTexts: hopeDeliveryFeeTexts});

		var hopeDeliveryFeeLayer = this._getElement("hopeDeliveryFeeLayer");
		$Element(hopeDeliveryFeeLayer.query("._content")).html(elLayerHtml);
		nmp.layer.show(hopeDeliveryFeeLayer, htEvent.element, {
			"sPosition" : "outside-bottom",
			"sAlign" : "center",
			"nTop" : 8,
			"bAuto" : false
		});
	},
	notifyCardBenefitInfo : function() {
		if (this._getElement("cardBenefitInfo") == undefined) {
			return;
		}

		var bIsAllHidden = $A(this._getElement("cardBenefitInfo").queryAll("li")).every(function(v) {
			return $Element(v).css("display") == "none";
		});

		var sPayMethod = this.getPayMethod();
		if (!this._isEasyPayCreditCard(sPayMethod) || this.isEasyPayCardRegistrationMethod(sPayMethod)) {
			bIsAllHidden = true;
		}

		bIsAllHidden ? this._getElement("cardBenefitInfo").hide() : this._getElement("cardBenefitInfo").show();

		if (!bIsAllHidden) {
			var aNoticeItems = this._getElement("cardBenefitInfo").queryAll("li");
			var bIsFirst = true;
			$A(aNoticeItems).forEach(function(v) {
				if ($Element(v).visible() && bIsFirst) {
					$Element(v).css("margin-top", "0px");
					bIsFirst = false;
				} else {
					$Element(v).css("margin-top", "10px");
				}
			});
		}
	},
	getFlickComponent : function (sPayMethod) {
		return (sPayMethod == "Card") ? this._htInstance["easyPayCardFlicking"] : this._htInstance["easyPayBankFlicking"];
	},
    closeDiscountOptimizationFailHelp : function (){
        var helpLayer = this._getElement("discountOptimizationFailHelpLayer");
        if(helpLayer != undefined) {
            helpLayer.hide();
        }
    },
	checkUseWithPayLater: function (we) {
		if (this._getPayLater().isChecked()) {
			if (confirm("사용하실 보유포인트를 변경하실 경우 후불결제 사용이 불가합니다.\n변경하시겠습니까?")) {
				this._getPayLater().unUsePayLater();
				return true;
			} else {
				this.useAllSubSettle();
				if (we != undefined) {
					we.element.blur();
				}
				return false;
			}
		}
		return true;
	},
	clearPoint : function () {
		if (this.checkUseWithPayLater()) {
			if ($$.getSingle("input[name='payAmounts.NAVER_CASH']") != undefined) {
				$$.getSingle("input[name='payAmounts.NAVER_CASH']").value = 0;

				// 이전 결제수단이 충전결제이면, 포인트 충전결제 탭 mark
				if(this._htInstance["isPreviousChargePointUsed"]){
					this._getChargePoint().markRadio();
					this._getChargePoint().showOpenArea();
				}

				this.calculateTotalPrice();
				this.showClearPointButton();
			}
		}
	},
	showClearPointButton : function () {
		var welParent = $Element($$.getSingle("input[name='payAmounts.NAVER_CASH']").parentElement);
		var welClearPoint = $Element(welParent.query('._clearPoint'));
		if(welClearPoint != undefined){
			if (this._getMileageAmount() <= 0) {
				welParent.removeClass("point_green");
				welParent.removeClass("type_delete");
				welClearPoint.hide();
			} else {
				welParent.addClass("point_green");
				welParent.addClass("type_delete");
				welClearPoint.show();
			}
		}
	},
	showLayer : function (sLayer) {
		var elLayer = this._getElement(sLayer + "Layer");
		elLayer.show();

		var welLayer = $Element($$.getSingle("._" + sLayer));
		welLayer.css("top", (this._getScrollTop() + (window.innerHeight - welLayer.height()) / 4) + "px");
	},
	hideAdultAuthenticationLayer : function (bAlert) {
		if (bAlert) {
			alert("관계법령에 따라 19세 이상 본인인증을 거쳐야 구매하실 수 있습니다.");
			nmp.front.order.order_sheet.integration_cart._htInstance["isProgress"] = false;
		}

		var elAdultAuthenticationLayer = this._getElement("adultAuthenticationLayer");
		elAdultAuthenticationLayer.hide();
	},
	openAdultAuthenticationPopup : function (we, sAuthMethod) {
		var sUrl = this._getOption("urls")["member.auth.popup.url"];
		var htData = {
			"authMethod" : sAuthMethod,
			"rUrl" : this._getOption("urls")["adult.authentication.return.url"]
		};

		nmp.openPopup(sUrl + "?" + $H(htData).toQueryString(), ["width=500", "height=660", "scrollbars=yes"], "openAdultAuthPopup", null, true);
	},
	callbackAdultAuthentication : function (sToken, sAuthMethod) {
		this.hideAdultAuthenticationLayer(false);

		this._htInstance["adultAuthenticationToken"] = sToken;
		this._htInstance["adultAuthenticationMethod"] = sAuthMethod;
		nmp.front.order.order_sheet.integration_cart.createTempOrderAfterValidate();
	},
	_isCreditCardInstallmentUnavailable : function() {
		return this._getOption("creditCardInstallmentUnavailableList").some($Fn(function(v) {
			return ((this._htInstance["sbCardCodeList"].getValue() == v) || (this.getPayMethod() == v));
		}, this).bind());
	},
	_isEqualCookieValue : function (cookieId, cookieValue){
		var cookie = jindo.$Cookie();
		var storedCookieValue = cookie.get(cookieId);
		if (storedCookieValue && storedCookieValue == cookieValue) {
			return true;
		} else {
			return false;
		}
	},
	_getCurrentSkipPayMethod : function () {
		if (this._htInstance["skipPaymentMethodSelectBox"] != undefined) {
			return this._htInstance["skipPaymentMethodSelectBox"].getValue();
		}
	},
	_isMobilePinPayMethod : function() {
		if (this._getElement("mobileMethodArea").query('input[name=mobileSettleInfo.isPinPay][type=radio]:checked') != undefined) {
			isPinPay = (this._getElement("mobileMethodArea").query('input[name=mobileSettleInfo.isPinPay][type=radio]:checked').id == "mobilePinPay");

			return isPinPay;
		}
	},
	selectSkipPayMethod : function (sSkipPaymentMethod) {
		var nIndex = 0;
		$A(this._htInstance["skipPaymentMethodSelectBox"].getOptions()).forEach(function (elSkipPaymentMethod, i, a) {
			if (elSkipPaymentMethod.value == sSkipPaymentMethod) {
				nIndex = i;
				$A.Break();
			}
		});

		this._htInstance["skipPaymentMethodSelectBox"].setSelectedIndex(nIndex);
	},
	changePayNextType : function (we, sPayNextType) {
		if (we != undefined) {
			sPayNextType = we.element.value;
		}

		if (sPayNextType == "VIRTUAL_ACCOUNT") {
			this.changePayment(we);
		} else {
			this.changePaymentByPayMethod("SKIP");
		}
	},
	_changeSkipPayMethodView : function () {
		var sSkipPayMethod = this._getCurrentSkipPayMethod();

		this._getElementList("skipPayMethodInfo").hide();

		var elSkipPayMethodInfo = this._getElement("skip_" + sSkipPayMethod.toLowerCase() + "_info");
		if (sSkipPayMethod == "VIRTUAL_ACCOUNT") {
			$A(this._getElement("paymentInfoArea").queryAll(".virtualAccount")).forEach(function (v) {
				$Element(v).show();
			});

			if (this._getElement("eventBannerAreaCvsCharge") != undefined) {
				this._getElement("eventBannerAreaCvsCharge").show();
			}
		} else {
			if (elSkipPayMethodInfo != undefined) {
				elSkipPayMethodInfo.show();
			}
		}

		if (this._getElement("skip_form") != undefined) {
			this._getElement("skip_form").show();
		}
	},
	changeSkipBank : function () {
		this.selectSkipPayMethod("BANK");
		this.changePayNextType(null, "BANK");
	},
	showLayerPayNextGuide : function (htEvent, bIsEasyBooking) {
		var elLayerHtml = $Template(this._getElement("payNextGuideLayerTemplate").html()).process({
			"isEasyBooking" : bIsEasyBooking
		});
		var welPayNextGuideLayer = this._getElement("payNextGuideLayer");
		$Element(welPayNextGuideLayer.query("._content")).html(elLayerHtml);

		nmp.layer.show(welPayNextGuideLayer, htEvent.element, {
			"sPosition" : "outside-bottom",
			"sAlign" : "left",
			"nTop" : 5,
			"bAuto" : false
		});
	},
	showLayerRefundAccountGuide : function (htEvent) {
		var welRefundAccountGuideLayer = this._getElement("refundAccountGuideLayer");
		nmp.layer.show(welRefundAccountGuideLayer, htEvent.element, {});
	},
	isRefundAccountChecked : function (htEvent) {
		if ($Element(document.getElementById("refundType1")).parent().query("span.radio-checked") == null) {
			return false;
		}

		if (this._getElement("refundAccountList") == undefined) {
			return false;
		}

		if (this._getElement("refundAccountList").query(".account_selected") != undefined) {
			return true;
		}
		return false;
	},
	showSkipLayer : function (sPayMethod, bAddClassTypeLayer) {
		var bMatchCookieValue = this._isEqualCookieValue("orderSheetSkipLayer" + sPayMethod, "true");
		if (!bMatchCookieValue && this._getElement("skipLayer" + sPayMethod) != undefined && (this._htInstance[("bCloseSkipLayer" + sPayMethod)] == undefined || this._htInstance[("bCloseSkipLayer" + sPayMethod)] == false)) {
			if (bAddClassTypeLayer) {
				this._getElement("skipLayer" + sPayMethod).addClass("type_later");
			} else if (this._getElement("skipLayer" + sPayMethod).hasClass("type_later")) {
				this._getElement("skipLayer" + sPayMethod).removeClass("type_later");
			}

			this._getElement("skipLayer" + sPayMethod).show();

			if (this._getElement("toolTipEvent" + sPayMethod) != undefined) {
				this._getElement("toolTipEvent" + sPayMethod).hide();
			}
			return true;
		}

		return false;
	},
	closeBtnOfSkipLayer : function (htEvent, sPayMethod) {
		this._getElementList("skipLayers").hide();

		if (this._getElement("skipLayer" + sPayMethod) != undefined) {
			this._htInstance[("bCloseSkipLayer" + sPayMethod)] = true;
		}

		if (this.getPayMethod() == "VIRTUAL_ACCOUNT") {
			$A($$(".virtualAccount")).forEach(function (v, i, a) {
				$Element(a[i]).show();
			});
		}
	},
	closeBtnOfSkipLayerDuringFewDate : function (htEvent, sPayMethod) {
		var oCookie = jindo.$Cookie();
		oCookie.set("orderSheetSkipLayer" + sPayMethod, "true", 7);
		this.closeBtnOfSkipLayer(htEvent, sPayMethod);
	},
	showToolTipEvent : function (sPayMethod) {
		if (this._getElement("toolTipEvent" + sPayMethod) != undefined && (this._htInstance[("bCloseToolTipEvent" + sPayMethod)] == undefined || this._htInstance[("bCloseToolTipEvent" + sPayMethod)] == false)) {
			this._getElement("toolTipEvent" + sPayMethod).show("inline-block");
		}
	},
	closeToolTipEvent : function (htEvent, sPayMethod) {
		if (this._getElement("toolTipEvent" + sPayMethod) != undefined) {
			this._getElement("toolTipEvent" + sPayMethod).hide();
			this._htInstance[("bCloseToolTipEvent" + sPayMethod)] = true;
		}
	},
	/* 오픈 뱅킹 동의 레이어 관련 로직 */
	hideOpenbankingAgreeLayer : function (htEvent, bProceedAccount) {
		var elLayer = this._getElement("openbankingAgreeLayer");
		elLayer.hide();

		nmp.front.order.order_sheet.integration_cart._htInstance["isProgress"] = false;

		if (bProceedAccount == "true") {
			this._htInstance["isOpenBankAgreed"] = true;

			if (this.isPGPayment(this.getPayMethod())) {
				nmp.front.order.order_sheet.checkout.continueTempOrderAfterValidate();
			} else {
				nmp.front.order.order_sheet.integration_cart.continueTempOrderAfterValidate();
			}
		}
	},
	showOpenbankingAgreeLayer : function () {
		if (this._htInstance["isOpenBankAgreed"] == undefined || this._htInstance["isOpenBankAgreed"] == false) {
			return (this._isEasyPayBank(this.getPayMethod()) && !this._getOption('isOpenBankAgreed'));
		} else {
			return false;
		}
	},
	getUsePointAllYn : function () {
		if (this._htInstance["usePointAllCheckbox"]) {
			return this._htInstance["usePointAllCheckbox"].getChecked();
		}
		return;
	},
	/* 보유포인트 항상 전액사용 선택 여부 반환 */
	isUseAllPointChecked : function () {
		var elUsePointAllCheckbox = this._getElement("root").query("input[name=usePointAllCheckbox]");
		if (elUsePointAllCheckbox && elUsePointAllCheckbox.checked == true) {
			return true;
		}
		return false;
	},
	/* 보유포인트 전액사용 체크 이벤트 핸들러 */
	useAllSubSettleOnCheckEvent : function () {
		var welUsePointAllMarker = this._getElement("usePointAllMarker");
		var welUsePointAllCheckBoxInput = this._getElement("usePointAllCheckboxInput");

		if (this.isUseAllPointChecked()) {
			if (this._getTotalPayAmount() > 0) {
				this.useAllSubSettle();
			}
			this._setOption("usePointAllYn", true);
			this.changeNclickComment(welUsePointAllMarker, "alwaysallpoi");
			this.changeNclickComment(welUsePointAllCheckBoxInput, "alwaysallpoi");
		} else {
			this._setOption("usePointAllYn", false);
			this.changeNclickComment(welUsePointAllMarker, "noalwallpoi");
			this.changeNclickComment(welUsePointAllCheckBoxInput, "noalwallpoi");
		}
	},
	/* nclick 주석의 naming을 변경하는 함수
	   [참고] nclick script는 해당 이벤트가 완료된후 실행됨 */
	changeNclickComment: function(welTarget, nClickName) {

		if(!welTarget) {
			return;
		}

		// nclick comment 검증
		var elNClickComment = welTarget.$value().nextSibling;
		var elNClickCommentParent = welTarget.$value().parentElement;
		var isValidNClickComment = elNClickCommentParent && elNClickComment && elNClickComment.textContent && (elNClickComment.textContent.indexOf("N=a:ord") > -1);

		if(isValidNClickComment) {
			// 기존 nclick comment 삭제
			elNClickCommentParent.removeChild(elNClickComment);
			// 신규 nclick comment 삽입
			welTarget.afterHTML("<!--N=a:ord." + nClickName + "-->");
		}
	},
	/* 나머지 결제수단(주결제수단 or 충전결제 or 보유포인트 or 후불결제)으로 결제할 금액  = 총 결제할 금액 - (상품쿠폰할인값 + 배송비쿠폰할인값) */
	_getTotalPayAmount : function () {
		var nTotalAccountPrice = this.getTotalAccountPrice()
		var nTotalDiscountPrice = 0;

		var elCalculationTargetList = this._getElementList("calculationDiscountTarget", true);

		for (var i = 0; i < elCalculationTargetList.length; i++) {
			var elDiscountElement = elCalculationTargetList[i];
			// 네이버 포인트(보유포인트), 후불결제 제외
			if (elDiscountElement.value != "" && isNaN(elDiscountElement.value.replace(/[,]/g, "")) == false && (elDiscountElement.name.indexOf("NAVER_CASH") == -1) && (elDiscountElement.name.indexOf("PAY_LATER") == -1)) {
				nTotalDiscountPrice += parseInt(elDiscountElement.value.replace(/[,]/g, ""), 10);
			}
		}

		return nTotalAccountPrice - nTotalDiscountPrice;
	},
	/* 대표환불계좌 부분 삭제 */
	deleteNoRepRefundAccount : function(htEvent) {
		if (htEvent != undefined) {
			this.toggleRefundAccountList(htEvent);
		}
		if (this._getElement("noDefaultRefundAccount") != undefined) {
			document.getElementById("noDefaultRefundAccount").remove();
		}
	},
	/* 환불계좌 리스트 더보키 아이콘 toggle 및 환불계좌 리스트 영역 제어 */
	toggleRefundAccountList : function (htEvent) {
		if (this._getElement("refundViewMore") == undefined || this._getElement("refundAccountList") == undefined){
			return;
		}

		var welToggleButton = $Element(this._getElement("refundViewMore").query("button"));
		if (welToggleButton != undefined) {
			welToggleButton.toggleClass("close");
			this.setRefundAccountList(welToggleButton.hasClass("close"));
		}

		//대표환불계좌 X
		var elNoDefaultRefundAccount = this._getElement("noDefaultRefundAccount");
		if (elNoDefaultRefundAccount != undefined) {
			if ((this._getElement("refundAccountList").query(".account_selected") == undefined)) {
				if (welToggleButton.hasClass("close")) { // 열려있는상태
					this._getElement("noDefaultRefundAccount").hide();
				} else {
					this._getElement("noDefaultRefundAccount").show();
				}
			} else {
				this._getElement("noDefaultRefundAccount").hide();
			}
		}

	},
	setRefundAccountList : function (bIsOpened) {
		var welSelectedAccount;
		if (this._getElement("refundAccountList").query(".account_selected") != undefined) {
			welSelectedAccount = $Element(this._getElement("refundAccountList").query(".account_selected").parentElement);
		} else {
			welSelectedAccount = $Element(this._getElement("refundAccountList").query("li"));
		}

		var elRefundNaverBankOpenList = this._getElement("refundAccountList").queryAll("span.txt_naverbank.open");
		var elRefundNaverBankCloseList = this._getElement("refundAccountList").queryAll("span.txt_naverbank.close");

		if (bIsOpened) {
			$ElementList(this._getElement("refundAccountList").queryAll("li")).show();
			$ElementList(this._getElement("refundAccountList").queryAll("li")).removeClass("current");

			this.toggleRefundNaverBank(bIsOpened,elRefundNaverBankOpenList,elRefundNaverBankCloseList);

			if (this._getElement("refundAddBankAccount") != undefined) {
				this._getElement("refundAddBankAccount").show();
			}

		} else {
			$ElementList(this._getElement("refundAccountList").queryAll("li")).hide();
			welSelectedAccount.addClass("current");
			welSelectedAccount.show();

			this.toggleRefundNaverBank(bIsOpened,elRefundNaverBankOpenList,elRefundNaverBankCloseList);

			if (this._getElement("refundAddBankAccount") != undefined) {
				this._getElement("refundAddBankAccount").hide();
			}
		}
	},
	toggleRefundNaverBank : function (bIsOpened, elRefundNaverBankOpenList, elRefundNaverBankCloseList) {
		if (elRefundNaverBankOpenList == undefined || elRefundNaverBankCloseList == undefined || elRefundNaverBankOpenList == '' || elRefundNaverBankCloseList == '') {
			return;
		}
		if (bIsOpened) {
			$A(elRefundNaverBankOpenList).forEach(function(el) {
				el.style.display = "";
			});
			$A(elRefundNaverBankCloseList).forEach(function(el) {
				el.style.display = "none";
			});
		} else {
			$A(elRefundNaverBankOpenList).forEach(function(el) {
				el.style.display = "none";
			});
			$A(elRefundNaverBankCloseList).forEach(function(el) {
				el.style.display = "";
			});
		}
	},
	//환불 계좌 선택
	chooseRefundAccount : function (htEvent, elRefundAccElement) {
		if (this._getElement("refundAccountList") == undefined || this._getElement("refundViewMore") == undefined) {
			return;
		}
		
		$ElementList(this._getElement("refundAccountList").queryAll("label.account_selected")).removeClass("account_selected");
		$ElementList(this._getElement("refundAccountList").queryAll("input")).attr("checked", false);

		if (htEvent == undefined) {
			$Element(this._getElement("refundAccountList").query("label[for=" + elRefundAccElement.attr("id") + "]")).addClass("account_selected");
		} else {
			$Element(htEvent.delegatedElement).addClass("account_selected");
		}

		var welViewMoreButton = $Element(this._getElement("refundViewMore").query("button"));
		if (welViewMoreButton != undefined) {
			welViewMoreButton.toggleClass("close");
			this.setRefundAccountList(welViewMoreButton.hasClass("close"));
		}
		var elDefaultRefundAccount = this._getElement("noDefaultRefundAccount");
		if (elDefaultRefundAccount != undefined) {
			this._getElement("refundAccountList").remove(elDefaultRefundAccount);
		}
	},
	selectedRefundAccount : function() {
		if (this._getElement("refundAccountList") == undefined || this._getElement("refundInfos") == undefined) {
			return;
		}

		var selectedRefundAccountKey = "";
		if (this.getPayMethod() == "VIRTUAL_ACCOUNT" && this._getElement("refundInfos").visible()) {
			selectedRefundAccountKey = this._getElement("refundAccountList").query(".account_selected").parentElement.children[0].value;
		}

		return selectedRefundAccountKey;
	},
	/* 출금계좌 리스트 더보기 아이콘 toggle 및 출금계좌 리스트 영역 제어 */
	toggleChargePointBankList : function (htEvent) {
		var welToggleButton = $Element(htEvent.element);
		if (welToggleButton != undefined) {
			welToggleButton.toggleClass("close");
			this.setChargePointBankList(welToggleButton.hasClass("close"));
		}
	},
	/* 출금계좌 리스트 펼치기 or 줄이기 */
	setChargePointBankList : function (bIsOpened) {
		var welSelectedBank;
		if (this._getElement("chargedPointBankList").query(".account_selected") != undefined) {
			welSelectedBank = $Element(this._getElement("chargedPointBankList").query(".account_selected").parentElement);
		} else {
			welSelectedBank = $Element(this._getElement("chargedPointBankList").query("li"));
		}

		if (bIsOpened) {
			$ElementList(this._getElement("chargedPointBankList").queryAll("li")).show();
			$ElementList(this._getElement("chargedPointBankList").queryAll("li")).removeClass("current");

			if (this._getElement("chargedPointAddBankAccount") != undefined) {
				this._getElement("chargedPointAddBankAccount").show();
			}
		} else {
			$ElementList(this._getElement("chargedPointBankList").queryAll("li")).hide();

			welSelectedBank.addClass("current");
			welSelectedBank.show();

			if (this._getElement("chargedPointAddBankAccount") != undefined) {
				this._getElement("chargedPointAddBankAccount").hide();
			}
		}

		var isNaverBankBookSelected = welSelectedBank.query("input").getAttribute("data-pay-bankbook") === "true";
		this.setNaverBankBookText(bIsOpened, isNaverBankBookSelected);
	},
	/* 충전계좌 리스트 펼침/숨기기에 따라, 네이버통장 문구 위치를 변경 및 세팅함 */
	setNaverBankBookText : function(bIsOpened, isNaverBankBookSelected){

		var welChargePointNaverBankBook = $Element(this._getElement("root").query("#chargePointNaverBankBook"));
		if(!welChargePointNaverBankBook) {
			return;
		}

		var welChargePointBankLabelBox = $Element(welChargePointNaverBankBook.query("._chargePointBankLabelBox"));
		var elNaverBankText = welChargePointNaverBankBook.query(".txt_naverbank");

		welChargePointNaverBankBook.remove(elNaverBankText);

		!bIsOpened && isNaverBankBookSelected ? welChargePointBankLabelBox.append(elNaverBankText) : welChargePointBankLabelBox.prepend(elNaverBankText);
	},
	/* 출금계좌 선택 */
	chooseChargeAccount : function (htEvent, elChargeBankElement, bSkipRecalculate) {
		var prevSelectedBankData = this._getChargePoint().selectedBankData();

		$ElementList(this._getElement("chargedPointBankList").queryAll("label.account_selected")).removeClass("account_selected");
		$ElementList(this._getElement("chargedPointBankList").queryAll("input")).attr("checked", false);

		if (htEvent == undefined) {
			$Element(this._getElement("chargedPointBankList").query("label[for=" + elChargeBankElement.attr("id") + "]")).addClass("account_selected");
		} else {
			elChargeBankElement = $Element($$.getSingle("#" + htEvent.delegatedElement.getAttribute("for")));
			$Element(htEvent.delegatedElement).addClass("account_selected");
		}

		// 네이버통장 배너 숨기기
		$ElementList(this._getElement("chargedPointBankList").queryAll("._naverPayBankbookTooltip")).hide();

		var isNaverPayBankbookSelected = elChargeBankElement != undefined && elChargeBankElement.attr("data-pay-bankbook") == "true";
		var welNaverPayBankbookTooltip = $Element(elChargeBankElement.parent().query("._naverPayBankbookTooltip"));
		if(!isNaverPayBankbookSelected && welNaverPayBankbookTooltip) {
			welNaverPayBankbookTooltip.show("block");
		}

		if (bSkipRecalculate !== true) {
			if (prevSelectedBankData == null) {
				this._getChargePoint().releaseBankCheckingView();
				this.calculateTotalPrice(null, null, null, null);
			} else {
				this.recalculateAccumulationNMileage();
			}
		}
	},
	/* 네이버 통장을 출금계좌로 선택 */
	chooseNaverPayBankbook : function () {
		var elNaverBankbook = this._getNaverBankbookElement();
		if (elNaverBankbook != undefined) {
			this.chooseChargeAccount(null, elNaverBankbook);
			var bIsOpened = this._getElement("chargePointBankListToggleButton") != undefined && this._getElement("chargePointBankListToggleButton").hasClass("close");
			this.setChargePointBankList(bIsOpened);
		}
	},
	/* 포인트 충전결제 영역 > 출금계좌 리스트의 네이버통장 element 반환 */
	_getNaverBankbookElement : function () {
		var elNaverBankbook;
		if (this._getElement("chargedPointBankList") != undefined) {
			$A(this._getElement("chargedPointBankList").queryAll("input")).forEach(function (v) {
				if ($Element(v).attr("data-pay-bankbook") == "true" && !$Element(v).attr("disabled")) {
					elNaverBankbook = $Element(v);
					$A.Break();
				}
			});
		}
		return elNaverBankbook;
	},
	/* 충전계좌리스트 영역 네이버 통장 배너 숨기기 */
	closeNaverPayBankbookRecommandLayer : function () {
		this._getChargePoint().hideSelectedAccountToolipBanner();
	},
	/* 포인트 충전결제 - 충전, 사용, 계좌 정보 반환 */
	getChargePointInfo : function () {
		var htChargePointInfo = {
			"amount" : 0,
			"useAmount" : 0,
			"bankCode" : undefined,
			"accountKey" : undefined,
			"payBankbookCode" : undefined
		};

		var selectedBankData = this._getChargePoint().selectedBankData();
		if (selectedBankData != undefined) {
			htChargePointInfo["bankCode"] = selectedBankData.code;
			htChargePointInfo["accountKey"] = selectedBankData.accountKey;
			htChargePointInfo["payBankbookCode"] = selectedBankData.payBankbookCode;

			if (this._getChargePoint().isChecked() && this._getChargePoint().isPayable()) {
				htChargePointInfo["amount"] = this._getInputIntValue("CHARGE_POINT");
				htChargePointInfo["useAmount"] = this._getInputIntValue("CHARGE_USE_POINT");
			}
		} else if (this._getChargePoint().isChecked() && this._getChargePoint().needBankAccount()) {
			if (this._getOption("remainChargeLimit") >= this._getGeneralPayAmountExceptUsePointAfterCharge()) {
				htChargePointInfo["useAmount"] = this._getGeneralPayAmountExceptUsePointAfterCharge();
			} else {
				htChargePointInfo["useAmount"] = this._getOption("remainChargeLimit");
			}
		}

		return htChargePointInfo;
	},
	openShinhanPartnershipCardBenefitPopup : function(){
		var htUrls = this._getOption("urls");
		var returnUrl = this._getOption("shinhanPartnershipCardReturnUrl");
		var popupUrl = htUrls["partnership.shinhan.card.apply.url"] + "?redirectUrl1=" + returnUrl + "&redirectUrl2=" + returnUrl;

		nmp.openPopup(popupUrl, ["width=380","height=669", "scrollbars=yes", "status=yes", "toolbar=no", "resizable=no"]);
	},
	showNoPaymentLayer : function () {
		this.showDimmedLayer(this._getElement('layer_no_payment'), this._getElement('noPaymentNotice'));
	},
	showUnableSkipPaymentLayer : function () {
		this.showDimmedLayer(this._getElement('dimmed_layer_show_unable_skipPayment'), this._getElement('layer_show_unable_skipPayment'));
	},
	showDimmedLayer : function (elLayer, elNotice) {
		if(!elLayer || !elNotice) {
			return;
		}
		elNotice.css("top", (this._getScrollTop() + (window.innerHeight - elNotice.height()) / 4) + "px");
		elLayer.show();
	},
	hidDimmedLayer : function (we, layerClass) {
		var elHideLayer = this._getElement(layerClass);
		if (elHideLayer) {
			elHideLayer.hide();
		}
	},
	hidDimmedLayerAndUsePayLater : function (we, layerClass) {
		var elHideLayer = this._getElement(layerClass);
		if (elHideLayer) {
			elHideLayer.hide();
		}

		this.usePayLater(true);
	},
	/* 충전가능금액 부족할때 노출 */
	showDimmedLayerRemainChargeAmountShortage: function (){
		this.showDimmedLayer(this._getElement('dimmedRemainChargeAmountShortageLayer'), this._getElement('remainChargeAmountShortageLayer'));
	},
	/* 충전포인트 적용후 결제금액이 남아있는 경우 복합모드 변경전 안내 레이어 노출 */
	showDimmedLayerGeneralPayMethodAutoChoice: function () {

		// 레이어 노출
		this.showDimmedLayer(this._getElement('dimmedLayerForGeneralPayMethodAutoChoiceLayer'), this._getElement('generalPayMethodAutoChoiceLayer'));

		// 남은 금액 세팅
		var welRemainChargeAmount = this._getElement('remainChargeAmountInAutoChoiceLayer');
		if(welRemainChargeAmount) {
			welRemainChargeAmount.html(nmp.front.order.ui.setThousandComma(this._getChargePoint().getRemainChargeAmount()));
		}
	},
	/* 복수모드 주결제수단 자동선택 */
	multipleModePayMethodAutoChoice: function() {
		var oCurrentCheckedGeneralPayMethodTab = this.getCurrentCheckedGeneralPayMethodTab();

		if(oCurrentCheckedGeneralPayMethodTab){
			// 주결제수단 선택 상태 -> 충전결제 클릭 case
			this.changeToMultipleUiMode(oCurrentCheckedGeneralPayMethodTab);
			this.calculateTotalPrice(null, null, "CHARGE_POINT");
		} else {
			// 싱글모드 상태 -> 충전포인트 금액변경 -> 복수모드 전환 case
			// 복수모드 상태 -> 주결제수단 off -> 결제 클릭 case
			var sPayMethodTabId = this.getGeneralPayMethodTabIdForMultipleMode();
			var oPreviousGeneralPayMethodTab = this.getPayMethodTabObject(sPayMethodTabId);
			this.changeToMultipleUiMode(oPreviousGeneralPayMethodTab);
			this.changePaymentByPayMethod(this.getPayMethod());
			this.calculateTotalPrice(null, null, "CHARGE_USE_POINT");
		}

		// 포인트 충전결제 스크롤 이동
		$Element(this._getElement("root").query("#chargePointFocusTrigger")).fireEvent("click");
	},
	/* 충전포인트 적용후 결제금액이 남아있는 경우 복합모드 변경전 안내 레이어 */
	hideDimmedLayerGeneralPayMethodAutoChoice: function () {
		var welDimmedLayer = this._getElement('dimmedLayerForGeneralPayMethodAutoChoiceLayer');
		if(welDimmedLayer) {
			welDimmedLayer.hide();
			this.multipleModePayMethodAutoChoice()
		}
	},
	/* 복수모드 + 충전결제만 선택된 상태 + 결제하기 클릭시, 결제수단 자동 선택 안내 레이어 */
	showDimmedLayerSimplePayMethodAutoChoice: function () {
		this.showDimmedLayer(this._getElement('dimmedLayerSimplePayMethodAutoChoice'), this._getElement('simplePayMethodAutoChoice'));
	},
	hideDimmedLayerSimplePayMethodAutoChoice: function () {
		var welDimmedLayer = this._getElement('dimmedLayerSimplePayMethodAutoChoice');
		if(welDimmedLayer) {
			welDimmedLayer.hide();
			this.multipleModePayMethodAutoChoice()
		}
	},

	/** 포인트충전탭 시작*/
	chargePoint : function() {
		var that = this;

		var checkClassName = 'checking';
		var minChargeAmount = 10000;
		var chargePointIncrement = 10000;
		var minChargePoint = chargePointIncrement;
		var maxChargePoint = this._getOption("remainChargeLimit");

		var wel = {
			/** 충전포인트 탭 영역 */
			getBaseArea: function () {
				return $Element(that._getElement("root").query("._chargePointTab"));
			},
			/* 복수모드 tooltip */
			getHeaderTooltipBox: function () {
				return $Element(wel.getBaseArea().query("._headerTooltipBox"));
			},
			/* 라디오 tab label */
			getRadioLabel: function() {
				return $Element(wel.getBaseArea().query("#chargePointRadioLabel"));
			},
			/* 체크박스 tab label */
			getCheckboxLabel: function() {
				return $Element(wel.getBaseArea().query("#chargePointCheckBoxLabel"));
			},
			/** 충전포인트 탭 레이블 영역 */
			getTabLabel: function () {
				return this.getRadioLabel().visible() ? this.getRadioLabel() : this.getCheckboxLabel();
			},
			/* 적립 뱃지 영역 */
			getBenefitPointArea: function() {
				return $Element(this.getTabLabel().query("._chargeBenefitPoint"));
			},
			/* 적립 뱃지 텍스트 */
			getBenefitPointText: function() {
				return $Element(this.getTabLabel().query("._chargeBenefitPointText"));
			},
			/* 충전결제 tab 헤더 문구(충전결제 가능인경우) */
			getChargePossibleDesc: function () {
				return $Element(this.getTabLabel().query('._chargePossibleDesc'));
			},
			/* 충전결제 tab 헤더 문구(충전결제 불가능한경우) */
			getChargeImPossibleDesc: function () {
				return $Element(this.getTabLabel().query('._chargeImPossibleDesc'));
			},
			/** 단일모드 Radio 버튼 영역 */
			getRadioInputArea: function () {
				return $Element(wel.getBaseArea().query("._payMethodRadio"));
			},
			/* 단일모드 Radio marker */
			getRadioMarker: function () {
				return $Element(wel.getBaseArea().query("._radioMarker"));
			},
			getRadioInput: function () {
				return $Element(wel.getRadioInputArea().query("input"));
			},
			/** 복수모드 Checkbox 버튼 영역 */
			getCheckBoxInputArea: function () {
				return $Element(wel.getBaseArea().query("._payMethodCheckBox"));
			},
			/* 복수모드 체크박스 marker */
			getCheckBoxMarker: function () {
				return $Element(wel.getBaseArea().query("._checkboxMarker"));
			},
			getCheckBoxInput: function () {
				return $Element(wel.getCheckBoxInputArea().query("input"));
			},
			/** 펼침 영역 */
			getOpenArea: function () {
				return $Element(wel.getBaseArea().query("._payMethodTabOpenArea"));
			},
			/* 은행 시스템 점검중 영역 */
			getAllBankUnderMaintenanceArea: function () {
				return $Element(wel.getBaseArea().query("._allBankUnderMaintenanceArea"));
			},
			/* 광고시스템(GFD) 배너 영역 */
			getGFDBannerArea: function () {
				return $Element(wel.getBaseArea().query("#chargePointTabBanner"));
			},
			/** 펼침 영역 - 출금계좌 영역 */
			/* 계좌 리스트 영역 */
			bankListUl: function() {
				return $Element($$.getSingle("._chargedPointBankList"));
			},
			/* 계좌를 등록해주세요 영역  */
			noBankAccountUl: function() {
				return $Element($$.getSingle("._chargedPointNoBankAccount"));
			},
			/* 선택된 계좌 label 영역 */
			bankSelectedLabel: function() {
				return $Element($$.getSingle("._chargedPointBankList .account_selected"));
			},
			/* 선택된 계좌 input 영역(점검중인 경우 포함 + 닫힘 case) */
			bankSelectedInputWithNoPayable: function() {
				var welSelectedBankLabel = $Element($$.getSingle("._chargedPointBankList .current"));
				return welSelectedBankLabel ? $Element(welSelectedBankLabel.query("input")) : null;
			},
			/* 선택된 계좌 input 영역(점검중인 경우 미포함 + 펼침/닫힘 모든 case) */
			bankSelectedInput: function() {
				if (this.bankSelectedLabel()) {
					return $Element($$.getSingle("#" + this.bankSelectedLabel().attr('for')));
				} else {
					return null;
				}
			},
			/** 펼침 영역 - 충전 영역 */
			chargePointDiv: function() {
				return $Element($$.getSingle('._chargePointInputArea'));
			},
			/* 충전 금액 input */
			getChargePointInput: function() {
				return $Element(wel.getBaseArea().query('input[name=CHARGE_POINT]'));
			},
			/* 충전 금액 리셋 X 버튼 */
			chargePointResetButton: function() {
				return $Element($$.getSingle('._chargePointInputArea ._chargePointResetBtn'));
			},
			/** 펼침 영역 - 사용 영역 */
			chargedPointDiv: function() {
				return $Element($$.getSingle('._chargedPointInputArea'));
			},
			/* 사용 금액 text 영역 */
			getUseChargePointEm: function () {
				return $Element(wel.getBaseArea().query('._useChargedPoint em'));
			},
			/* 사용 금액 input */
			getUseChargePointInput: function() {
				return $Element(wel.getBaseArea().query('input[name=CHARGE_USE_POINT]'));
			},
			chargePointCheckboxSpan: function () {
				return $Element($$.getSingle('._charge_point_checkbox_span'));
			},
			chargePointLockedLayer: function () {
				return $Element($$.getSingle('._layer_chargePoint_locked'));
			},
			chargePointLockNotice: function () {
				return $Element($$.getSingle('._chargePointLockNotice'));
			},
			chargePointUseBanner: function () {
				return $Element($$.getSingle('._chargePointUseBanner'));
			},
			expectedChargePointBenefitAmount: function () {
				return $Element($$.getSingle('._expectedChargePointBenefitAmount'));
			},
			/* 광고 영역 */
			getCommonBanner: function() {
				return $Element(wel.getBaseArea().query("._chargedPoint_commonBanner"));
			}
		}

		var _util = {
			cuttingChargePoint: function (num) {
				return Math.floor(num / chargePointIncrement);
			},
			fixChargePoint: function(num) {
				num = this.fixMinChargePoint(num);
				num = this.fixMaxChargePoint(num);
				return num;
			},
			fixMinChargePoint: function(num) {
				return num < minChargePoint ? minChargePoint : num;
			},
			fixMaxChargePoint: function(num) {
				return num > maxChargePoint ? maxChargePoint : num;
			},
			toNumber: function(val) {
				return Number((val+"").replace(/[^0-9]/gi, ''));
			}
		}

		return {
			init: function () {
				if (wel.getBaseArea() == undefined || wel.getBaseArea().visible() == false) {
					return;
				}

				if (this.isAbleToInit()) {
					this.chargePointChecked();
				}

				// 개별 점검중 UI로 변경
				if (!this.isEmptyBankList() && this.isNotExistSelectedBank() && !that._getOption("allEasyBankUnderMaintenance")) {
					this.updatePointView(0, 0);
					this.changeToBankCheckingView();
				}
			},
			/* 층전결제탭 id 반환 */
			getTabId: function () {
				return "chargePoint";
			},

			/** 충전결제탭 UI 범위내 jindo element 반환 함수 */
			getWelRadioInput: function () {
				return wel.getRadioInput();
			},
			/* radio,checkbox 중에서 체크된 input 반환 */
			getWelCheckedInput: function () {
				if(wel.getRadioInputArea().visible() && wel.getRadioMarker().hasClass("radio-checked")) {
					return wel.getRadioInput();
				}

				if(wel.getCheckBoxInputArea().visible() && wel.getCheckBoxMarker().hasClass("checkbox-checked")) {
					return wel.getCheckBoxInput();
				}

				return null;
			},
			/* radio,checkbox 중에서 노출중인 input 반환 */
			getWelVisibleInput: function () {
				if(wel.getRadioInputArea().visible()){
					return wel.getRadioInput();
				}
				if(wel.getCheckBoxInputArea().visible()){
					return wel.getCheckBoxInput();
				}
				return null;
			},

			/** 충전결제탭 UI 범위내 element 제어 함수 */
			/* 충전결제수단 탭 체크 해제 및 input value 초기화 */
			clear: function() {
				this.clearRadio();
				this.clearCheckBox();
				this.hideOpenArea();
				this.updatePointView(0,0);
			},
			/* 충전/사용 input values 초기화 */
			clearUseAndChargePointInputValues: function() {
				wel.getChargePointInput().attr("value", 0);
				wel.getUseChargePointInput().attr("value", 0);
				wel.getUseChargePointEm().html("0");
			},
			/** 탭 영역 제어 */
			/* Radio 버튼 제어 */
			markRadio: function () {
				wel.getRadioMarker().addClass("radio-checked");
				wel.getRadioInput().attr("checked", true);
			},
			clearRadio: function () {
				wel.getRadioMarker().removeClass("radio-checked");
				wel.getRadioInput().attr("checked", false);
			},
			/* Checkbox 버튼 제어 */
			markCheckBox: function() {
				wel.getCheckBoxMarker().addClass("checkbox-checked")
				wel.getCheckBoxInput().attr("checked", true);
			},
			clearCheckBox: function() {
				wel.getCheckBoxMarker().removeClass("checkbox-checked");
				wel.getCheckBoxInput().attr("checked", false);
			},
			/* 단일모드(radio) UI로 변경 */
			switchToRadioBoxUI: function() {
				wel.getHeaderTooltipBox().hide();
				wel.getCheckBoxInputArea().hide();
				wel.getCheckboxLabel().hide();
				wel.getRadioInputArea().show("inline-block");
				wel.getRadioLabel().show("inline-block");
			},
			/* 복수모드(checkbox) UI로 변경 */
			switchToCheckBoxUI: function() {
				wel.getRadioInputArea().hide();
				wel.getRadioLabel().hide();
				wel.getCheckBoxInputArea().show("inline-block");
				wel.getCheckboxLabel().show("inline-block");
				wel.getHeaderTooltipBox().show("block");
			},
			/* disable 해제 */
			releaseDisable: function() {
				wel.getChargePossibleDesc().show("block");
				wel.getChargeImPossibleDesc().hide();
				wel.getRadioInputArea().removeClass("radio-disabled");
				wel.getRadioInput().attr("disabled", false);
			},
			/* 탭 비활성화 */
			disable: function() {
				this.clear();
				wel.getChargePossibleDesc().hide();
				wel.getChargeImPossibleDesc().show("block");
				wel.getRadioInputArea().addClass("radio-disabled");
				wel.getRadioInput().attr("disabled", true);
			},
			/* 탭 비활성화(by 후불결제) */
			disableByPayLater: function() {

				// 남아있는 결제금액 없으면 결제수단탭 비활성화
				var hasRemainGeneralPayAmount = that._getGeneralPayAmountExceptUsePointAfterCharge() > 0;
				if(!hasRemainGeneralPayAmount){
					if (that._htInstance["previousPayMethod"] == undefined || that._htInstance["previousPayMethod"] === "POINT") {
						var payMethod = that.getPayMethod();
						that._htInstance["previousPayMethod"] = (payMethod !== "POINT") ? payMethod : undefined;
					}
					that.visibleControlSettlement(false);
					that.changePaymentByPayMethod("POINT");
					return;
				}

				// 남아있는 결제금액 있으면
				if(that.isPayMethodUiSingleMode()){
					if(that._getChargePoint().isChecked()){
						that.clearGeneralPayMethodTabs();

						var sTabId = that.getGeneralPayMethodTabIdForMultipleMode();
						var oGeneralPayMethod = that.getPayMethodTabObject(sTabId);
						oGeneralPayMethod.markRadio();
						oGeneralPayMethod.showOpenArea();
						that.changePaymentByPayMethod(that.getPayMethod());
					}
				} else {
					// 복수모드인 경우, 주결제수단만 선택되어 있도록 남김
					var oCurrentPayMethodTab = that.getCurrentCheckedGeneralPayMethodTab() ? that.getCurrentCheckedGeneralPayMethodTab() : that.getDefaultGeneralPayMethodTab();
					that.changeToSingleUiMode(oCurrentPayMethodTab);
					that.changePaymentByPayMethod(that.getPayMethod());
				}

				// 포인트 충전결제탭 초기화 및 disable
				this.clear();
				wel.getChargePossibleDesc().hide();
				wel.getChargeImPossibleDesc().html("<b class='bold'>후불결제 사용 시 충전결제 이용이 불가합니다.</b>");
				wel.getChargeImPossibleDesc().show("block");
				wel.getRadioInputArea().addClass("radio-disabled");
				wel.getRadioInput().attr("disabled", true);
			},
			/* 탭 영역 문구 세팅 */
			settingTitleBenefitBanner: function(bannerBennefitInfo) {
				if (wel.getBaseArea() == undefined || wel.getBaseArea().visible() == false) {
					return;
				}

				var benefitAmount = bannerBennefitInfo.benefitAmount;
				var bannerType = bannerBennefitInfo.bannerType;

				// [적립 가능 포인트 미노출 spec]
				//  - 복수모드, 전체은행점검, 등록된 은행 모두 개별은행점검, 결제금액 > 충전가능금액, 충전가능금액 1만원 미만, 적립금 없는 case
				var isBenefitExposureAble = that.isPayMethodUiSingleMode()
					&& !this.isAllBankUnderMaintenance()
					&& (this.isEmptyBankList() || that.getOption("hasPayableBank"))
					&& (maxChargePoint >= that.getGeneralPayAmount() + that.getChargePointInfo()['useAmount'])
					&& (maxChargePoint >= minChargeAmount)
					&& (benefitAmount > 0);

				// 적립 문구 세팅
				var sChargePossibleDescHtml = "추가 적립 받으세요!";
				if (isBenefitExposureAble) {
					sChargePossibleDescHtml = (bannerType === 'type_max_three')
						? "<span class='point'>최대 " + nmp.front.order.ui.setThousandComma(benefitAmount) + "원</span> 적립 받으세요!"
						: "<span class='point'>" + nmp.front.order.ui.setThousandComma(benefitAmount) + "원 적립</span> 받으세요!";
				}

				wel.getChargePossibleDesc().html("포인트 충전해서 결제하고, " + sChargePossibleDescHtml);

				['type_three', 'type_max_three'].map(function(val) {
					if (val == bannerType) {
						wel.getBenefitPointArea().addClass(val);
					} else {
						wel.getBenefitPointArea().removeClass(val);
					}
				});

				switch (bannerType) {
					case 'type_three':
						wel.getBenefitPointText().html('3% 적립');
						break;
					case 'type_max_three':
						wel.getBenefitPointText().html('최대 3% 적립');
						break;
					default:
						wel.getBenefitPointText().html('2.5% 적립');
						break;
				}
			},

			/** 펼침 영역 제어 */
			/* 펼침 영역 노출 */
			showOpenArea: function () {
				this.showCommonBanner();

				wel.getOpenArea().show();
				if(wel.getGFDBannerArea()){
					that.isPayMethodUiSingleMode() ? wel.getGFDBannerArea().show() : wel.getGFDBannerArea().hide();
				}
			},
			/* 펼침 영역 미노출 */
			hideOpenArea: function () {
				this.hideCommonBanner();

				wel.getOpenArea().hide();
			},
			/** 출금계좌 영역 제어 */

			/** 광고 영역 */
			showCommonBanner: function () {
				if(wel.getCommonBanner()){
					wel.getCommonBanner().show();
				}
			},
			hideCommonBanner: function () {
				if(wel.getCommonBanner()){
					wel.getCommonBanner().hide();
				}
			},

			/** 충전 영역 제어 */
			/* 포인트 충전결제 사용 금액 초기화 및 focus */
			reset: function () {
				wel.getChargePointInput().attr('value', 0);
				wel.getChargePointInput()._element.focus();
			},
			/** 사용 영역 제어 */
			/* radio or checkbox input 체크 */
			checkInput: function() {
				this.isSingleMode() ? wel.getRadioInput().attr("checked", true) : wel.getCheckBoxInput().attr("checked", true);
			},
			/** 배너 영역 제어 */
			/* 네이버통장 툴팁 배너 */
			hideSelectedAccountToolipBanner: function() {
				if(wel.bankSelectedLabel()){
					$Element(wel.bankSelectedLabel().parent().query("._naverPayBankbookTooltip")).hide();
				}
			},
			/* 간편계좌영역 충전결제유도 배너 노출 */
			showChargePointUseBannerIfAvailable : function(basicBenefit, expectedChargePoint, expectedChargePointAdditional) {
				var benefitAmount = 0;
				if (that._getOption("easyBankCode").has(that.getPayMethod())) {
					if (that._getSelectedEasyPayBankbookCode() == 'MIRAEASSET_CMA') {
						benefitAmount = basicBenefit + expectedChargePoint + expectedChargePointAdditional;
					} else {
						benefitAmount = basicBenefit + expectedChargePoint;
					}
				}

				if (benefitAmount > 0 && // 충포 예상 적립금액이 존재
					that._getOption("serviceType") != 'C3' &&	// C1, C2
					this.isChargePointAvailableState() &&	// 충포 이용가능
					that.isPayMethodUiSingleMode() && // 싱글모드인경우
					that.isSelectedEasyPayBankPayable(that.getPayMethod()) &&	// 간편계좌
					that.isEasyPayRegistrationMethod(that.getPayMethod(), "BANK") === false &&	// 계좌추가 섹션이 아닐때
					maxChargePoint >= that.getGeneralPayAmount() + that.getChargePointInfo()['useAmount'] && // 충전가능금액 > 결제금액
					this.validateMinimumAvailableChargePoint() &&	// 최소 충전단위 이상 충전가능
					that._getPayLaterAmount() <= 0) {	// 후불결제 미 체크 상태
					wel.chargePointUseBanner().show();
					wel.expectedChargePointBenefitAmount().html(nmp.front.order.ui.setThousandComma(benefitAmount));
					that._getElement("easyPayBankFlickArea").addClass('banner');
				} else {
					this.hideChargePointUseBanner();
				}
			},
			/* 간편계좌영역 충전결제유도 배너 클릭 이벤트 핸들러 */
			changeToChargePoint : function(htEvent) {
				// 간편계좌 영역에서 선택한 계좌 선택
				var selBankBook = $Element($$.getSingle("#chargeBank_" + that._getSelectedEasyPayCKey(that.getPayMethod())));

				if (selBankBook != null) {
					that.chooseChargeAccount(null, selBankBook, true);
					var bIsOpened = that._getElement("chargePointBankListToggleButton") != undefined && that._getElement("chargePointBankListToggleButton").hasClass("close");
					that.setChargePointBankList(bIsOpened);
				}
				// 충전결제 영역 활성화
				this.activateChargePoint();
			},
			/* 충전결제 유도 배너 - 적립 금액 및 퍼센트 정보 */
			getBannerBennefitInfo: function(basicBenefit, expectedChargePoint, expectedChargePointAdditional){
				var benefitAmount = 0;
				var bannerType = "";
				var bankData = this.selectedBankData();

				if (bankData != null) {
					if (bankData.isNaverpayBankbook) {
						bannerType = 'type_three';
						benefitAmount = basicBenefit + expectedChargePoint + expectedChargePointAdditional;
					} else {
						benefitAmount = basicBenefit + expectedChargePoint;
					}
				} else if (this.needBankAccount()) {
					bannerType = 'type_max_three';
					benefitAmount = basicBenefit + expectedChargePoint + expectedChargePointAdditional;
				} else if (!that.getOption("hasPayableBank")) {
					if(this.selectedBankDataWithNoPayable() && this.selectedBankDataWithNoPayable().isNaverpayBankbook){
						bannerType = 'type_three';
						benefitAmount = basicBenefit + expectedChargePoint + expectedChargePointAdditional;
					} else {
						benefitAmount = basicBenefit + expectedChargePoint;
					}
				}

				return { benefitAmount: benefitAmount, bannerType: bannerType, bankData: bankData }
			},
			/* 충전결제 유도 배너 - 최대 3퍼 적립 금액 및 퍼센트 정보 */
			getMaxThreeBenefitInfo: function(basicBenefit, expectedChargePoint, expectedChargePointAdditional){
				var bannerType = 'type_max_three';
				var benefitAmount = basicBenefit + expectedChargePoint + expectedChargePointAdditional;

				return { bannerType: bannerType,  benefitAmount: benefitAmount }
			},
			/* 충전결제 유도배너 노출 가능 여부 반환 */
			isChargePointUseBannerVisible: function(benefitAmount){

				// 노출 조건
				var isMaxCharPointMoreThanOrderPayAmount = (maxChargePoint >= that.getGeneralPayAmount() + that.getChargePointInfo()['useAmount']); // 충전가능금액 > 결제금액
				// 미노출 조건
				var isExistGeneralPayAmountAfterChargePointUse = (that.getChargePointInfo()['useAmount'] > 0) && (that._getGeneralPayAmountExceptPayLaterAmount() > 0); // 충전결제 사용시, 남은 결제 금액이 있는지
				var isExistGeneralPayAmountAfterPayLaterUse = (that._getPayLaterAmount() > 0) && (that._getGeneralPayAmountExceptUsePointAfterCharge() > 0); // 후불결제 사용시, 남은 결제 금액이 있는지

				// 충전결제유도 카드배너 노출 여부 필터링
				var isVisible = benefitAmount > 0 &&	// 충전결제 예상 적립금액 존재 여부 확인
					that._getOption("serviceType") != 'C3' &&	// C1, C2
					this.isChargePointAvailableState() &&	// 충전결제 element 상태 확인
					this.validateMinimumAvailableChargePoint() && // 최소 충전단위 이상 충전가능
					!that.isAllChargePointBankUnderMaintenance() && // 모든 은행이 점검중인 상태가 아닌 경우
					that.isPayMethodUiSingleMode() && // 복수모드에서는 미노출
					isMaxCharPointMoreThanOrderPayAmount &&
					!isExistGeneralPayAmountAfterChargePointUse &&
					!isExistGeneralPayAmountAfterPayLaterUse;

				return isVisible;
			},
			/* 간편카드결제 > 충전결제유도 배너 "노출 여부" 및 "문구" 세팅 */
			settingChargePointUseCardBanner : function(bannerBennefitInfo){
				// 배너 컴포넌트 미존재시 예외처리
				var welChargePointUseCardBanner = that._getElement("chargePointUseCardBanner");
				if(!welChargePointUseCardBanner) {
					return;
				}

				// 충전결제 적립 혜택 정보 추출
				var benefitAmount = bannerBennefitInfo.benefitAmount;
				var bannerType = bannerBennefitInfo.bannerType;

				// 노출 조건
				var isExistRegisteredEasyPayCard = that._htInstance["easyPayCardFlicking"] && (that._htInstance["easyPayCardFlicking"].getTotalPanels() > 1); // 등록된 간편 카드가 1개 이상 존재하는지 ( 카드 추가 플레이트 제외 )

				// 충전결제유도 카드배너 노출 여부 필터링
				var isVisible = this.isChargePointUseBannerVisible(benefitAmount) && isExistRegisteredEasyPayCard;

				if (isVisible) {
					// 충전결제 적립 혜택 금액 & 퍼센트 세팅
					var benefitPercent = (bannerType === "type_three" || bannerType === "type_max_three") ? "3%" : "2.5%";
					var welVisibleCardBanner = that._getElement("chargePointUseCreditCard").visible() ? that._getElement("chargePointUseCreditCard") : that._getElement("chargePointUseCheckCard");
					$Element(welVisibleCardBanner.query("._chargePointBenefitAmount")).html(nmp.front.order.ui.setThousandComma(benefitAmount));
					$Element(welVisibleCardBanner.query("._chargePointBenefitPercent")).html("("+benefitPercent+")");

					welChargePointUseCardBanner.show();
				} else {
					welChargePointUseCardBanner.hide();
				}
			},
			/* 일반결제(신용카드,휴대폰,나중에결제) > 충전결제유도 배너 "노출 여부" 및 "문구" 세팅 */
			settingChargePointUseGeneralPaymentBanner : function(bannerBennefitInfo){

				// 충전결제 적립 혜택 정보 추출
				var benefitAmount = bannerBennefitInfo.benefitAmount;
				var bannerType = bannerBennefitInfo.bannerType;

				// 일반결제수단 충전결제 유도배너 혜택 정보 세팅
				var welChargePointUseGeneralPaymentBanner = $Element(that._getElement("root").query("._chargePointUseGeneralPaymentBanner"));
				if(!welChargePointUseGeneralPaymentBanner){
					return;
				}

				// 충전결제 적립 혜택 금액 & 퍼센트 세팅 & 배너 숨기기
				var benefitPercent = (bannerType === "type_three" || bannerType === "type_max_three") ? "3%" : "2.5%";
				$Element(welChargePointUseGeneralPaymentBanner.query("._chargePointBenefitAmount")).html("최대 "+ nmp.front.order.ui.setThousandComma(benefitAmount) +"원");
				$Element(welChargePointUseGeneralPaymentBanner.query("._chargePointBenefitPercent")).html('<span class="bracket">(</span>' + benefitPercent + '<span class="bracket">)</span>');
				welChargePointUseGeneralPaymentBanner.hide();

				// 일반결제수단 탭 선택 여부 확인
				if(that.isNoPaymentAreaVisible() || !that.generalPayTab().isChecked()){
					return;
				}

				// 선택된 일반 결제수단 확인
				var selectedGeneralPayMenas = "";
				$A(that._getElement("generalPaymentsList").queryAll("._payMeansClass")).forEach(function(elPayMeansClassInput){
					var welPayMeansClassInput = $Element(elPayMeansClassInput);
					if(welPayMeansClassInput.attr("checked")){
						selectedGeneralPayMenas = welPayMeansClassInput.attr("value");
						$A.Break();
					}
				})

				var nClickNameMap = {
					"CREDIT_CARD" : "general_chargepoint_card",
					"BANK" : "general_chargepoint_realaccount",
					"MOBILE" : "general_chargepoint_phone",
					"SKIP" : "general_chargepoint_later"
				};

				// 선택된 일반결제수단 유형에 맞는 nclick 전환
				that.changeNclickComment(welChargePointUseGeneralPaymentBanner, nClickNameMap[selectedGeneralPayMenas]);

				// 배너 노출
				if(this.isChargePointUseBannerVisible(benefitAmount)){
					welChargePointUseGeneralPaymentBanner.show();
				}

			},
			/* 계좌간편영역 충전결제유도 배너 미노출 */
			hideChargePointUseBanner : function() {
				if (wel.chargePointUseBanner() && wel.chargePointUseBanner().visible()) {
					wel.chargePointUseBanner().hide();
					that._getElement("easyPayBankFlickArea").removeClass('banner');
				}
			},

			/** 상태 반환 함수 */
			hasBaseArea: function() {
				return wel.getBaseArea() ? true : false;
			},
			/* 보유포인트 전액사용 선택상태이고, 보유포인트 차감후 결제금액이 존재하는지 반환 */
			isUseAllPointAndNoRemainOrderPayAmount: function() {
				return that.isUseAllPointChecked() && that._getOrderPayAmountMinusMileageAmount() <= 0;
			},
			/* 포인트충전결제탭 초기화할지 반환 */
			isAbleToInit : function() {
				var checked = false;
				if (that._getOption("defaultSubPaymentInfo")["payMeansClassType"] == 'CHARGED_POINT') {
					checked = true;
				}

				if (this.isUseAllPointAndNoRemainOrderPayAmount()) {
					checked = false;
				}

				// 충전가능금액이 최소충전금액보다 작은 경우
				if (maxChargePoint < minChargeAmount) {
					checked = false;
				}

				return checked
			},
			/* 충전결제탭 존재하는지 반환 */
			isExist: function() {
				return wel.getBaseArea() ? true : false;
			},
			/* 충전결제탭 선택 여부 반환 */
			isChecked: function () {
				return (wel.getBaseArea() && this.getWelCheckedInput()) ? true : false;
			},
			/* 충전결제탭 비활성화 여부 반환 */
			isDisabled: function () {
				return wel.getRadioInputArea().hasClass("radio-disabled");
			},
			/* 충전결제탭 단일모드 UI 여부 반환 */
			isSingleMode: function () {
				return wel.getRadioInputArea().visible() ? true : false;
			},
			/* 모든 은행점검중인 상태인지 반환 */
			isAllBankUnderMaintenance: function () {
				return wel.getAllBankUnderMaintenanceArea() ? true : false;
			},
			/* 충전 가능한 은행 존재하는지 반환*/
			isPayable: function () {
				// 모든 은행이 점검중
				// 등록 은행계좌가 하나도 없음
				if (this.isNotExistSelectedBank() || this.isEmptyBankList()) {
					return false;
				}
				return true;
			},
			/* 선택된 계좌가 없는지 반환 */
			isNotExistSelectedBank: function () {
				return wel.bankSelectedLabel() ? false : true;
			},
			/* 등록된 출금계좌가 없는지 반환 */
			isEmptyBankList: function () {
				if (wel.noBankAccountUl()) {
					return true;
				}
				return false;
			},
			/* 점검중이 아닌 상태일때, 계좌 등록이 필요한 상태인지 반환 */
			needBankAccount: function () {
				return wel.noBankAccountUl() && that.isAllChargePointBankUnderMaintenance() == false;
			},
			/* 계좌 없고, 결제금액이 충전가능금액보다 큰지 반환 */
			isEmptyBankAndExceedRemainChargeAmount: function() {
				return that.isPayMethodUiSingleMode() && this.isChecked() && this.isEmptyBankList()
					&& that._getGeneralPayAmountExceptUsePointAfterCharge() > this.getRemainChargeAmount();
			},
			/* 충전결제선택됨 && (모든은행 점검중 or 등록된 계좌 없음) 상태인지 반환 */
			isCheckedWithNoPayable: function() {
				return this.isChecked() && !this.isPayable();
			},
			/** 출금계좌, 충전금액, 사용금액 관련 함수 */
			/* 충전가능금액 반환 */
			getRemainChargeAmount: function() {
				return that._getOption("remainChargeAmount");
			},
			/* 입력되어있는 충전, 사용할 금액 반환 */
			value: function() {
				return {
					chargePoint: _util.toNumber(wel.getChargePointInput().attr('value')),
					chargedPoint: _util.toNumber(wel.getUseChargePointInput().attr('value'))
				}
			},
			/* 선택된 출금계좌 정보 반환 */
			calculate: function (totalAccountPrice, totalDiscountPrice, isAutoSettingChargePoint, isUseAlert) {
				// 점검중 확인
				if (this.isNotExistSelectedBank() && !this.needBankAccount()) {
					return { chargePoint: 0, useChargePoint: 0 }
				}

				var needChargePoint = totalAccountPrice - totalDiscountPrice;
				var chargePoint = 0;
				var inputChargePoint = undefined;
				if (isAutoSettingChargePoint) { // 자동조정액은 최소 최대 값을 맞춰서 계산
					var autoSettingChargePoint = (needChargePoint % chargePointIncrement) == 0
						? needChargePoint : (_util.cuttingChargePoint(needChargePoint) * chargePointIncrement) + chargePointIncrement;
					chargePoint = _util.fixChargePoint(autoSettingChargePoint);
				} else {
					inputChargePoint = wel.getChargePointInput() ? (_util.toNumber(wel.getChargePointInput().attr('value')) || 0) : 0;
					chargePoint = inputChargePoint;

					if (!this.validateMinChargePoint(chargePoint)) {
						chargePoint = _util.fixMinChargePoint(chargePoint);
					} else if (!this.validateMaxChargePoint(chargePoint)) {
						chargePoint = _util.fixMaxChargePoint(chargePoint);
					} else if (chargePoint % chargePointIncrement != 0) {
						chargePoint = chargePoint + chargePointIncrement;
					}
				}

				if (chargePoint >= maxChargePoint) {
					chargePoint = maxChargePoint;
				} else {
					chargePoint = (_util.cuttingChargePoint(chargePoint) * chargePointIncrement);
				}

				if (inputChargePoint != undefined && inputChargePoint != chargePoint && isUseAlert) {
					// 입력한 값이 보정된 경우.
					alert("최소 1만원부터 1만원 단위로 최대 " + nmp.front.order.ui.setThousandComma(maxChargePoint) + "원까지 충전 가능합니다.");
				}

				// (총금액 - 총할인금액) = 충전포인트결제대상액
				// 충전포인트결제대상액 - 충전포인트 > 0 ? 충전포인트 : 충전포인트결제대상액
				var useChargePoint = (needChargePoint - chargePoint) > 0 ? chargePoint : needChargePoint;
				useChargePoint = useChargePoint < 0 ? 0 : useChargePoint;

				return {
					chargePoint: chargePoint,
					useChargePoint: useChargePoint
				}
			},
			/* 충전, 사용할 금액을 계산하여 반환 ( 자동 or Input 입력값에 의해서 계산 ) */
			selectedBankData: function() {
				var el = wel.bankSelectedInput();

				if (!el) {
					return null;
				}
				return {
					accountKey: el.attr("data-account-key"),
					code: el.attr("data-code"),
					maskedAccountNo: el.attr("data-masked-account-no"),
					name: el.attr("data-name"),
					payBankbookCode: el.attr("data-pay-bankbook-code"),
					isNaverpayBankbook: el.attr("data-pay-bankbook") == 'true' ? true : false
				}
			},
			selectedBankDataWithNoPayable : function () {
				var welNoPayableBankInput = wel.bankSelectedInputWithNoPayable();
				return welNoPayableBankInput ? { isNaverpayBankbook: welNoPayableBankInput.attr("data-pay-bankbook") == 'true' ? true : false } : null;
			},
			/* 최대충전가능금액보다 충전금액이 작은면 유효성 통과 */
			validateMaxChargePoint : function(chargePoint) {
				chargePoint = chargePoint || this.value().chargePoint;
				if (maxChargePoint < chargePoint) {
					return false;
				}
				return true;
			},
			/* 최소충전금액보다 충전금액이 크면 유효성 통과 */
			validateMinChargePoint : function(chargePoint) {
				chargePoint = chargePoint || this.value().chargePoint;
				if (minChargePoint > chargePoint) {
					return false;
				}
				return true;
			},
			/* 충전가능금액이 최소충전금액 보다 큰지 반환 */
			validateMinimumAvailableChargePoint : function() {
				return maxChargePoint >= minChargeAmount;
			},
			/* 충전, 사용할 금액 UI 및 input에 반영 */
			updatePointView: function (chargePoint, useChargePoint) {
				if (that.isAllChargePointBankUnderMaintenance() === false) {
					wel.getChargePointInput().attr('value', nmp.front.order.ui.setThousandComma(chargePoint));
					wel.getUseChargePointInput().attr('value', nmp.front.order.ui.setThousandComma(useChargePoint));
					wel.getUseChargePointEm().text(nmp.front.order.ui.setThousandComma(useChargePoint));
				}
			},
			/* 충전, 사용할 금액 계산 및 UI 반영 ( + 사용할 금액 반환 ) */
			calculateAndUpdatePointView: function (totalAccountPrice, totalDiscountPrice, isAutoSettingChargePoint, isUseAlert) {
				var pointInfo = this.calculate(totalAccountPrice, totalDiscountPrice, isAutoSettingChargePoint, isUseAlert);
				this.updatePointView(pointInfo.chargePoint, pointInfo.useChargePoint);

				return pointInfo.useChargePoint;
			},

			/* 포인트 충전결제탭 활성화 */
			activateChargePoint: function(htEvent) {
				if(!that.isPayMethodUiSingleMode()) {
					return;
				}

				if(that._getPayLater().isChecked()){
					that._getPayLater().clearUseAmount();
				}

				that.clearGeneralPayMethodTabs();
				this.clear();
				this.markRadio();
				this.showOpenArea();

				that.calculateTotalPrice(null, null, "CHARGE_POINT", null);
			},
			/* 포인트 충전결제 사용 가능 상태인지 반환 */
			isChargePointAvailableState: function () {
				// 모든 은행이 점검중
				// 등록 은행계좌가 하나도 없음
				if (wel.getBaseArea() == null || wel.getBaseArea().visible() == false || that.isAllChargePointBankUnderMaintenance()  || this.isEmptyBankList()) {
					return false;
				}

				return true;
			},
			/* 포인트 충전결제탭 클릭 */
			chargePointChecked : function() {
				if (this.validateMinimumAvailableChargePoint() === false) {
					alert("최소 1만원부터 충전 가능합니다.\n" + "(현재 충전 가능 금액 : " + nmp.front.order.ui.setThousandComma(maxChargePoint) + "원)");
					return false;
				}
				if (this.isDisabled() === true) {
					that.showDimmedLayer(wel.chargePointLockedLayer(), wel.chargePointLockNotice());
					return false;
				}

				if(that.isMultipleModeCommonCondition()) {
					//복수모드
					var tabId = that.getGeneralPayMethodTabIdForMultipleMode();
					that.changeToMultipleUiMode(that.getPayMethodTabObject(tabId));
					that.changePaymentByPayMethod(that.getPayMethod());
				} else {
					// 단일모드
					that.clearGeneralPayMethodTabs();
					this.markRadio();
					this.showOpenArea();
				}

				return true;
			},
			toggle: function() {
				var reCalculateTotalPrice = true;
				if (this.isChecked()) {
					reCalculateTotalPrice = this.chargePointChecked();
				} else {
					this.clear();
				}
				if (reCalculateTotalPrice === true) {
					that.calculateTotalPrice(null, null, null, null);
				}
			},
			/* 새로고침시 포인트충전결제탭 체크 */
			doCheckChargePoint: function (doCheck) {
				if(!that.isPayMethodUiSingleMode()){
					return;
				}

				if (doCheck) {
					if(!this.isUseAllPointAndNoRemainOrderPayAmount() && this.isDisabled()) {
						this.releaseDisable();
					}
					this.chargePointChecked();
				} else {
					this.clear();
				}
			},
			/* 포인트 충전결제 영역 점검중 element disable 해제 */
			releaseBankCheckingView: function () {
				if (this.selectedBankData() != null) {
					wel.chargePointResetButton().attr('disabled', false);
					wel.chargePointDiv().attr('disabled', false);
					wel.getChargePointInput().attr('disabled', false);
					wel.chargePointDiv().removeClass(checkClassName);
					wel.chargedPointDiv().removeClass(checkClassName);
				}
			},
			/* 포인트 충전결제 영역 점검중 view로 변경  */
			changeToBankCheckingView: function () {
				wel.chargePointResetButton().attr('disabled', true);
				wel.chargePointDiv().attr('disabled', true);
				wel.getChargePointInput().attr('disabled', true);
				wel.chargePointDiv().addClass(checkClassName);
				wel.chargedPointDiv().addClass(checkClassName);
			},

		}
	},

	/** 포인트충전결탭 관련 public 함수 */
	// 포인트 충전결테 object 반환
	_getChargePoint : function() {
		return this._htInstance["chargePoint"];
	},
	// 새로고침시 storgae에 저장된 결제수단이 포인트 충전결제일때, 포인트 충전결제 선택
	doCheckChargePoint : function(doCheck){
		this._getChargePoint().doCheckChargePoint(doCheck);
	},
	// 충전 금액 초기화(X 버튼) 클릭 이벤트 핸들러
	chargePointReset : function() {
		this._getChargePoint().reset();
	},
	// 포인트 충전결제 사용 가능 상태인지 반환
	isChargePointAvailableState : function() {
		return this._getChargePoint().isChargePointAvailableState();
	},
	// 계좌간편결제 영역 > 충전결제 유도배너 클릭 이벤트 핸들러
	changeToChargePoint : function(htEvent) {
		return this._getChargePoint().changeToChargePoint(htEvent);
	},
	// 카드간편결제, 일반결제 영역 > 충전결제 유도배너 클릭 이벤트 핸들러
	activateChargePoint : function(htEvent) {
		return this._getChargePoint().activateChargePoint(htEvent);
	},
	// 사용할 충전 포인트가 존재하는데, 등록된 계좌가 없는지 여부 반환
	needBankAccountToCharge : function() {
		return this._getUsePointAfterCharge() > 0 && this._getChargePoint().needBankAccount();
	},
	// 포인트충전탭 영역 > 충전 금액 input blur 이벤트 핸들러
	calculateTotalPriceOnBlur : function(we) {
		// 단일모드 case
		var nEnteredChargePoint = parseInt(we.element.value.replace(/[,]/g,""), 10);
		var isUseAlert = !this._getChargePoint().validateMinChargePoint(nEnteredChargePoint) || !this._getChargePoint().validateMaxChargePoint(nEnteredChargePoint);
		var nDefaultUseChargePoint = this._getChargePoint().calculateAndUpdatePointView(this.getTotalAccountPrice(), this.getDiscountAmount(), false, isUseAlert);

		// 결제금액 > 충전금액(입력한 금액 or 최소/최대 충전가능금액)
		if(this.isPayMethodUiSingleMode() && this._getGeneralPayAmountExceptUsePointAfterCharge() - nDefaultUseChargePoint > 0){
			// 복수모로 변경
			var sPayMethodTabId = this.getGeneralPayMethodTabIdForMultipleMode();
			var oPreviousGeneralPayMethodTab = this.getPayMethodTabObject(sPayMethodTabId);
			this.changeToMultipleUiMode(oPreviousGeneralPayMethodTab);
			this.changePaymentByPayMethod(this.getPayMethod());
		}

		// 입력한 충전금액 적용
		this.calculateTotalPrice(null, null, "CHARGE_USE_POINT");
	},

	/** 포인트충전탭 끝*/

	/** 계좌간편결제탭 시작 */
	bankEasyPayTab: function() {
		var that = this;

		var wel = {
			getBaseArea: function () {
				return $Element(that._getElement("root").query("._naverPaymentsBankTab"));
			},
			/* 라디오, 체크박스 label */
			getRadioCheckboxLabel: function() {
				return $Element(wel.getBaseArea().query("label"));
			},
			getRadioInputArea: function () {
				return $Element(wel.getBaseArea().query("._payMethodRadio"));
			},
			getRadioInput: function () {
				return $Element(wel.getRadioInputArea().query("input"));
			},
			getCheckBoxInputArea: function () {
				return $Element(wel.getBaseArea().query("._payMethodCheckBox"));
			},
			getCheckBoxInput: function () {
				return $Element(wel.getCheckBoxInputArea().query("input"));
			},
			getRadioMarker: function () {
				return $Element(wel.getBaseArea().query("._radioMarker"));
			},
			getCheckBoxMarker: function () {
				return $Element(wel.getBaseArea().query("._checkboxMarker"));
			},
			/* 펼침 영역 */
			getOpenArea: function () {
				return $Element(wel.getBaseArea().query("._payMethodTabOpenArea"));
			},
			/* 탭 주결제수단 금액 영역 */
			getGeneralPaymentAmount: function () {
				return $Element(wel.getBaseArea().query("._generalPaymentAmount"));
			},
			/* 광고 영역 */
			getCommonBanner: function() {
				return $Element(wel.getBaseArea().query("._easyPay_bank_commonBanner"));
			}
		};
		return {
			hasBaseArea: function() {
				return wel.getBaseArea() ? true : false;
			},
			isChecked: function () {
				return (wel.getBaseArea() && this.getWelCheckedInput()) ? true : false;
			},
			getWelCheckedInput: function () {
				if(wel.getRadioInputArea().visible() && wel.getRadioMarker().hasClass("radio-checked")) {
					return wel.getRadioInput();
				}

				if(wel.getCheckBoxInputArea().visible() && wel.getCheckBoxMarker().hasClass("checkbox-checked")) {
					return wel.getCheckBoxInput();
				}

				return null;
			},
			getTabId: function () {
				return "naverPaymentsBank";
			},
			showOpenArea: function () {
				if(wel.getBaseArea()){
					this.showCommonBanner();

					wel.getOpenArea().show();
				}
			},
			hideOpenArea: function () {
				if(wel.getBaseArea()){
					this.hideCommonBanner();

					wel.getOpenArea().hide();
				}
			},
			showCommonBanner: function () {
				if(wel.getCommonBanner()){
					wel.getCommonBanner().show();
				}
			},
			hideCommonBanner: function () {
				if(wel.getCommonBanner()){
					wel.getCommonBanner().hide();
				}
			},
			switchToRadioBoxUI: function() {
				wel.getCheckBoxInputArea().hide();
				wel.getRadioCheckboxLabel().attr("for", this.getTabId() + "Radio");
				wel.getRadioInputArea().show("inline-block");
			},
			switchToCheckBoxUI: function() {
				wel.getRadioInputArea().hide();
				wel.getRadioCheckboxLabel().attr("for", this.getTabId() + "CheckBox");
				wel.getCheckBoxInputArea().show("inline-block");
			},
			/* Radio 버튼 제어 */
			markRadio: function () {
				wel.getRadioMarker().addClass("radio-checked");
				wel.getRadioInput().attr("checked", true);
			},
			clearRadio: function () {
				wel.getRadioMarker().removeClass("radio-checked");
				wel.getRadioInput().attr("checked", false);
			},
			/* Checkbox 버튼 제어 */
			markCheckBox: function() {
				wel.getCheckBoxMarker().addClass("checkbox-checked")
				wel.getCheckBoxInput().attr("checked", true);
			},
			clearCheckBox: function() {
				wel.getCheckBoxMarker().removeClass("checkbox-checked");
				wel.getCheckBoxInput().attr("checked", false);
			},
			/* 탭 주결제수단 금액 보이기 */
			showGeneralPaymentAmount: function(amount){
				if (amount > 0) {
					wel.getGeneralPaymentAmount().html(nmp.front.order.ui.setThousandComma(amount) + '원');
					wel.getGeneralPaymentAmount().removeClass('off');
				}
			},
			/* 탭 주결제수단 금액 숨기기 */
			hideGeneralPaymentAmount: function(){
				wel.getGeneralPaymentAmount().addClass('off');
			},
			/* 탭 영역 초기화 */
			clear: function() {
				this.hideOpenArea();
				this.clearRadio();
				wel.getRadioInput().attr("checked", false);
				this.clearCheckBox();
				wel.getCheckBoxInput().attr("checked", false);
			}
		};
	},
	/** 계좌간편결제탭 끝 */

	/** 카드간편결제탭 시작 */
	cardEasyPayTab: function() {
		var that = this;
		var wel = {
			getBaseArea: function () {
				return $Element(that._getElement("root").query("._naverPaymentsCardTab"));
			},
			/* 라디오, 체크박스 label */
			getRadioCheckboxLabel: function() {
				return $Element(wel.getBaseArea().query("label"));
			},
			getRadioInputArea: function () {
				return $Element(wel.getBaseArea().query("._payMethodRadio"));
			},
			getRadioInput: function () {
				return $Element(wel.getRadioInputArea().query("input"));
			},
			getCheckBoxInputArea: function () {
				return $Element(wel.getBaseArea().query("._payMethodCheckBox"));
			},
			getCheckBoxInput: function () {
				return $Element(wel.getCheckBoxInputArea().query("input"));
			},
			getRadioMarker: function () {
				return $Element(wel.getBaseArea().query("._radioMarker"));
			},
			getCheckBoxMarker: function () {
				return $Element(wel.getBaseArea().query("._checkboxMarker"));
			},
			/* 펼침 영역 */
			getOpenArea: function () {
				return $Element(wel.getBaseArea().query("._payMethodTabOpenArea"));
			},
			/* 탭 주결제수단 금액 영역 */
			getGeneralPaymentAmount: function () {
				return $Element(wel.getBaseArea().query("._generalPaymentAmount"));
			},
			getTextBanner: function() {
				return wel.getShinhanTextBanner() || wel.getMembershipPlccTextBanner();
			},
			/* 신한카드 텍스트 배너 영역 */
			getShinhanTextBanner: function () {
				return $Element(wel.getBaseArea().query("._shinhanTextBanner"));
			},
			/* 멤버십 plcc 배너 영역 */
			getMembershipPlccTextBanner: function() {
				return $Element(wel.getBaseArea().query("._membershipPlccTextBanner"));
			},
			/* 광고 영역 */
			getCommonBanner: function() {
				return $Element(wel.getBaseArea().query("._easyPay_creditCard_commonBanner"));
			}
		};
		return {
			hasBaseArea: function() {
				return wel.getBaseArea() ? true : false;
			},
			isChecked: function () {
				return (wel.getBaseArea() && this.getWelCheckedInput()) ? true : false;
			},
			getWelCheckedInput: function () {
				if(wel.getRadioInputArea().visible() && wel.getRadioMarker().hasClass("radio-checked")) {
					return wel.getRadioInput();
				}

				if(wel.getCheckBoxInputArea().visible() && wel.getCheckBoxMarker().hasClass("checkbox-checked")) {
					return wel.getCheckBoxInput();
				}

				return null;
			},
			getTabId: function () {
				return "naverPaymentsCard";
			},
			showOpenArea: function () {
				if(wel.getBaseArea()){
					this.showTextBanner();
					this.showCommonBanner();

					wel.getOpenArea().show();
				}
			},
			hideOpenArea: function () {
				if(wel.getBaseArea()){
					this.hideTextBanner();
					this.hideCommonBanner();

					wel.getOpenArea().hide();
				}
			},
			showTextBanner: function () {
				if(that.isPayMethodUiSingleMode() && wel.getTextBanner()){
					wel.getTextBanner().show();
				}
			},
			hideTextBanner: function () {
				if(wel.getTextBanner()){
					wel.getTextBanner().hide();
				}
			},
			showCommonBanner: function () {
				if(that.isPayMethodUiSingleMode() && wel.getCommonBanner()){
					wel.getCommonBanner().show();
				}
			},
			hideCommonBanner: function () {
				if(wel.getCommonBanner()){
					wel.getCommonBanner().hide();
				}
			},
			switchToRadioBoxUI: function() {
				wel.getCheckBoxInputArea().hide();
				wel.getRadioCheckboxLabel().attr("for", this.getTabId() + "Radio");
				wel.getRadioInputArea().show("inline-block");
			},
			switchToCheckBoxUI: function() {
				wel.getRadioInputArea().hide();
				wel.getRadioCheckboxLabel().attr("for", this.getTabId() + "CheckBox");
				wel.getCheckBoxInputArea().show("inline-block");
			},
			/* Radio 버튼 제어 */
			markRadio: function () {
				wel.getRadioMarker().addClass("radio-checked");
				wel.getRadioInput().attr("checked", true);
			},
			clearRadio: function () {
				wel.getRadioMarker().removeClass("radio-checked");
				wel.getRadioInput().attr("checked", false);
			},
			/* Checkbox 버튼 제어 */
			markCheckBox: function() {
				wel.getCheckBoxMarker().addClass("checkbox-checked")
				wel.getCheckBoxInput().attr("checked", true);
			},
			clearCheckBox: function() {
				wel.getCheckBoxMarker().removeClass("checkbox-checked");
				wel.getCheckBoxInput().attr("checked", false);
			},
			/* 탭 주결제수단 금액 보이기 */
			showGeneralPaymentAmount: function(amount){
				if (amount > 0) {
					wel.getGeneralPaymentAmount().html(nmp.front.order.ui.setThousandComma(amount) + '원');
					wel.getGeneralPaymentAmount().removeClass('off');
				}
			},
			/* 탭 주결제수단 금액 숨기기 */
			hideGeneralPaymentAmount: function(){
				wel.getGeneralPaymentAmount().addClass('off');
			},
			/* 탭 영역 초기화 */
			clear: function() {
				this.hideOpenArea();
				this.clearRadio();
				wel.getRadioInput().attr("checked", false);
				this.clearCheckBox();
				wel.getCheckBoxInput().attr("checked", false);
			}
		};
	},
	/** 카드간편결제탭 끝 */

	/** 일반결제탭 시작 */
	generalPayTab: function() {
		var that = this;
		var wel = {
			getBaseArea: function () {
				return $Element(that._getElement("root").query("._generalPaymentsTab"));
			},
			/* 일반결제수단 유형 영역 */
			getGeneralPaymentListArea: function () {
				return $Element(wel.getBaseArea().query("._generalPaymentsList"));
			},
			/* 라디오, 체크박스 label */
			getRadioCheckboxLabel: function() {
				return $Element(wel.getBaseArea().query("label"));
			},
			getRadioInputArea: function () {
				return $Element(wel.getBaseArea().query("._payMethodRadio"));
			},
			getRadioInput: function () {
				return $Element(wel.getRadioInputArea().query("input"));
			},
			getCheckBoxInputArea: function () {
				return $Element(wel.getBaseArea().query("._payMethodCheckBox"));
			},
			getCheckBoxInput: function () {
				return $Element(wel.getCheckBoxInputArea().query("input"));
			},
			getRadioMarker: function () {
				return $Element(wel.getBaseArea().query("._radioMarker"));
			},
			getCheckBoxMarker: function () {
				return $Element(wel.getBaseArea().query("._checkboxMarker"));
			},
			/* 일반결제 유형(CREDIT_CARD, BANK, MOBILE, SKIP, POINT) radio 마킹 영역 리스트 반환  */
			getPayMeansClassRadioMarkers: function () {
				return $ElementList(wel.getBaseArea().queryAll("._payMeansClassRadio"));
			},
			/* 일반결제 유형 input 영역 리스트 반환 */
			payMeansClassAllInputs: function () {
				return $ElementList(wel.getBaseArea().queryAll("input[name=payMeansClass]"));
			},
			/* 일반결제 유형중 포인트 유형 input */
			getPayMeansClassPointInput: function () {
				return $Element(wel.getBaseArea().query("input[value=POINT]"));
			},
			/* 펼침 영역(주의: 실제로 tab 영역 밖에 있어, baseArea에 의존할 수 없음) */
			getOpenArea: function () {
				return $Element(that._getElement("root").query("._generalPayments"));
			},
			/* 탭 주결제수단 금액 영역 */
			getGeneralPaymentAmount: function () {
				return $Element(wel.getBaseArea().query("._generalPaymentAmount"));
			},
			getTextBanner: function() {
				return wel.getShinhanTextBanner() || wel.getMembershipPlccTextBanner();
			},
			/* 신한카드 텍스트 배너 영역 */
			getShinhanTextBanner: function () {
				return $Element(wel.getBaseArea().query("._shinhanTextBanner"));
			},
			/* 멤버십 plcc 배너 영역 */
			getMembershipPlccTextBanner: function() {
				return $Element(wel.getBaseArea().query("._membershipPlccTextBanner"));
			},
			/* 광고 영역 */
			getCommonBanner: function(paymentMeansCode) {
				if (paymentMeansCode == "CREDIT_CARD") {
					return $Element(wel.getBaseArea().query("._creditCard_commonBanner"));
				} else if (paymentMeansCode == "BANK") {
					return $Element(wel.getBaseArea().query("._bank_commonBanner"));
				} else if (paymentMeansCode == "VIRTUAL_ACCOUNT") {
					return $Element(wel.getBaseArea().query("._virtualAccount_commonBanner"));
				} else if (paymentMeansCode == "SKIP") {
					return $Element(wel.getBaseArea().query("._skip_commonBanner"));
				} else if (paymentMeansCode == "MOBILE") {
					return $Element(wel.getBaseArea().query("._mobile_commonBanner"));
				}
			},
			getCommonBannerTypes: function() {
				return ["CREDIT_CARD", "BANK", "VIRTUAL_ACCOUNT", "SKIP", "MOBILE"];
			}
		};
		return {
			hasBaseArea: function() {
				return wel.getBaseArea() ? true : false;
			},
			isChecked: function () {
				return (wel.getBaseArea() && this.getWelCheckedInput()) ? true : false;
			},
			getWelCheckedInput: function () {
				if(wel.getRadioInputArea().visible() && wel.getRadioMarker().hasClass("radio-checked")) {
					return wel.getRadioInput();
				}

				if(wel.getCheckBoxInputArea().visible() && wel.getCheckBoxMarker().hasClass("checkbox-checked")) {
					return wel.getCheckBoxInput();
				}

				return null;
			},
			getTabId: function () {
				return "generalPayments";
			},
			showOpenArea: function () {
				if(wel.getBaseArea()){
					wel.getGeneralPaymentListArea().show();
					wel.getOpenArea().show();
				}
			},
			hideOpenArea: function () {
				if(wel.getBaseArea()) {
					this.hideTextBanner();
					this.hideCommonBanner();

					wel.getOpenArea().hide();
					wel.getGeneralPaymentListArea().hide();
				}
			},
			showTextBanner: function () {
				if(that.isPayMethodUiSingleMode() && wel.getTextBanner()){
					wel.getTextBanner().show();
				}
			},
			hideTextBanner: function () {
				if(wel.getTextBanner()){
					wel.getTextBanner().hide();
				}
			},
			showCommonBanner: function (paymentMeansCode) {
				if (wel.getCommonBanner(paymentMeansCode)){
					wel.getCommonBanner(paymentMeansCode).show();
				}
			},
			hideCommonBanner: function () {
				$A(wel.getCommonBannerTypes()).forEach(function (bannerType) {
					if (wel.getCommonBanner(bannerType)) {
						wel.getCommonBanner(bannerType).hide();
					}
				});
			},
			switchToRadioBoxUI: function() {
				wel.getCheckBoxInputArea().hide();
				wel.getRadioCheckboxLabel().attr("for", this.getTabId() + "Radio");
				wel.getRadioInputArea().show("inline-block");
			},
			switchToCheckBoxUI: function() {
				wel.getRadioInputArea().hide();
				wel.getRadioCheckboxLabel().attr("for", this.getTabId() + "CheckBox");
				wel.getCheckBoxInputArea().show("inline-block");
			},
			/* Radio 버튼 제어 */
			markRadio: function () {
				wel.getRadioMarker().addClass("radio-checked");
				wel.getRadioInput().attr("checked", true);
				wel.getRadioInput().attr("checked", false);
				if(this.getPayMeansClassList().indexOf(that.getPayMethod()) < 0){
					this.initPayMeansClass();
				}
			},
			clearRadio: function () {
				wel.getRadioMarker().removeClass("radio-checked");
				wel.getRadioInput().attr("checked", false);
			},
			/* Checkbox 버튼 제어 */
			markCheckBox: function() {
				wel.getCheckBoxMarker().addClass("checkbox-checked")
				wel.getCheckBoxInput().attr("checked", true);
				this.initPayMeansClass();
			},
			clearCheckBox: function() {
				wel.getCheckBoxMarker().removeClass("checkbox-checked");
				wel.getCheckBoxInput().attr("checked", false);
			},
			/* 일반결제 유형 marker 및 input 초기화 */
			clearAllPayMeansClass: function() {
				wel.getPayMeansClassRadioMarkers().removeClass("radio-checked");
				wel.payMeansClassAllInputs().attr("checked", false);
			},
			/* 탭 주결제수단 금액 보이기 */
			showGeneralPaymentAmount: function(amount){
				if (amount > 0) {
					wel.getGeneralPaymentAmount().html(nmp.front.order.ui.setThousandComma(amount) + '원');
					wel.getGeneralPaymentAmount().removeClass('off');
				}
			},
			/* 탭 주결제수단 금액 숨기기 */
			hideGeneralPaymentAmount: function(){
				wel.getGeneralPaymentAmount().addClass('off');
			},
			/* 탭 영역 초기화 */
			clear: function() {
				this.hideOpenArea();
				this.clearRadio();
				wel.getRadioInput().attr("checked", false);
				this.clearCheckBox();
				wel.getCheckBoxInput().attr("checked", false);
			},
			/* 포인트 input 초기화 */
			clearPayMeansClassPointInput: function () {
				wel.getPayMeansClassPointInput() && wel.getPayMeansClassPointInput().attr("checked", false);
			},
			/* 선택된 일반결제 유형 Input check */
			checkSelectedPayMeansClassInput: function(payMeansCode) {
				if(payMeansCode === "VIRTUAL_ACCOUNT") {
					payMeansCode = "SKIP";
				}
				var oSelectedPayMeansClassInput = $A(that._htInstance["aPayMeansClass"]).filter(function(oPayMeansClassInput){
					return oPayMeansClassInput.getInput().value === payMeansCode;
				}).get(0);

				if(oSelectedPayMeansClassInput) {
					oSelectedPayMeansClassInput.setChecked(true);
				}
			},
			/* 일반결제 유형 */
			getPayMeansClassList: function() {
				// 신용카드, 실시간 계좌이체, 핸드폰, 나중에결제, 무통장 입금
				return ["CREDIT_CARD", "BANK", "MOBILE", "SKIP", "VIRTUAL_ACCOUNT"];
			},
			/* 일반결제 유형중 첫번째 유형 선택 */
			checkFirstPayMeansClass: function() {
				var welFirstPayMeansClassRadioMarker = wel.getPayMeansClassRadioMarkers().getFirst();
				if(welFirstPayMeansClassRadioMarker){
					$Element(welFirstPayMeansClassRadioMarker.query("._radioMarker")).addClass("radio-checked");
					$Element(welFirstPayMeansClassRadioMarker.query("input")).attr("checked", true);
				}
			},
			/* 일반결제 결제수단 유형 초기화 */
			initPayMeansClass: function() {
				// 일반결제수단 유형중 첫번째 수단을 체크
				var aGeneralPayMeansClassRadio = that._htInstance["aPayMeansClass"];
				var oCheckedGeneralPayMeansClassRadio = aGeneralPayMeansClassRadio[0];
				oCheckedGeneralPayMeansClassRadio.setChecked(true);

				// 실시간 계좌이체가 첫번째 결제수단인 경우, POINT 이외의 결제수단(신용카드,모바일) 으로 유형을 체크
				if (oCheckedGeneralPayMeansClassRadio.getInput().value == "BANK") {
					$A(aGeneralPayMeansClassRadio).forEach(function (oGeneralPayMeansClassRadio) {
						var welGeneralPayMeasClassRadioInput = $Element(oGeneralPayMeansClassRadio.getInput());
						if (welGeneralPayMeasClassRadioInput.attr("value") != "BANK" && welGeneralPayMeasClassRadioInput.attr("value") != "POINT") {
							oGeneralPayMeansClassRadio.setChecked(true);
							oCheckedGeneralPayMeansClassRadio = oGeneralPayMeansClassRadio;
							$A.Break();
						}
					});
				}

				return oCheckedGeneralPayMeansClassRadio;
			}
		};
	},
	/** 일반결제탭 끝 */

	/** 후불결제 */
	payLaterInit: function () {
		var that = this;
		var openClassName = "is_opened";

		var wel = {
			getBaseArea: function () {
				return $Element(that._getElement("root").query("._payLater"));
			},
			/* 적립 뱃지 영역 */
			getBenefitBadgeArea: function () {
				return $Element(that._getElement("root").query("._payLaterBenefitBadge"));
			},
			/* 타이틀 설명 문구 영역 */
			getTitleDescriptionArea: function () {
				return $Element(that._getElement("root").query("._payLaterTitleDescription"));
			},
			/* 체크박스 wrapper 영역 */
			getPayLaterCheckBoxWrapper: function () {
				return $Element(that._getElement("root").query("#payLaterCheckBoxWrapper"));
			},
			/* 이용가능 영역 */
			getAvailableAmountArea: function () {
				return $Element(that._getElement("root").query("._payLaterAvailableAmountArea"));
			},
			/* 사용 영역 */
			payLaterUseAmountArea: function () {
				return $Element(that._getElement("root").query("._payLater ._payLaterUseAmountArea"));
			},
			/* 보유포인트 전액 사용됨 애니메이션 알림 영역 */
			payLaterUseAllNaverPointAlert: function () {
				return $Element(that._getElement("root").query("._payLater ._payLaterUseAllNaverPointAlert"));
			},
			/* 사용 금액 input */
			usePayLaterAmountInput: function () {
				return $Element($$.getSingle('input[name=PAY_LATER]'));
			}
		}

		return {
			init: function(){
				if (that.getDefaultSubPayMeansClass() === "PAY_LATER" && this.isAvailable() && (that._getTotalPayAmount() > that.getRemainNaverPoint()) ) {
					this.usePayLater(true);
				}
			},
			/* 체크박스 체크 여부 반환 */
			isChecked: function() {
				return that._htInstance["payLaterCheckBoxWrapper"] && that._htInstance["payLaterCheckBoxWrapper"].getChecked();
			},
			/* 사용 영역 오픈 */
			toggleOpenArea: function() {
				if(this.isChecked()) {
					wel.getBaseArea().addClass(openClassName);
					wel.getAvailableAmountArea().hide();
				} else {
					wel.getBaseArea().removeClass(openClassName)
					wel.getAvailableAmountArea().show();
				}
			},
			/* 후불결제 이용가능 여부 반환 */
			isAvailable: function() {
				return wel.getBaseArea() && wel.getBaseArea().hasClass("_normalStatus") && (this.getAvailableAmount() > 0);
			},
			/* 이용가능한(남아있는) 후불결제 금액 반환 */
			getAvailableAmount: function() {
				return that._getOption("remainPayLaterAmount");
			},
			hasUseAmount: function() {
				return that._getInputIntValue("PAY_LATER") > 0 ? true : false;
			},
			clear: function() {
				that._htInstance["payLaterCheckBoxWrapper"].setChecked(false);
				this.toggleOpenArea();
				this.clearUseAmount();
				that.disableSkipPaymentMethod(false);
			},
			clearUseAmount: function() {
				this.clearUseAmountInput();
				this.toggleClearPayLaterButton();
				this.togglePayLaterUseAllNaverPointAlert();
			},
			clearUseAmountInput: function () {
				wel.usePayLaterAmountInput().attr('value', 0);
			},
			usePayLater: function (useAllPayLaterAmount) {
				that._htInstance["payLaterCheckBoxWrapper"].setChecked(true);
				this.toggleOpenArea();

				// 충전결제 사용 disable
				that._getChargePoint().disableByPayLater();
				that.disableSkipPaymentMethod(true);

				// 보유포인트 전액 사용
				if (useAllPayLaterAmount == undefined || useAllPayLaterAmount) {
					that.useAllNaverCash();
					this.useAllPayLaterAmount();
				} else {
					that.useAllSubSettle();
				}
				// 보유포인트 전액사용 사용 처리(disable)
				that._getElement("pointAllUseButton").addClass("disable");
			},
			useAllPayLaterAmount: function () {
				var availablePayLaterAmount = this.getAvailableAmount();
				var changeElementName = "PAY_LATER";

				// 주문금액 < 포인트인 경우
				if (that.checkPointFirstBeforePayLaterUsing()) {
					that.showDimmedLayerUsePointBeforePayLaterUse();
					return;
				}

				if (availablePayLaterAmount <= 0) {
					return;
				}

				$$.getSingle("input[name='" + changeElementName + "']").value = nmp.front.order.ui.setThousandComma(availablePayLaterAmount);

				// 포인트 충전결제 사용중이면 disable
				that._getChargePoint().disableByPayLater();
				that.disableSkipPaymentMethod(true);

				that.calculateTotalPrice(null, availablePayLaterAmount, changeElementName, null);
				this.toggleClearPayLaterButton();
				this.togglePayLaterUseAllNaverPointAlert();
			},
			unUsePayLater : function (useClearPoint) {
				this.clear();

				if (that.getUsePointAllYn() == false && useClearPoint) {
					that.clearPoint();
				} else {
					that.calculateTotalPrice(null, null, null, null);
				}

				// 포인트 전액사용 버튼 toggle
				if(that.getMileageUseAmount() < that.getRemainNaverPoint()){
					that._getElement("pointAllUseButton").removeClass("disable");
				}
			},
			calculate: function (totalAccountPrice, inputPayLaterAmount, totalDiscountPrice, allusableAmount) {
				var payLaterAmount = 0;
				//입력값이 가용금액보다 큰경우 가용금액까지만
				if(inputPayLaterAmount > allusableAmount){
					payLaterAmount = allusableAmount;
				}
				//가용금액이 (포인트가 포함된)결제하려는 금액보다 큰경우 차액까지만
				if ((totalAccountPrice - totalDiscountPrice) < inputPayLaterAmount) {
					payLaterAmount = (totalAccountPrice - totalDiscountPrice);
				} else {
					payLaterAmount = inputPayLaterAmount;
				}
				if(payLaterAmount <= 0){
					payLaterAmount = 0;
				} else {
					this.toggleClearPayLaterButton();
				}
				wel.usePayLaterAmountInput().attr('value', nmp.front.order.ui.setThousandComma(payLaterAmount));
				return payLaterAmount;
			},
			toggleClearPayLaterButton: function () {
				var welParent = $Element($$.getSingle("input[name='PAY_LATER']").parentElement);
				var welClearPoint = $Element(welParent.query('._payLaterAmountClearButton'));
				if (welClearPoint != undefined) {
					if (that._getPayLaterAmount() <= 0) {
						// wel.payLaterUseAmountArea().removeClass("point_green");
						welParent.removeClass("type_delete");
						welClearPoint.hide();
					} else {
						// wel.payLaterUseAmountArea().addClass("point_green");
						welParent.addClass("type_delete");
						welClearPoint.show();
					}
				}
			},
			/* 적립 뱃지 토글 */
			toggleBenefitBadge: function(isShow) {
				if(!wel.getBenefitBadgeArea()){
					return;
				}
				isShow ? wel.getBenefitBadgeArea().show("inline-block") : wel.getBenefitBadgeArea().hide();
			},
			togglePayLaterUseAllNaverPointAlert: function () {
				if(!wel.payLaterUseAllNaverPointAlert()){
					return;
				}

				if (that.getRemainNaverPoint() > 0 && this.isAvailable() && this.hasUseAmount()) {
					wel.payLaterUseAllNaverPointAlert().show();
				} else {
					wel.payLaterUseAllNaverPointAlert().hide();
				}
			},
			/* x버튼 클릭 핸들러 */
			reset: function () {
				this.clearUseAmount();
				that.disableSkipPaymentMethod(true);
				if(that._htInstance["isPreviousChargePointUsed"]) {
					that.changePaymentTabSelection("chargePoint");
				}
				that.calculateTotalPrice(null, null, "PAY_LATER");
			},
			goLink: function (type) {
				if (type == undefined) {
					type = "home";
				}
				var sUrl = that.getOption("urls")["paylater." + type + ".url"]
				if (type == "signup") {
					sUrl = sUrl + "?rurl=" + encodeURIComponent(that.getOption("urls")["paylater.callback.done"]);
				} else if (type == "home") {
					sUrl = sUrl + "?from=pc-order";
				} else if (type == "overdue" || type == "payment") {
					sUrl = sUrl + "?from=pc-order&rurl=" + encodeURIComponent(that.getOption("urls")["paylater.callback.done"]);
				}
				nmp.openPopup(sUrl, ["width=500", "height=660", "scrollbars=yes", "resizable=no"], "payLater" + type + "Popup", null, true);
			},
			/* 후불결제 비활성화 여부 반환 */
			isDisabled: function() {
				return wel.getPayLaterCheckBoxWrapper() && wel.getPayLaterCheckBoxWrapper().hasClass("checkbox-disabled");
			},
			/* 후불결제 비활성화 */
			disable: function () {
				this.clear();
				that._htInstance["payLaterCheckBoxWrapper"].disable();
				this.toggleBenefitBadge(false);
				wel.getTitleDescriptionArea().html("보유포인트를 모두 사용해야 후불결제 이용이 가능해요.");
				wel.getAvailableAmountArea().hide();
			},
			/* 후불결제 비활성화 해제 */
			releaseDisable: function () {
				that._htInstance["payLaterCheckBoxWrapper"].enable();
				this.toggleBenefitBadge(true);
				this.togglePayLaterUseAllNaverPointAlert();
				wel.getTitleDescriptionArea().html("지금 구매하고, 다음에 납부하세요!");
				wel.getAvailableAmountArea().show();
			},
		}
	},
	_getPayLater: function () {
		return this._htInstance["payLater"];
	},
	_getPayLaterAmount: function () {
		return this._getInputIntValue("PAY_LATER");
	},
	_payLaterAvailable: function(){
		return this._getPayLater().isAvailable();
	},
	checkUsingPayLater: function () {
		return this._getPayLaterAmount() > 0  ;
	},
	checkAvailablePayLater: function () {
		return this._payLaterAvailable();
	},
	unUsePayLater : function(useClearPoint){
		return this._getPayLater().unUsePayLater(useClearPoint);
	},
	usePayLater : function(useAllPayLaterAmount){
		return this._getPayLater().usePayLater(useAllPayLaterAmount);
	},
	showTutorialPayLaterLayer : function(){
		this.showDimmedLayer(this._getElement('dimmed_layer_tutorial_paylater'), this._getElement('layer_tutorial_paylater'));
	},
	hideTutorialPayLaterLayer : function(){
		var elHideLayer = this._getElement('dimmed_layer_tutorial_paylater');
		if (elHideLayer) {
			elHideLayer.hide();
		}
		nmp.requestAjax("/orderSheetAjax/tutorialLayerClose",{}, {
			method : "post",
			onload : $Fn(function() {
				//console.log("update sucess .exposure tutorialLayerClose");
			}, this).bind(),
			onerror : function(res) {
				console.log("update fail.exposure tutorialLayerClose");
			}
		});
	},
	payLaterUseAmountReset: function () {
		this._getPayLater().reset();
	},
	useAllPayLaterAmount: function () {
		// 보유포인트 전액사용하지 않고, 후불결제 사용하는 경우
		if(this.isUsedAllNaverPoint() == false){
			this.showDimmedLayerUseAllPointBeforePayLaterUse();
			return;
		}

		this._getPayLater().useAllPayLaterAmount();
	},
	/* 후불결제 항상 전액 사용 버튼 체크 여부 반환 */
	getAlwaysUsePayLater: function () {
		if (this._htInstance["alwaysUsePayLater"]) {
			return this._htInstance["alwaysUsePayLater"].getChecked();
		}
		return false;
	},
	alwaysUsePayLaterOnClick: function () {
		if (this.getAlwaysUsePayLater()) {
			if (this._getTotalPayAmount() > 0) {
				this.useAllPayLaterAmount();
			}
			this._setOption("usePayLaterAllYn", true);
		} else {
			this._setOption("usePayLaterAllYn", false);
		}
	},
	/* 후불결제 체크 박스 toggle 핸들러 */
	togglePayLaterCheckBox: function() {

		// 주문금액 < 포인트인 경우 팝업 레이어 노출
		if (this.checkPointFirstBeforePayLaterUsing()) {
			this.showDimmedLayerUsePointBeforePayLaterUse();
			return;
		}

		// 보유포인트 전액 사용하지 않은 case
		if(!this.isUsedAllNaverPoint()){
			this.showDimmedLayerUseAllPointBeforePayLaterUse();
			return;
		}

		// toggle
		this._getPayLater().isChecked() ? this._getPayLater().usePayLater(true) : this._getPayLater().unUsePayLater(false);
	},
	/* 후불결제 사용 금액 변경 핸들러 */
	calculatePayLaterTotalPriceOnBlur : function(we) {

		// 이용가능 여부 확인
		if(!this._getPayLater().isAvailable()) {
			return;
		}

		// 주문금액 < 포인트인 경우 팝업 레이어 노출
		if (this.checkPointFirstBeforePayLaterUsing()) {
			this.showDimmedLayerUsePointBeforePayLaterUse();
			return;
		}

		// 보유포인트 전액 사용하지 않은 case
		if(!this.isUsedAllNaverPoint()){
			this.showDimmedLayerUseAllPointBeforePayLaterUse();
			return;
		}

		// 나중에 결제 토글
		this.disableSkipPaymentMethod(this._getPayLater().isChecked() ? true : false);
		this.calculateTotalPrice(we, this._getOption("remainPayLaterAmount"), "PAY_LATER");

		// 후불결제 하단 애니메이션 영역 처리
		this._getPayLater().togglePayLaterUseAllNaverPointAlert();
		// x 버튼 및 금액 색상(초록) 처리
		this._getPayLater().toggleClearPayLaterButton();
	},
	goPayLaterPage: function(we, type) {
		this._getPayLater().goLink(type);
		this._htInstance["payLaterCheckBoxWrapper"].setChecked(false);
	},
	checkPointFirstBeforePayLaterUsing: function () {
		var totalNaverPoint = this.getRemainNaverPoint();
		var orderPayAmount = this.getOrderSnapshot().orderPayAmount;
		if (orderPayAmount <= totalNaverPoint) {
			return true;
		}
		return false;
	},
	/* 보유포인트 전액 사용여부 반환 */
	isUsedAllNaverPoint: function () {
		var allUsableNaverPoint = this._getOption("remainNaverMileage") + this._getOption("remainChargedPoint");
		return (allUsableNaverPoint > 0 && this.isDisabledUseAllPointBtn() == false) ? false : true;
	},
	getRemainNaverPoint: function () {
		if(this._getOption("remainTotalNaverPoint") == undefined){
			return 0;
		}
		return this._getOption("remainTotalNaverPoint") >= 0 ? this._getOption("remainTotalNaverPoint") : 0
	},
	/* 주문금액 < 포인트인 경우 노출되는 레이어 */
	showDimmedLayerUsePointBeforePayLaterUse: function () {
		this.showDimmedLayer(this._getElement('dimmed_layer_point_before_paylater_use'), this._getElement('layer_point_before_paylater_use'));
	},
	hideDimmedLayerUsingPointBeforePayLaterUse: function () {
		this.hidDimmedLayer(null, 'dimmed_layer_point_before_paylater_use');
		this._htInstance["payLaterCheckBoxWrapper"].setChecked(false);
	},
	/* 포인트 전액사용 아닌경우 노출되는 레이어 */
	showDimmedLayerUseAllPointBeforePayLaterUse: function () {
		var welLayer = this._getElement('dimmed_layer_use_all_point_before_paylater_use');
		this.showDimmedLayer(welLayer, this._getElement('layer_use_all_point_before_paylater_use'));
	},
	hideDimmedLayerUseAllPointBeforePayLaterUse: function () {
		this.hidDimmedLayer(null, 'dimmed_layer_use_all_point_before_paylater_use');
		this._getPayLater().clearUseAmountInput();
		this._htInstance["payLaterCheckBoxWrapper"].setChecked(false);
	},
	/* 충전결제 Dimmed 상태 클릭시 노출되는 레이어 */
	showDimmedLayerUnableChargePoint: function() {
		this.showDimmedLayer(this._getElement('dimmed_layer_show_unable_chargePoint'), this._getElement('layer_show_unable_chargePoint'));
	},
	/** 후불결제 끝 */
	showMembershipPlccIssuePage : function() {
		var htUrls = this._getOption("urls");
		var eventCode = "NAV04";
		var locationUrl = htUrls["membership.plcc.issue.url"] + "eventCode=" + eventCode + "&redirect_Url1=" + window.location.href

		window.open(locationUrl);
	},
	saveOrderInfoInStorage : function () {
		if (nmp.front.order.order_sheet.storage) {
			nmp.front.order.order_sheet.storage.saveOrderInfo();
		}
	},
	/**
	 * 장보기 영역
	 */
	isAlwaysUsePickupLocation : function () {
		if (this._htInstance["alwaysUsePickupLocationCheckbox"]) {
			return this._htInstance["alwaysUsePickupLocationCheckbox"].getChecked();
		}
		return;
	},
	isAddedPickupLocation : function () {
		var elAddedPickupLocationYn = this._getElement("root").query("._addedPickupLocationYn");
		if (elAddedPickupLocationYn == undefined) {
			return;
		}
		return elAddedPickupLocationYn.value;
	},
	selectPickupLocation : function (sType) {
		if (this._htInstance["aPickupLocationType"] != undefined) {
			$A(this._htInstance["aPickupLocationType"]).forEach(function (v) {
				var welInput = $Element(v.getInput());
				if (welInput.attr("value") == sType) {
					v.setChecked(true);
					$A.Break();
				}
			});
		}

		this.displayChangeByPickupLocation(undefined, sType);
	},
	displayChangeByPickupLocation : function (htEvent, sPickupLocationType) {
		if (sPickupLocationType == "FRONT_OF_DOOR") {
			$ElementList(this._getElement("entryMethodArea").queryAll("span")).removeClass("radio-disabled");
			$ElementList(this._getElement("entryMethodArea").queryAll("input")).attr("disabled", false);
			this._getElementList("entryMethodArea").show();
		} else {
			$ElementList(this._getElement("entryMethodArea").queryAll("input")).attr("disabled", true);
			this._getElementList("entryMethodArea").hide();
		}

		if (sPickupLocationType == "OTHER") {
			this._getElement("pickupLocationContent").attr("disabled", "");
			this._getElement("pickupLocationContent").show();
		} else {
			this._getElement("pickupLocationContent").attr("disabled", "disabled");
			this._getElement("pickupLocationContent").hide();

			if ($$.getSingle("input[name='deliveryAddress.pickupLocationContent']") != undefined) {
				$$.getSingle("input[name='deliveryAddress.pickupLocationContent']").value = "";
			}

			var sEntryMethodType = this._getElement("deliveryInfos").query("input[name='deliveryAddress.entryMethodType']:checked").value;
			this.displayChangeByEntryMethod(undefined, sEntryMethodType);
		}

		if (nmp.front.order.order_sheet.storage != undefined) {
			nmp.front.order.order_sheet.storage.saveOrderInfo();
		}
	},
	selectEntryMethod : function (sType) {
		if (this._htInstance["aEntryMethodType"] != undefined) {
			$A(this._htInstance["aEntryMethodType"]).forEach(function (v) {
				var welInput = $Element(v.getInput());
				if (welInput.attr("value") == sType) {
					v.setChecked(true);
					$A.Break();
				}
			});
		}

		this.displayChangeByEntryMethod(undefined, sType);
	},
	displayChangeByEntryMethod : function (htEvent, sEntryMethodType) {
		var sPlaceholder = "";
		switch (sEntryMethodType) {
			case "LOBBY_PW":
				sPlaceholder = "입력 방법까지 상세히 적어 주세요. ex)#1234";
				break;
			case "MANAGEMENT_OFFICE":
				sPlaceholder = "경비실 호출 방법을 입력해 주세요.";
				break;
			case "OTHER":
				sPlaceholder = "기타 출입 방법을 입력해 주세요.";
				break;
		}

		if (sEntryMethodType != "FREE") {
			if (this._getElement("entryMethodContent").attr("placeholder") != sPlaceholder) {
				$$.getSingle("input[name='deliveryAddress.entryMethodContent']").value = "";
			}

			this._getElement("entryMethodContent").attr("disabled", false);
			this._getElement("entryMethodContent").attr("placeholder", sPlaceholder);
			this._getElement("entryMethodContent").show();
		} else {
			this._getElement("entryMethodContent").attr("disabled", true);
			this._getElement("entryMethodContent").hide();
		}

		if (nmp.front.order.order_sheet.storage != undefined) {
			nmp.front.order.order_sheet.storage.saveOrderInfo();
		}
	},
	_isValidatePickupAndEntry : function () {
		if (this._getElement("deliveryInfos") == undefined) {
			return false;
		}

		var elPickupLocation = this._getElement("deliveryInfos").query("input[name='deliveryAddress.pickupLocationType']:checked");
		if (elPickupLocation == undefined) {
			return false;
		}

		if (elPickupLocation.value == "OTHER") {
			var sPickupLocationContent = this._getElement("deliveryInfos").query("input[name='deliveryAddress.pickupLocationContent']").value;
			if (sPickupLocationContent == undefined || sPickupLocationContent.trim().length < 1) {
				alert("원하시는 위치에 배송해드리기 위해 기타 수령위치를 입력해주세요.");
				return true;
			}
		} else if (elPickupLocation.value == "FRONT_OF_DOOR") {
			var elEntryMethodType = this._getElement("deliveryInfos").query("input[name='deliveryAddress.entryMethodType']:checked");
			var sEntryMethodContent = this._getElement("deliveryInfos").query("input[name='deliveryAddress.entryMethodContent']").value;
			switch (elEntryMethodType.value) {
				case "LOBBY_PW":
					if (sEntryMethodContent == undefined || sEntryMethodContent.trim().length < 1) {
						alert("문 앞까지 배송해드리기 위해 공동현관 비밀번호를 입력해주세요.");
						return true;
					}
					break;
				case "OTHER":
					if (sEntryMethodContent == undefined || sEntryMethodContent.trim().length < 1) {
						alert("문 앞까지 배송해드리기 위해 기타 출입방법을 입력해주세요.");
						return true;
					}
					break;
				default:
					break;
			}
		}
		return false;
	},
	setPickupLocationAndEntryMethod : function (htData) {
		if (this._htInstance["alwaysUsePickupLocationCheckbox"] != undefined && htData.alwaysUsePickupLocation != undefined) {
			this._htInstance["alwaysUsePickupLocationCheckbox"].setChecked(htData.alwaysUsePickupLocation);
		}

		if (htData.pickupLocationType == undefined) {
			return;
		}

		this.selectPickupLocation(htData.pickupLocationType);

		if (htData.pickupLocationType == "OTHER") {
			if (htData.pickupLocationContent != undefined && $$.getSingle("input[name='deliveryAddress.pickupLocationContent']") != undefined) {
				$$.getSingle("input[name='deliveryAddress.pickupLocationContent']").value = htData.pickupLocationContent;
			}
		} else if (htData.pickupLocationType == "FRONT_OF_DOOR") {
			this.selectEntryMethod(htData.entryMethodType);

			if (htData.entryMethodType != "FREE" && htData.entryMethodContent != undefined && $$.getSingle("input[name='deliveryAddress.entryMethodContent']") != undefined) {
				$$.getSingle("input[name='deliveryAddress.entryMethodContent']").value = htData.entryMethodContent;
			}
		}
	},
	toggleDepositTooltip: function (htEvent, sTooltipSelector) {
		if(sTooltipSelector == undefined){
			return;
		}

		var eTooltip = this._getElement("root").query("._" + sTooltipSelector + "Tooltip");
		if (eTooltip == undefined) {
			return;
		}
		eTooltip = $Element(eTooltip);
		eTooltip.css({
			left : htEvent.pos().pageX+"px",
			top : htEvent.pos().pageY+"px"
		});
		if (eTooltip.visible()) {
			eTooltip.hide();
		} else {
			eTooltip.show();
		}
	},
	/**
	 * 장보기 영역 끝
	 */
	isPGPayment : function(payMeansClass) {
		return (this._getOption("orderClass") == "CHECKOUT"
			&& !this._isEasyPay(payMeansClass)
			&& (payMeansClass != "SKIP")
			&& nmp.front.order.order_sheet.macos == undefined
			&& !this.getOption("isForcedBillingPayment"));
	},
	getAdultAuthenticationToken : function() {
		return this._htInstance["adultAuthenticationToken"];
	},
	"":""
});
